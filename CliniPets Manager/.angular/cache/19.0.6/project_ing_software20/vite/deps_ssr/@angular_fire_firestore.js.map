{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-firestore.mjs", "../../../../../../node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs", "../../../../../../node_modules/rxfire/auth/index.esm.js", "../../../../../../node_modules/@angular/fire/node_modules/@firebase/auth/dist/node-esm/index.js", "../../../../../../node_modules/@firebase/firestore/dist/index.node.mjs", "../../../../../../node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js", "../../../../../../node_modules/rxfire/firestore/index.esm.js"],
  "sourcesContent": ["import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { collectionChanges as collectionChanges$1, collection as collection$1, sortedChanges as sortedChanges$1, auditTrail as auditTrail$1, collectionData as collectionData$1, collectionCountSnap as collectionCountSnap$1, collectionCount as collectionCount$1, doc as doc$1, docData as docData$1, snapToData as snapToData$1, fromRef as fromRef$1 } from 'rxfire/firestore';\nimport { addDoc as addDoc$1, aggregateFieldEqual as aggregateFieldEqual$1, aggregateQuerySnapshotEqual as aggregateQuerySnapshotEqual$1, and as and$1, arrayRemove as arrayRemove$1, arrayUnion as arrayUnion$1, average as average$1, clearIndexedDbPersistence as clearIndexedDbPersistence$1, collection as collection$2, collectionGroup as collectionGroup$1, connectFirestoreEmulator as connectFirestoreEmulator$1, count as count$1, deleteAllPersistentCacheIndexes as deleteAllPersistentCacheIndexes$1, deleteDoc as deleteDoc$1, deleteField as deleteField$1, disableNetwork as disableNetwork$1, disablePersistentCacheIndexAutoCreation as disablePersistentCacheIndexAutoCreation$1, doc as doc$2, documentId as documentId$1, enableIndexedDbPersistence as enableIndexedDbPersistence$1, enableMultiTabIndexedDbPersistence as enableMultiTabIndexedDbPersistence$1, enableNetwork as enableNetwork$1, enablePersistentCacheIndexAutoCreation as enablePersistentCacheIndexAutoCreation$1, endAt as endAt$1, endBefore as endBefore$1, getAggregateFromServer as getAggregateFromServer$1, getCountFromServer as getCountFromServer$1, getDoc as getDoc$1, getDocFromCache as getDocFromCache$1, getDocFromServer as getDocFromServer$1, getDocs as getDocs$1, getDocsFromCache as getDocsFromCache$1, getDocsFromServer as getDocsFromServer$1, getFirestore as getFirestore$1, getPersistentCacheIndexManager as getPersistentCacheIndexManager$1, increment as increment$1, initializeFirestore as initializeFirestore$1, limit as limit$1, limitToLast as limitToLast$1, loadBundle as loadBundle$1, memoryEagerGarbageCollector as memoryEagerGarbageCollector$1, memoryLocalCache as memoryLocalCache$1, memoryLruGarbageCollector as memoryLruGarbageCollector$1, namedQuery as namedQuery$1, onSnapshot as onSnapshot$1, onSnapshotsInSync as onSnapshotsInSync$1, or as or$1, orderBy as orderBy$1, persistentLocalCache as persistentLocalCache$1, persistentMultipleTabManager as persistentMultipleTabManager$1, persistentSingleTabManager as persistentSingleTabManager$1, query as query$1, queryEqual as queryEqual$1, refEqual as refEqual$1, runTransaction as runTransaction$1, serverTimestamp as serverTimestamp$1, setDoc as setDoc$1, setIndexConfiguration as setIndexConfiguration$1, setLogLevel as setLogLevel$1, snapshotEqual as snapshotEqual$1, startAfter as startAfter$1, startAt as startAt$1, sum as sum$1, terminate as terminate$1, updateDoc as updateDoc$1, waitForPendingWrites as waitForPendingWrites$1, where as where$1, writeBatch as writeBatch$1 } from 'firebase/firestore';\nexport * from 'firebase/firestore';\nclass Firestore {\n  constructor(firestore) {\n    return firestore;\n  }\n}\nconst FIRESTORE_PROVIDER_NAME = 'firestore';\nclass FirestoreInstances {\n  constructor() {\n    return _getAllInstancesOf(FIRESTORE_PROVIDER_NAME);\n  }\n}\nconst firestoreInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(FIRESTORE_PROVIDER_NAME))), distinct());\nconst PROVIDED_FIRESTORE_INSTANCES = new InjectionToken('angularfire2.firestore-instances');\nfunction defaultFirestoreInstanceFactory(provided, defaultApp) {\n  const defaultFirestore = _getDefaultInstanceOf(FIRESTORE_PROVIDER_NAME, provided, defaultApp);\n  return defaultFirestore && new Firestore(defaultFirestore);\n}\nfunction firestoreInstanceFactory(fn) {\n  return (zone, injector) => {\n    const firestore = zone.runOutsideAngular(() => fn(injector));\n    return new Firestore(firestore);\n  };\n}\nconst FIRESTORE_INSTANCES_PROVIDER = {\n  provide: FirestoreInstances,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES]]\n};\nconst DEFAULT_FIRESTORE_INSTANCE_PROVIDER = {\n  provide: Firestore,\n  useFactory: defaultFirestoreInstanceFactory,\n  deps: [[new Optional(), PROVIDED_FIRESTORE_INSTANCES], FirebaseApp]\n};\nclass FirestoreModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fst');\n  }\n  static ɵfac = function FirestoreModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FirestoreModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FirestoreModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideFirestore(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'fst');\n  return makeEnvironmentProviders([DEFAULT_FIRESTORE_INSTANCE_PROVIDER, FIRESTORE_INSTANCES_PROVIDER, {\n    provide: PROVIDED_FIRESTORE_INSTANCES,\n    useFactory: firestoreInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps,\n    // Firestore+Auth work better if Auth is loaded first\n    [new Optional(), AuthInstances], [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst collectionChanges = _zoneWrap(collectionChanges$1, true);\nconst collectionSnapshots = _zoneWrap(collection$1, true);\nconst sortedChanges = _zoneWrap(sortedChanges$1, true);\nconst auditTrail = _zoneWrap(auditTrail$1, true);\nconst collectionData = _zoneWrap(collectionData$1, true);\nconst collectionCountSnap = _zoneWrap(collectionCountSnap$1, true);\nconst collectionCount = _zoneWrap(collectionCount$1, true);\nconst docSnapshots = _zoneWrap(doc$1, true);\nconst docData = _zoneWrap(docData$1, true);\nconst snapToData = _zoneWrap(snapToData$1, true);\nconst fromRef = _zoneWrap(fromRef$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst addDoc = _zoneWrap(addDoc$1, true);\nconst aggregateFieldEqual = _zoneWrap(aggregateFieldEqual$1, true);\nconst aggregateQuerySnapshotEqual = _zoneWrap(aggregateQuerySnapshotEqual$1, true);\nconst and = _zoneWrap(and$1, true);\nconst arrayRemove = _zoneWrap(arrayRemove$1, true);\nconst arrayUnion = _zoneWrap(arrayUnion$1, true);\nconst average = _zoneWrap(average$1, true);\nconst clearIndexedDbPersistence = _zoneWrap(clearIndexedDbPersistence$1, true);\nconst collection = _zoneWrap(collection$2, true);\nconst collectionGroup = _zoneWrap(collectionGroup$1, true);\nconst connectFirestoreEmulator = _zoneWrap(connectFirestoreEmulator$1, true);\nconst count = _zoneWrap(count$1, true);\nconst deleteAllPersistentCacheIndexes = _zoneWrap(deleteAllPersistentCacheIndexes$1, true);\nconst deleteDoc = _zoneWrap(deleteDoc$1, true);\nconst deleteField = _zoneWrap(deleteField$1, true);\nconst disableNetwork = _zoneWrap(disableNetwork$1, true);\nconst disablePersistentCacheIndexAutoCreation = _zoneWrap(disablePersistentCacheIndexAutoCreation$1, true);\nconst doc = _zoneWrap(doc$2, true);\nconst documentId = _zoneWrap(documentId$1, true);\nconst enableIndexedDbPersistence = _zoneWrap(enableIndexedDbPersistence$1, true);\nconst enableMultiTabIndexedDbPersistence = _zoneWrap(enableMultiTabIndexedDbPersistence$1, true);\nconst enableNetwork = _zoneWrap(enableNetwork$1, true);\nconst enablePersistentCacheIndexAutoCreation = _zoneWrap(enablePersistentCacheIndexAutoCreation$1, true);\nconst endAt = _zoneWrap(endAt$1, true);\nconst endBefore = _zoneWrap(endBefore$1, true);\nconst getAggregateFromServer = _zoneWrap(getAggregateFromServer$1, true);\nconst getCountFromServer = _zoneWrap(getCountFromServer$1, true);\nconst getDoc = _zoneWrap(getDoc$1, true);\nconst getDocFromCache = _zoneWrap(getDocFromCache$1, true);\nconst getDocFromServer = _zoneWrap(getDocFromServer$1, true);\nconst getDocs = _zoneWrap(getDocs$1, true);\nconst getDocsFromCache = _zoneWrap(getDocsFromCache$1, true);\nconst getDocsFromServer = _zoneWrap(getDocsFromServer$1, true);\nconst getFirestore = _zoneWrap(getFirestore$1, true);\nconst getPersistentCacheIndexManager = _zoneWrap(getPersistentCacheIndexManager$1, true);\nconst increment = _zoneWrap(increment$1, true);\nconst initializeFirestore = _zoneWrap(initializeFirestore$1, true);\nconst limit = _zoneWrap(limit$1, true);\nconst limitToLast = _zoneWrap(limitToLast$1, true);\nconst loadBundle = _zoneWrap(loadBundle$1, true);\nconst memoryEagerGarbageCollector = _zoneWrap(memoryEagerGarbageCollector$1, true);\nconst memoryLocalCache = _zoneWrap(memoryLocalCache$1, true);\nconst memoryLruGarbageCollector = _zoneWrap(memoryLruGarbageCollector$1, true);\nconst namedQuery = _zoneWrap(namedQuery$1, true);\nconst onSnapshot = _zoneWrap(onSnapshot$1, true);\nconst onSnapshotsInSync = _zoneWrap(onSnapshotsInSync$1, true);\nconst or = _zoneWrap(or$1, true);\nconst orderBy = _zoneWrap(orderBy$1, true);\nconst persistentLocalCache = _zoneWrap(persistentLocalCache$1, true);\nconst persistentMultipleTabManager = _zoneWrap(persistentMultipleTabManager$1, true);\nconst persistentSingleTabManager = _zoneWrap(persistentSingleTabManager$1, true);\nconst query = _zoneWrap(query$1, true);\nconst queryEqual = _zoneWrap(queryEqual$1, true);\nconst refEqual = _zoneWrap(refEqual$1, true);\nconst runTransaction = _zoneWrap(runTransaction$1, true);\nconst serverTimestamp = _zoneWrap(serverTimestamp$1, true);\nconst setDoc = _zoneWrap(setDoc$1, true);\nconst setIndexConfiguration = _zoneWrap(setIndexConfiguration$1, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\nconst snapshotEqual = _zoneWrap(snapshotEqual$1, true);\nconst startAfter = _zoneWrap(startAfter$1, true);\nconst startAt = _zoneWrap(startAt$1, true);\nconst sum = _zoneWrap(sum$1, true);\nconst terminate = _zoneWrap(terminate$1, true);\nconst updateDoc = _zoneWrap(updateDoc$1, true);\nconst waitForPendingWrites = _zoneWrap(waitForPendingWrites$1, true);\nconst where = _zoneWrap(where$1, true);\nconst writeBatch = _zoneWrap(writeBatch$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Firestore, FirestoreInstances, FirestoreModule, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, auditTrail, average, clearIndexedDbPersistence, collection, collectionChanges, collectionCount, collectionCountSnap, collectionData, collectionGroup, collectionSnapshots, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, docData, docSnapshots, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, firestoreInstance$, fromRef, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, provideFirestore, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapToData, snapshotEqual, sortedChanges, startAfter, startAt, sum, terminate, updateDoc, waitForPendingWrites, where, writeBatch };\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, revokeAccessToken as revokeAccessToken$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n}\nclass AuthInstances {\n  constructor() {\n    return _getAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = _getDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nclass AuthModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth');\n  }\n  static ɵfac = function AuthModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAuth(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'auth');\n  return makeEnvironmentProviders([DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER, {\n    provide: PROVIDED_AUTH_INSTANCES,\n    useFactory: authInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = _zoneWrap(authState$1, true);\nconst user = _zoneWrap(user$1, true);\nconst idToken = _zoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = _zoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = _zoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = _zoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = _zoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = _zoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = _zoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = _zoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = _zoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = _zoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = _zoneWrap(getAuth$1, true);\nconst getIdToken = _zoneWrap(getIdToken$1, true);\nconst getIdTokenResult = _zoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = _zoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = _zoneWrap(getRedirectResult$1, true);\nconst initializeAuth = _zoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = _zoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = _zoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = _zoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = _zoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = _zoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = _zoneWrap(linkWithRedirect$1, true);\nconst multiFactor = _zoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = _zoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = _zoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = _zoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = _zoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = _zoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = _zoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = _zoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = _zoneWrap(reload$1, true);\nconst revokeAccessToken = _zoneWrap(revokeAccessToken$1, true);\nconst sendEmailVerification = _zoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = _zoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = _zoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = _zoneWrap(setPersistence$1, true);\nconst signInAnonymously = _zoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = _zoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = _zoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = _zoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = _zoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = _zoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = _zoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = _zoneWrap(signInWithRedirect$1, true);\nconst signOut = _zoneWrap(signOut$1, true);\nconst unlink = _zoneWrap(unlink$1, true);\nconst updateCurrentUser = _zoneWrap(updateCurrentUser$1, true);\nconst updateEmail = _zoneWrap(updateEmail$1, true);\nconst updatePassword = _zoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = _zoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = _zoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = _zoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = _zoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = _zoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = _zoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n", "import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(getIdToken(user)) : of(null);\n  }));\n}\nexport { authState, idToken, user };\n", "export { A as ActionCodeOperation, ai as ActionCodeURL, L as AuthCredential, I as AuthErrorCodes, M as EmailAuthCredential, V as EmailAuthProvider, W as FacebookAuthProvider, F as FactorId, Y as GithubAuthProvider, X as GoogleAuthProvider, N as OAuthCredential, Z as OAuthProvider, O as OperationType, Q as PhoneAuthCredential, P as PhoneAuthProvider, m as PhoneMultiFactorGenerator, p as ProviderId, R as RecaptchaVerifier, _ as SAMLAuthProvider, S as SignInMethod, T as TotpMultiFactorGenerator, n as TotpSecret, $ as TwitterAuthProvider, a7 as applyActionCode, x as beforeAuthStateChanged, b as browserLocalPersistence, k as browserPopupRedirectResolver, a as browserSessionPersistence, a8 as checkActionCode, a6 as confirmPasswordReset, K as connectAuthEmulator, aa as createUserWithEmailAndPassword, G as debugErrorMap, E as deleteUser, af as fetchSignInMethodsForEmail, aq as getAdditionalUserInfo, o as getAuth, an as getIdToken, ao as getIdTokenResult, as as getMultiFactorResolver, j as getRedirectResult, U as inMemoryPersistence, i as indexedDBLocalPersistence, J as initializeAuth, t as initializeRecaptchaConfig, ad as isSignInWithEmailLink, a2 as linkWithCredential, l as linkWithPhoneNumber, d as linkWithPopup, g as linkWithRedirect, at as multiFactor, y as onAuthStateChanged, w as onIdTokenChanged, aj as parseActionCodeURL, H as prodErrorMap, a3 as reauthenticateWithCredential, r as reauthenticateWithPhoneNumber, e as reauthenticateWithPopup, h as reauthenticateWithRedirect, ar as reload, D as revokeAccessToken, ag as sendEmailVerification, a5 as sendPasswordResetEmail, ac as sendSignInLinkToEmail, q as setPersistence, a0 as signInAnonymously, a1 as signInWithCredential, a4 as signInWithCustomToken, ab as signInWithEmailAndPassword, ae as signInWithEmailLink, s as signInWithPhoneNumber, c as signInWithPopup, f as signInWithRedirect, C as signOut, ap as unlink, B as updateCurrentUser, al as updateEmail, am as updatePassword, u as updatePhoneNumber, ak as updateProfile, z as useDeviceLanguage, v as validatePassword, ah as verifyBeforeUpdateEmail, a9 as verifyPasswordResetCode } from './totp-219bb96f.js';\nimport '@firebase/app';\nimport '@firebase/util';\nimport 'tslib';\nimport '@firebase/component';\nimport 'undici';\nimport '@firebase/logger';\n", "import { _getProvider, getApp, _removeServiceInstance, _registerComponent, registerVersion, SDK_VERSION as SDK_VERSION$1 } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { inspect, TextEncoder, TextDecoder } from 'util';\nimport { FirebaseError, createMockUserToken, getModularInstance, deepEqual, getDefaultEmulatorHostnameAndPort, isIndexedDBAvailable, getUA, isSafari } from '@firebase/util';\nimport { randomBytes as randomBytes$1 } from 'crypto';\nimport { Integer, Md5 } from '@firebase/webchannel-wrapper/bloom-blob';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nconst name = \"@firebase/firestore\";\nconst version$1 = \"4.7.5\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n  constructor(uid) {\n    this.uid = uid;\n  }\n  isAuthenticated() {\n    return this.uid != null;\n  }\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey() {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n  isEqual(otherUser) {\n    return otherUser.uid === this.uid;\n  }\n}\n/** A user with a null UID. */\nUser.UNAUTHENTICATED = new User(null);\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\nUser.FIRST_PARTY = new User('first-party-uid');\nUser.MOCK_USER = new User('mock-user');\nconst version = \"11.0.2\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet SDK_VERSION = version;\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Formats an object as a JSON string, suitable for logging. */\nfunction formatJSON(value) {\n  // util.inspect() results in much more readable output than JSON.stringify()\n  return inspect(value, {\n    depth: 100\n  });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/firestore');\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n  return logClient.logLevel;\n}\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nfunction setLogLevel(logLevel) {\n  logClient.setLogLevel(logLevel);\n}\nfunction logDebug(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction logError(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n/**\n * @internal\n */\nfunction logWarn(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(failure = 'Unexpected state') {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nfunction hardAssert(assertion, message) {\n  if (!assertion) {\n    fail();\n  }\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * The code of callsites invoking this function are stripped out in production\n * builds. Any side-effects of code within the debugAssert() invocation will not\n * happen in this case.\n *\n * @internal\n */\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    fail();\n  }\n}\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nfunction debugCast(obj,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok',\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled',\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown',\n  /**\n   * Client specified an invalid argument. Note that this differs from\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\n   * problematic regardless of the state of the system (e.g., a malformed file\n   * name).\n   */\n  INVALID_ARGUMENT: 'invalid-argument',\n  /**\n   * Deadline expired before operation could complete. For operations that\n   * change the state of the system, this error may be returned even if the\n   * operation has completed successfully. For example, a successful response\n   * from a server could have been delayed long enough for the deadline to\n   * expire.\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found',\n  /**\n   * Some entity that we attempted to create (e.g., file or directory) already\n   * exists.\n   */\n  ALREADY_EXISTS: 'already-exists',\n  /**\n   * The caller does not have permission to execute the specified operation.\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\n   * PERMISSION_DENIED must not be used if the caller cannot be identified\n   * (use UNAUTHENTICATED instead for those errors).\n   */\n  PERMISSION_DENIED: 'permission-denied',\n  /**\n   * The request does not have valid authentication credentials for the\n   * operation.\n   */\n  UNAUTHENTICATED: 'unauthenticated',\n  /**\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\n   * entire file system is out of space.\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  /**\n   * Operation was rejected because the system is not in a state required for\n   * the operation's execution. For example, directory to be deleted may be\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\n   *\n   * A litmus test that may help a service implementor in deciding\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\n   *  (b) Use ABORTED if the client should retry at a higher-level\n   *      (e.g., restarting a read-modify-write sequence).\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\n   *      should be returned since the client should not retry unless\n   *      they have first fixed up the directory by deleting files from it.\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\n   *      REST Get/Update/Delete on a resource and the resource on the\n   *      server does not match the condition. E.g., conflicting\n   *      read-modify-write on the same resource.\n   */\n  FAILED_PRECONDITION: 'failed-precondition',\n  /**\n   * The operation was aborted, typically due to a concurrency issue like\n   * sequencer check failures, transaction aborts, etc.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  ABORTED: 'aborted',\n  /**\n   * Operation was attempted past the valid range. E.g., seeking or reading\n   * past end of file.\n   *\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\n   * if the system state changes. For example, a 32-bit file system will\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\n   * an offset past the current file size.\n   *\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\n   * when it applies so that callers who are iterating through a space can\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\n   */\n  OUT_OF_RANGE: 'out-of-range',\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented',\n  /**\n   * Internal errors. Means some invariants expected by underlying System has\n   * been broken. If you see one of these errors, Something is very broken.\n   */\n  INTERNAL: 'internal',\n  /**\n   * The service is currently unavailable. This is a most likely a transient\n   * condition and may be corrected by retrying with a backoff.\n   *\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\n   * and UNAVAILABLE.\n   */\n  UNAVAILABLE: 'unavailable',\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss'\n};\n/** An error returned by a Firestore operation. */\nclass FirestoreError extends FirebaseError {\n  /** @hideconstructor */\n  constructor(\n  /**\n   * The backend error code associated with this error.\n   */\n  code,\n  /**\n   * A custom error description.\n   */\n  message) {\n    super(code, message);\n    this.code = code;\n    this.message = message;\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Deferred {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass OAuthToken {\n  constructor(value, user) {\n    this.user = user;\n    this.type = 'OAuth';\n    this.headers = new Map();\n    this.headers.set('Authorization', `Bearer ${value}`);\n  }\n}\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\nclass EmptyAuthCredentialsProvider {\n  getToken() {\n    return Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(User.UNAUTHENTICATED));\n  }\n  shutdown() {}\n}\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\nclass EmulatorAuthCredentialsProvider {\n  constructor(token) {\n    this.token = token;\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(this.token.user));\n  }\n  shutdown() {\n    this.changeListener = null;\n  }\n}\nclass FirebaseAuthCredentialsProvider {\n  constructor(authProvider) {\n    this.authProvider = authProvider;\n    /** Tracks the current User. */\n    this.currentUser = User.UNAUTHENTICATED;\n    /**\n     * Counter used to detect if the token changed while a getToken request was\n     * outstanding.\n     */\n    this.tokenCounter = 0;\n    this.forceRefresh = false;\n    this.auth = null;\n  }\n  start(asyncQueue, changeListener) {\n    hardAssert(this.tokenListener === undefined);\n    let lastTokenId = this.tokenCounter;\n    // A change listener that prevents double-firing for the same token change.\n    const guardedChangeListener = user => {\n      if (this.tokenCounter !== lastTokenId) {\n        lastTokenId = this.tokenCounter;\n        return changeListener(user);\n      } else {\n        return Promise.resolve();\n      }\n    };\n    // A promise that can be waited on to block on the next token change.\n    // This promise is re-created after each change.\n    let nextToken = new Deferred();\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      nextToken.resolve();\n      nextToken = new Deferred();\n      asyncQueue.enqueueRetryable(() => guardedChangeListener(this.currentUser));\n    };\n    const awaitNextToken = () => {\n      const currentTokenAttempt = nextToken;\n      asyncQueue.enqueueRetryable(async () => {\n        await currentTokenAttempt.promise;\n        await guardedChangeListener(this.currentUser);\n      });\n    };\n    const registerAuth = auth => {\n      logDebug('FirebaseAuthCredentialsProvider', 'Auth detected');\n      this.auth = auth;\n      if (this.tokenListener) {\n        this.auth.addAuthTokenListener(this.tokenListener);\n        awaitNextToken();\n      }\n    };\n    this.authProvider.onInit(auth => registerAuth(auth));\n    // Our users can initialize Auth right after Firestore, so we give it\n    // a chance to register itself with the component framework before we\n    // determine whether to start up in unauthenticated mode.\n    setTimeout(() => {\n      if (!this.auth) {\n        const auth = this.authProvider.getImmediate({\n          optional: true\n        });\n        if (auth) {\n          registerAuth(auth);\n        } else {\n          // If auth is still not available, proceed with `null` user\n          logDebug('FirebaseAuthCredentialsProvider', 'Auth not yet detected');\n          nextToken.resolve();\n          nextToken = new Deferred();\n        }\n      }\n    }, 0);\n    awaitNextToken();\n  }\n  getToken() {\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug('FirebaseAuthCredentialsProvider', 'getToken aborted due to token change.');\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(typeof tokenData.accessToken === 'string');\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    if (this.auth && this.tokenListener) {\n      this.auth.removeAuthTokenListener(this.tokenListener);\n    }\n    this.tokenListener = undefined;\n  }\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  getUser() {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(currentUid === null || typeof currentUid === 'string');\n    return new User(currentUid);\n  }\n}\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nclass FirstPartyToken {\n  constructor(sessionIndex, iamToken, authTokenFactory) {\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n    this.authTokenFactory = authTokenFactory;\n    this.type = 'FirstParty';\n    this.user = User.FIRST_PARTY;\n    this._headers = new Map();\n  }\n  /**\n   * Gets an authorization token, using a provided factory function, or return\n   * null.\n   */\n  getAuthToken() {\n    if (this.authTokenFactory) {\n      return this.authTokenFactory();\n    } else {\n      return null;\n    }\n  }\n  get headers() {\n    this._headers.set('X-Goog-AuthUser', this.sessionIndex);\n    // Use array notation to prevent minification\n    const authHeaderTokenValue = this.getAuthToken();\n    if (authHeaderTokenValue) {\n      this._headers.set('Authorization', authHeaderTokenValue);\n    }\n    if (this.iamToken) {\n      this._headers.set('X-Goog-Iam-Authorization-Token', this.iamToken);\n    }\n    return this._headers;\n  }\n}\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nclass FirstPartyAuthCredentialsProvider {\n  constructor(sessionIndex, iamToken, authTokenFactory) {\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n    this.authTokenFactory = authTokenFactory;\n  }\n  getToken() {\n    return Promise.resolve(new FirstPartyToken(this.sessionIndex, this.iamToken, this.authTokenFactory));\n  }\n  start(asyncQueue, changeListener) {\n    // Fire with initial uid.\n    asyncQueue.enqueueRetryable(() => changeListener(User.FIRST_PARTY));\n  }\n  shutdown() {}\n  invalidateToken() {}\n}\nclass AppCheckToken {\n  constructor(value) {\n    this.value = value;\n    this.type = 'AppCheck';\n    this.headers = new Map();\n    if (value && value.length > 0) {\n      this.headers.set('x-firebase-appcheck', this.value);\n    }\n  }\n}\nclass FirebaseAppCheckTokenProvider {\n  constructor(appCheckProvider) {\n    this.appCheckProvider = appCheckProvider;\n    this.forceRefresh = false;\n    this.appCheck = null;\n    this.latestAppCheckToken = null;\n  }\n  start(asyncQueue, changeListener) {\n    hardAssert(this.tokenListener === undefined);\n    const onTokenChanged = tokenResult => {\n      if (tokenResult.error != null) {\n        logDebug('FirebaseAppCheckTokenProvider', `Error getting App Check token; using placeholder token instead. Error: ${tokenResult.error.message}`);\n      }\n      const tokenUpdated = tokenResult.token !== this.latestAppCheckToken;\n      this.latestAppCheckToken = tokenResult.token;\n      logDebug('FirebaseAppCheckTokenProvider', `Received ${tokenUpdated ? 'new' : 'existing'} token.`);\n      return tokenUpdated ? changeListener(tokenResult.token) : Promise.resolve();\n    };\n    this.tokenListener = tokenResult => {\n      asyncQueue.enqueueRetryable(() => onTokenChanged(tokenResult));\n    };\n    const registerAppCheck = appCheck => {\n      logDebug('FirebaseAppCheckTokenProvider', 'AppCheck detected');\n      this.appCheck = appCheck;\n      if (this.tokenListener) {\n        this.appCheck.addTokenListener(this.tokenListener);\n      }\n    };\n    this.appCheckProvider.onInit(appCheck => registerAppCheck(appCheck));\n    // Our users can initialize AppCheck after Firestore, so we give it\n    // a chance to register itself with the component framework.\n    setTimeout(() => {\n      if (!this.appCheck) {\n        const appCheck = this.appCheckProvider.getImmediate({\n          optional: true\n        });\n        if (appCheck) {\n          registerAppCheck(appCheck);\n        } else {\n          // If AppCheck is still not available, proceed without it.\n          logDebug('FirebaseAppCheckTokenProvider', 'AppCheck not yet detected');\n        }\n      }\n    }, 0);\n  }\n  getToken() {\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n    if (!this.appCheck) {\n      return Promise.resolve(null);\n    }\n    return this.appCheck.getToken(forceRefresh).then(tokenResult => {\n      if (tokenResult) {\n        hardAssert(typeof tokenResult.token === 'string');\n        this.latestAppCheckToken = tokenResult.token;\n        return new AppCheckToken(tokenResult.token);\n      } else {\n        return null;\n      }\n    });\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    if (this.appCheck && this.tokenListener) {\n      this.appCheck.removeTokenListener(this.tokenListener);\n    }\n    this.tokenListener = undefined;\n  }\n}\n/**\n * An AppCheck token provider that always yields an empty token.\n * @internal\n */\nclass EmptyAppCheckTokenProvider {\n  getToken() {\n    return Promise.resolve(new AppCheckToken(''));\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {}\n  shutdown() {}\n}\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\nfunction makeAuthCredentialsProvider(credentials) {\n  if (!credentials) {\n    return new EmptyAuthCredentialsProvider();\n  }\n  switch (credentials['type']) {\n    case 'firstParty':\n      return new FirstPartyAuthCredentialsProvider(credentials['sessionIndex'] || '0', credentials['iamToken'] || null, credentials['authTokenFactory'] || null);\n    case 'provider':\n      return credentials['client'];\n    default:\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeAuthCredentialsProvider failed due to invalid credential type');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction randomBytes(nBytes) {\n  return randomBytes$1(nBytes);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */\nclass AutoId {\n  static newId() {\n    // Alphanumeric characters\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    return autoId;\n  }\n}\nfunction primitiveComparator(left, right) {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n/** Helper to compare arrays using isEqual(). */\nfunction arrayEquals(left, right, comparator) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\n * Returns the immediate lexicographically-following string. This is useful to\n * construct an inclusive range for indexeddb iterators.\n */\nfunction immediateSuccessor(s) {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n// Number of nanoseconds in a millisecond.\nconst MS_TO_NANOS = 1e6;\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date - The date to initialize the `Timestamp` from.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds - Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n    return new Timestamp(seconds, nanos);\n  }\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  seconds,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  nanoseconds) {\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n    if (nanoseconds < 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    }\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n   * causes a loss of precision since `Date` objects only support millisecond\n   * precision.\n   *\n   * @returns JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @returns The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\n  }\n  _compareTo(other) {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other - The `Timestamp` to compare against.\n   * @returns true if this `Timestamp` is equal to the provided one.\n   */\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n  /** Returns a textual representation of this `Timestamp`. */\n  toString() {\n    return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';\n  }\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\n   * Converts this object to a primitive string, which allows `Timestamp` objects\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexicographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexicographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nclass SnapshotVersion {\n  static fromTimestamp(value) {\n    return new SnapshotVersion(value);\n  }\n  static min() {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n  static max() {\n    return new SnapshotVersion(new Timestamp(253402300799, 1e9 - 1));\n  }\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n  }\n  compareTo(other) {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n  isEqual(other) {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds() {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n  toString() {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n  toTimestamp() {\n    return this.timestamp;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DOCUMENT_KEY_NAME = '__name__';\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n  constructor(segments, offset, length) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail();\n    }\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail();\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n  get length() {\n    return this.len;\n  }\n  isEqual(other) {\n    return BasePath.comparator(this, other) === 0;\n  }\n  child(nameOrPath) {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n  /** The index of one past the last segment of the path. */\n  limit() {\n    return this.offset + this.length;\n  }\n  popFirst(size) {\n    size = size === undefined ? 1 : size;\n    return this.construct(this.segments, this.offset + size, this.length - size);\n  }\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n  get(index) {\n    return this.segments[this.offset + index];\n  }\n  isEmpty() {\n    return this.length === 0;\n  }\n  isPrefixOf(other) {\n    if (other.length < this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isImmediateParentOf(potentialChild) {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEach(fn) {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n  static comparator(p1, p2) {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\nclass ResourcePath extends BasePath {\n  construct(segments, offset, length) {\n    return new ResourcePath(segments, offset, length);\n  }\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join('/');\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns a string representation of this path\n   * where each path segment has been encoded with\n   * `encodeURIComponent`.\n   */\n  toUriEncodedString() {\n    return this.toArray().map(encodeURIComponent).join('/');\n  }\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...pathComponents) {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const segments = [];\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid segment (${path}). Paths must not contain // in them.`);\n      }\n      // Strip leading and trailing slashed.\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n    return new ResourcePath(segments);\n  }\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n}\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\nclass FieldPath$1 extends BasePath {\n  construct(segments, offset, length) {\n    return new FieldPath$1(segments, offset, length);\n  }\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  static isValidIdentifier(segment) {\n    return identifierRegExp.test(segment);\n  }\n  canonicalString() {\n    return this.toArray().map(str => {\n      str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n      if (!FieldPath$1.isValidIdentifier(str)) {\n        str = '`' + str + '`';\n      }\n      return str;\n    }).join('.');\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField() {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField() {\n    return new FieldPath$1([DOCUMENT_KEY_NAME]);\n  }\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(path) {\n    const segments = [];\n    let current = '';\n    let i = 0;\n    const addCurrentSegment = () => {\n      if (current.length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field path (${path}). Paths must not be empty, begin ` + `with '.', end with '.', or contain '..'`);\n      }\n      segments.push(current);\n      current = '';\n    };\n    let inBackticks = false;\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n    if (inBackticks) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n    }\n    return new FieldPath$1(segments);\n  }\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass DocumentKey {\n  constructor(path) {\n    this.path = path;\n  }\n  static fromPath(path) {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n  static fromName(name) {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n  static empty() {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;\n  }\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  /** Returns the fully qualified path to the parent collection. */\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n  isEqual(other) {\n    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;\n  }\n  toString() {\n    return this.path.toString();\n  }\n  static comparator(k1, k2) {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n  static isDocumentKey(path) {\n    return path.length % 2 === 0;\n  }\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n  static fromSegments(segments) {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The initial mutation batch id for each index. Gets updated during index\n * backfill.\n */\nconst INITIAL_LARGEST_BATCH_ID = -1;\n/**\n * The initial sequence number for each index. Gets updated during index\n * backfill.\n */\nconst INITIAL_SEQUENCE_NUMBER = 0;\n/**\n * An index definition for field indexes in Firestore.\n *\n * Every index is associated with a collection. The definition contains a list\n * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or\n * `CONTAINS` for ArrayContains/ArrayContainsAny queries).\n *\n * Unlike the backend, the SDK does not differentiate between collection or\n * collection group-scoped indices. Every index can be used for both single\n * collection and collection group queries.\n */\nclass FieldIndex {\n  constructor(\n  /**\n   * The index ID. Returns -1 if the index ID is not available (e.g. the index\n   * has not yet been persisted).\n   */\n  indexId, /** The collection ID this index applies to. */\n  collectionGroup, /** The field segments for this index. */\n  fields, /** Shows how up-to-date the index is for the current user. */\n  indexState) {\n    this.indexId = indexId;\n    this.collectionGroup = collectionGroup;\n    this.fields = fields;\n    this.indexState = indexState;\n  }\n}\n/** An ID for an index that has not yet been added to persistence.  */\nFieldIndex.UNKNOWN_ID = -1;\n/** Returns the ArrayContains/ArrayContainsAny segment for this index. */\nfunction fieldIndexGetArraySegment(fieldIndex) {\n  return fieldIndex.fields.find(s => s.kind === 2 /* IndexKind.CONTAINS */);\n}\n/** Returns all directional (ascending/descending) segments for this index. */\nfunction fieldIndexGetDirectionalSegments(fieldIndex) {\n  return fieldIndex.fields.filter(s => s.kind !== 2 /* IndexKind.CONTAINS */);\n}\n/**\n * Returns the order of the document key component for the given index.\n *\n * PORTING NOTE: This is only used in the Web IndexedDb implementation.\n */\nfunction fieldIndexGetKeyOrder(fieldIndex) {\n  const directionalSegments = fieldIndexGetDirectionalSegments(fieldIndex);\n  return directionalSegments.length === 0 ? 0 /* IndexKind.ASCENDING */ : directionalSegments[directionalSegments.length - 1].kind;\n}\n/**\n * Compares indexes by collection group and segments. Ignores update time and\n * index ID.\n */\nfunction fieldIndexSemanticComparator(left, right) {\n  let cmp = primitiveComparator(left.collectionGroup, right.collectionGroup);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  for (let i = 0; i < Math.min(left.fields.length, right.fields.length); ++i) {\n    cmp = indexSegmentComparator(left.fields[i], right.fields[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  return primitiveComparator(left.fields.length, right.fields.length);\n}\n/** Returns a debug representation of the field index */\nfunction fieldIndexToString(fieldIndex) {\n  return `id=${fieldIndex.indexId}|cg=${fieldIndex.collectionGroup}|f=${fieldIndex.fields.map(f => `${f.fieldPath}:${f.kind}`).join(',')}`;\n}\n/** An index component consisting of field path and index type.  */\nclass IndexSegment {\n  constructor(/** The field path of the component. */\n  fieldPath, /** The fields sorting order. */\n  kind) {\n    this.fieldPath = fieldPath;\n    this.kind = kind;\n  }\n}\nfunction indexSegmentComparator(left, right) {\n  const cmp = FieldPath$1.comparator(left.fieldPath, right.fieldPath);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return primitiveComparator(left.kind, right.kind);\n}\n/**\n * Stores the \"high water mark\" that indicates how updated the Index is for the\n * current user.\n */\nclass IndexState {\n  constructor(\n  /**\n   * Indicates when the index was last updated (relative to other indexes).\n   */\n  sequenceNumber, /** The the latest indexed read time, document and batch id. */\n  offset) {\n    this.sequenceNumber = sequenceNumber;\n    this.offset = offset;\n  }\n  /** The state of an index that has not yet been backfilled. */\n  static empty() {\n    return new IndexState(INITIAL_SEQUENCE_NUMBER, IndexOffset.min());\n  }\n}\n/**\n * Creates an offset that matches all documents with a read time higher than\n * `readTime`.\n */\nfunction newIndexOffsetSuccessorFromReadTime(readTime, largestBatchId) {\n  // We want to create an offset that matches all documents with a read time\n  // greater than the provided read time. To do so, we technically need to\n  // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use\n  // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use\n  // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches\n  // all valid document IDs.\n  const successorSeconds = readTime.toTimestamp().seconds;\n  const successorNanos = readTime.toTimestamp().nanoseconds + 1;\n  const successor = SnapshotVersion.fromTimestamp(successorNanos === 1e9 ? new Timestamp(successorSeconds + 1, 0) : new Timestamp(successorSeconds, successorNanos));\n  return new IndexOffset(successor, DocumentKey.empty(), largestBatchId);\n}\n/** Creates a new offset based on the provided document. */\nfunction newIndexOffsetFromDocument(document) {\n  return new IndexOffset(document.readTime, document.key, INITIAL_LARGEST_BATCH_ID);\n}\n/**\n * Stores the latest read time, document and batch ID that were processed for an\n * index.\n */\nclass IndexOffset {\n  constructor(\n  /**\n   * The latest read time version that has been indexed by Firestore for this\n   * field index.\n   */\n  readTime,\n  /**\n   * The key of the last document that was indexed for this query. Use\n   * `DocumentKey.empty()` if no document has been indexed.\n   */\n  documentKey,\n  /*\n   * The largest mutation batch id that's been processed by Firestore.\n   */\n  largestBatchId) {\n    this.readTime = readTime;\n    this.documentKey = documentKey;\n    this.largestBatchId = largestBatchId;\n  }\n  /** Returns an offset that sorts before all regular offsets. */\n  static min() {\n    return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\n  }\n  /** Returns an offset that sorts after all regular offsets. */\n  static max() {\n    return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\n  }\n}\nfunction indexOffsetComparator(left, right) {\n  let cmp = left.readTime.compareTo(right.readTime);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = DocumentKey.comparator(left.documentKey, right.documentKey);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return primitiveComparator(left.largestBatchId, right.largestBatchId);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' + 'It might be necessary to refresh the browser tab.';\n/**\n * A base class representing a persistence transaction, encapsulating both the\n * transaction's sequence numbers as well as a list of onCommitted listeners.\n *\n * When you call Persistence.runTransaction(), it will create a transaction and\n * pass it to your callback. You then pass it to any method that operates\n * on persistence.\n */\nclass PersistenceTransaction {\n  constructor() {\n    this.onCommittedListeners = [];\n  }\n  addOnCommittedListener(listener) {\n    this.onCommittedListeners.push(listener);\n  }\n  raiseOnCommittedEvent() {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\n * operation fails because the primary lease has been taken by another client,\n * we ignore the error (the persistence layer will immediately call\n * `applyPrimaryLease` to propagate the primary state change). All other errors\n * are re-thrown.\n *\n * @param err - An error returned by a LocalStore operation.\n * @returns A Promise that resolves after we recovered, or the original error.\n */\nasync function ignoreIfPrimaryLeaseLoss(err) {\n  if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {\n    logDebug('LocalStore', 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * PersistencePromise is essentially a re-implementation of Promise except\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\n * are executed synchronously when a PersistencePromise resolves rather than\n * asynchronously (Promise implementations use setImmediate() or similar).\n *\n * This is necessary to interoperate with IndexedDB which will automatically\n * commit transactions if control is returned to the event loop without\n * synchronously initiating another operation on the transaction.\n *\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\n * Promises.\n */\nclass PersistencePromise {\n  constructor(callback) {\n    // NOTE: next/catchCallback will always point to our own wrapper functions,\n    // not the user's raw next() or catch() callbacks.\n    this.nextCallback = null;\n    this.catchCallback = null;\n    // When the operation resolves, we'll set result or error and mark isDone.\n    this.result = undefined;\n    this.error = undefined;\n    this.isDone = false;\n    // Set to true when .then() or .catch() are called and prevents additional\n    // chaining.\n    this.callbackAttached = false;\n    callback(value => {\n      this.isDone = true;\n      this.result = value;\n      if (this.nextCallback) {\n        // value should be defined unless T is Void, but we can't express\n        // that in the type system.\n        this.nextCallback(value);\n      }\n    }, error => {\n      this.isDone = true;\n      this.error = error;\n      if (this.catchCallback) {\n        this.catchCallback(error);\n      }\n    });\n  }\n  catch(fn) {\n    return this.next(undefined, fn);\n  }\n  next(nextFn, catchFn) {\n    if (this.callbackAttached) {\n      fail();\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise((resolve, reject) => {\n        this.nextCallback = value => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = error => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n  toPromise() {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n  wrapUserFunction(fn) {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject(e);\n    }\n  }\n  wrapSuccess(nextFn, value) {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve(value);\n    }\n  }\n  wrapFailure(catchFn, error) {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject(error);\n    }\n  }\n  static resolve(result) {\n    return new PersistencePromise((resolve, reject) => {\n      resolve(result);\n    });\n  }\n  static reject(error) {\n    return new PersistencePromise((resolve, reject) => {\n      reject(error);\n    });\n  }\n  static waitFor(\n  // Accept all Promise types in waitFor().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  all) {\n    return new PersistencePromise((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(() => {\n          ++resolvedCount;\n          if (done && resolvedCount === expectedCount) {\n            resolve();\n          }\n        }, err => reject(err));\n      });\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n  /**\n   * Given an array of predicate functions that asynchronously evaluate to a\n   * boolean, implements a short-circuiting `or` between the results. Predicates\n   * will be evaluated until one of them returns `true`, then stop. The final\n   * result will be whether any of them returned `true`.\n   */\n  static or(predicates) {\n    let p = PersistencePromise.resolve(false);\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n  static forEach(collection, f) {\n    const promises = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n  /**\n   * Concurrently map all array elements through asynchronous function.\n   */\n  static mapArray(array, f) {\n    return new PersistencePromise((resolve, reject) => {\n      const expectedCount = array.length;\n      const results = new Array(expectedCount);\n      let resolvedCount = 0;\n      for (let i = 0; i < expectedCount; i++) {\n        const current = i;\n        f(array[current]).next(result => {\n          results[current] = result;\n          ++resolvedCount;\n          if (resolvedCount === expectedCount) {\n            resolve(results);\n          }\n        }, err => reject(err));\n      }\n    });\n  }\n  /**\n   * An alternative to recursive PersistencePromise calls, that avoids\n   * potential memory problems from unbounded chains of promises.\n   *\n   * The `action` will be called repeatedly while `condition` is true.\n   */\n  static doWhile(condition, action) {\n    return new PersistencePromise((resolve, reject) => {\n      const process = () => {\n        if (condition() === true) {\n          action().next(() => {\n            process();\n          }, reject);\n        } else {\n          resolve();\n        }\n      };\n      process();\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\nconst LOG_TAG$i = 'SimpleDb';\n/**\n * The maximum number of retry attempts for an IndexedDb transaction that fails\n * with a DOMException.\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n/**\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\n * specific object store.\n */\nclass SimpleDbTransaction {\n  static open(db, action, mode, objectStoreNames) {\n    try {\n      return new SimpleDbTransaction(action, db.transaction(objectStoreNames, mode));\n    } catch (e) {\n      throw new IndexedDbTransactionError(action, e);\n    }\n  }\n  constructor(action, transaction) {\n    this.action = action;\n    this.transaction = transaction;\n    this.aborted = false;\n    /**\n     * A `Promise` that resolves with the result of the IndexedDb transaction.\n     */\n    this.completionDeferred = new Deferred();\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = event => {\n      const error = checkForAndReportiOSError(event.target.error);\n      this.completionDeferred.reject(new IndexedDbTransactionError(action, error));\n    };\n  }\n  get completionPromise() {\n    return this.completionDeferred.promise;\n  }\n  abort(error) {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n    if (!this.aborted) {\n      logDebug(LOG_TAG$i, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n  maybeCommit() {\n    // If the browser supports V3 IndexedDB, we invoke commit() explicitly to\n    // speed up index DB processing if the event loop remains blocks.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeV3IndexedDb = this.transaction;\n    if (!this.aborted && typeof maybeV3IndexedDb.commit === 'function') {\n      maybeV3IndexedDb.commit();\n    }\n  }\n  /**\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\n   * operations performed on the SimpleDbStore happen within the context of this\n   * transaction and it cannot be used anymore once the transaction is\n   * completed.\n   *\n   * Note that we can't actually enforce that the KeyType and ValueType are\n   * correct, but they allow type safety through the rest of the consuming code.\n   */\n  store(storeName) {\n    const store = this.transaction.objectStore(storeName);\n    return new SimpleDbStore(store);\n  }\n}\n/**\n * Provides a wrapper around IndexedDb with a simplified interface that uses\n * Promise-like return values to chain operations. Real promises cannot be used\n * since .then() continuations are executed asynchronously (e.g. via\n * .setImmediate), which would cause IndexedDB to end the transaction.\n * See PersistencePromise for more details.\n */\nclass SimpleDb {\n  /** Deletes the specified database. */\n  static delete(name) {\n    logDebug(LOG_TAG$i, 'Removing database:', name);\n    return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    }\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n    // Android browser: Disable for users running version < 4.5.\n    const androidVersion = getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n    if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0 || isUnsupportedIOS || isUnsupportedAndroid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\n   * (see https://github.com/axemclion/IndexedDBShim).\n   */\n  static isMockPersistence() {\n    var _a;\n    return typeof process !== 'undefined' && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === 'YES';\n  }\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore(txn, store) {\n    return txn.store(store);\n  }\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua) {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex ? iOSVersionRegex[1].split('_').slice(0, 2).join('.') : '-1';\n    return Number(version);\n  }\n  /*\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\n   *\n   * Note that `version` must not be a downgrade. IndexedDB does not support\n   * downgrading the schema version. We currently do not support any way to do\n   * versioning outside of IndexedDB's versioning mechanism, as only\n   * version-upgrade transactions are allowed to do things like create\n   * objectstores.\n   */\n  constructor(name, version, schemaConverter) {\n    this.name = name;\n    this.version = version;\n    this.schemaConverter = schemaConverter;\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError('Firestore persistence suffers from a bug in iOS 12.2 ' + 'Safari that may cause your app to stop working. See ' + 'https://stackoverflow.com/q/56496296/110915 for details ' + 'and a potential workaround.');\n    }\n  }\n  /**\n   * Opens the specified database, creating or upgrading it if necessary.\n   */\n  async ensureDb(action) {\n    if (!this.db) {\n      logDebug(LOG_TAG$i, 'Opening database:', this.name);\n      this.db = await new Promise((resolve, reject) => {\n        // TODO(mikelehen): Investigate browser compatibility.\n        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n        // suggests IE9 and older WebKit browsers handle upgrade\n        // differently. They expect setVersion, as described here:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n        const request = indexedDB.open(this.name, this.version);\n        request.onsuccess = event => {\n          const db = event.target.result;\n          resolve(db);\n        };\n        request.onblocked = () => {\n          reject(new IndexedDbTransactionError(action, 'Cannot upgrade IndexedDB schema while another tab is open. ' + 'Close all tabs that access Firestore and reload this page to proceed.'));\n        };\n        request.onerror = event => {\n          const error = event.target.error;\n          if (error.name === 'VersionError') {\n            reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' + 'data is not compatible with the version of the SDK you are now using. The SDK ' + 'will operate with persistence disabled. If you need persistence, please ' + 're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' + 'data for your app to start fresh.'));\n          } else if (error.name === 'InvalidStateError') {\n            reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Unable to open an IndexedDB connection. This could be due to running in a ' + 'private browsing session on a browser whose private browsing sessions do not ' + 'support IndexedDB: ' + error));\n          } else {\n            reject(new IndexedDbTransactionError(action, error));\n          }\n        };\n        request.onupgradeneeded = event => {\n          logDebug(LOG_TAG$i, 'Database \"' + this.name + '\" requires upgrade from version:', event.oldVersion);\n          const db = event.target.result;\n          this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, this.version).next(() => {\n            logDebug(LOG_TAG$i, 'Database upgrade to version ' + this.version + ' complete');\n          });\n        };\n      });\n    }\n    if (this.versionchangelistener) {\n      this.db.onversionchange = event => this.versionchangelistener(event);\n    }\n    return this.db;\n  }\n  setVersionChangeListener(versionChangeListener) {\n    this.versionchangelistener = versionChangeListener;\n    if (this.db) {\n      this.db.onversionchange = event => {\n        return versionChangeListener(event);\n      };\n    }\n  }\n  async runTransaction(action, mode, objectStores, transactionFn) {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n    while (true) {\n      ++attemptNumber;\n      try {\n        this.db = await this.ensureDb(action);\n        const transaction = SimpleDbTransaction.open(this.db, action, readonly ? 'readonly' : 'readwrite', objectStores);\n        const transactionFnResult = transactionFn(transaction).next(result => {\n          transaction.maybeCommit();\n          return result;\n        }).catch(error => {\n          // Abort the transaction if there was an error.\n          transaction.abort(error);\n          // We cannot actually recover, and calling `abort()` will cause the transaction's\n          // completion promise to be rejected. This in turn means that we won't use\n          // `transactionFnResult` below. We return a rejection here so that we don't add the\n          // possibility of returning `void` to the type of `transactionFnResult`.\n          return PersistencePromise.reject(error);\n        }).toPromise();\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (e) {\n        const error = e;\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable = error.name !== 'FirebaseError' && attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(LOG_TAG$i, 'Transaction failed with error:', error.message, 'Retrying:', retryable);\n        this.close();\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n  close() {\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = undefined;\n  }\n}\n/** Parse User Agent to determine Android version. Returns -1 if not found. */\nfunction getAndroidVersion(ua) {\n  const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n  const version = androidVersionRegex ? androidVersionRegex[1].split('.').slice(0, 2).join('.') : '-1';\n  return Number(version);\n}\n/**\n * A controller for iterating over a key range or index. It allows an iterate\n * callback to delete the currently-referenced object, or jump to a new key\n * within the key range or index.\n */\nclass IterationController {\n  constructor(dbCursor) {\n    this.dbCursor = dbCursor;\n    this.shouldStop = false;\n    this.nextKey = null;\n  }\n  get isDone() {\n    return this.shouldStop;\n  }\n  get skipToKey() {\n    return this.nextKey;\n  }\n  set cursor(value) {\n    this.dbCursor = value;\n  }\n  /**\n   * This function can be called to stop iteration at any point.\n   */\n  done() {\n    this.shouldStop = true;\n  }\n  /**\n   * This function can be called to skip to that next key, which could be\n   * an index or a primary key.\n   */\n  skip(key) {\n    this.nextKey = key;\n  }\n  /**\n   * Delete the current cursor value from the object store.\n   *\n   * NOTE: You CANNOT do this with a keysOnly query.\n   */\n  delete() {\n    return wrapRequest(this.dbCursor.delete());\n  }\n}\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nclass IndexedDbTransactionError extends FirestoreError {\n  constructor(actionName, cause) {\n    super(Code.UNAVAILABLE, `IndexedDB transaction '${actionName}' failed: ${cause}`);\n    this.name = 'IndexedDbTransactionError';\n  }\n}\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nfunction isIndexedDbTransactionError(e) {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n/**\n * A wrapper around an IDBObjectStore providing an API that:\n *\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\n * methods for acting against the object store.\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\n * method return a PersistencePromise instead.\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\n */\nclass SimpleDbStore {\n  constructor(store) {\n    this.store = store;\n  }\n  put(keyOrValue, value) {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG$i, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue);\n    } else {\n      logDebug(LOG_TAG$i, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue);\n    }\n    return wrapRequest(request);\n  }\n  /**\n   * Adds a new value into an Object Store and returns the new key. Similar to\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\n   *\n   * @param value - The object to write.\n   * @returns The key of the value to add.\n   */\n  add(value) {\n    logDebug(LOG_TAG$i, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value);\n    return wrapRequest(request);\n  }\n  /**\n   * Gets the object with the specified key from the specified store, or null\n   * if no object exists with the specified key.\n   *\n   * @key The key of the object to get.\n   * @returns The object with the specified key or null if no object exists.\n   */\n  get(key) {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG$i, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n  delete(key) {\n    logDebug(LOG_TAG$i, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest(request);\n  }\n  /**\n   * If we ever need more of the count variants, we can add overloads. For now,\n   * all we need is to count everything in a store.\n   *\n   * Returns the number of rows in the store.\n   */\n  count() {\n    logDebug(LOG_TAG$i, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest(request);\n  }\n  loadAll(indexOrRange, range) {\n    const iterateOptions = this.options(indexOrRange, range);\n    // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly\n    // 20% faster.\n    const store = iterateOptions.index ? this.store.index(iterateOptions.index) : this.store;\n    if (typeof store.getAll === 'function') {\n      const request = store.getAll(iterateOptions.range);\n      return new PersistencePromise((resolve, reject) => {\n        request.onerror = event => {\n          reject(event.target.error);\n        };\n        request.onsuccess = event => {\n          resolve(event.target.result);\n        };\n      });\n    } else {\n      const cursor = this.cursor(iterateOptions);\n      const results = [];\n      return this.iterateCursor(cursor, (key, value) => {\n        results.push(value);\n      }).next(() => {\n        return results;\n      });\n    }\n  }\n  /**\n   * Loads the first `count` elements from the provided index range. Loads all\n   * elements if no limit is provided.\n   */\n  loadFirst(range, count) {\n    const request = this.store.getAll(range, count === null ? undefined : count);\n    return new PersistencePromise((resolve, reject) => {\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n    });\n  }\n  deleteAll(indexOrRange, range) {\n    logDebug(LOG_TAG$i, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n  iterate(optionsOrCallback, callback) {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n  /**\n   * Iterates over a store, but waits for the given callback to complete for\n   * each entry before iterating the next entry. This allows the callback to do\n   * asynchronous work to determine if this iteration should continue.\n   *\n   * The provided callback should return `true` to continue iteration, and\n   * `false` otherwise.\n   */\n  iterateSerial(callback) {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = event => {\n        const error = checkForAndReportiOSError(event.target.error);\n        reject(error);\n      };\n      cursorRequest.onsuccess = event => {\n        const cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        callback(cursor.primaryKey, cursor.value).next(shouldContinue => {\n          if (shouldContinue) {\n            cursor.continue();\n          } else {\n            resolve();\n          }\n        });\n      };\n    });\n  }\n  iterateCursor(cursorRequest, fn) {\n    const results = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = event => {\n        reject(event.target.error);\n      };\n      cursorRequest.onsuccess = event => {\n        const cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(cursor.primaryKey, cursor.value, controller);\n        if (userResult instanceof PersistencePromise) {\n          const userPromise = userResult.catch(err => {\n            controller.done();\n            return PersistencePromise.reject(err);\n          });\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => PersistencePromise.waitFor(results));\n  }\n  options(indexOrRange, range) {\n    let indexName = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        range = indexOrRange;\n      }\n    }\n    return {\n      index: indexName,\n      range\n    };\n  }\n  cursor(options) {\n    let direction = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n/**\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\n * handlers to resolve / reject the PersistencePromise as appropriate.\n */\nfunction wrapRequest(request) {\n  return new PersistencePromise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n      resolve(result);\n    };\n    request.onerror = event => {\n      const error = checkForAndReportiOSError(event.target.error);\n      reject(error);\n    };\n  });\n}\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error) {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR = 'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError('internal', `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` + `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` + `for details and a potential workaround.`);\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\nconst LOG_TAG$h = 'IndexBackfiller';\n/** How long we wait to try running index backfill after SDK initialization. */\nconst INITIAL_BACKFILL_DELAY_MS = 15 * 1000;\n/** Minimum amount of time between backfill checks, after the first one. */\nconst REGULAR_BACKFILL_DELAY_MS = 60 * 1000;\n/** The maximum number of documents to process each time backfill() is called. */\nconst MAX_DOCUMENTS_TO_PROCESS = 50;\n/** This class is responsible for the scheduling of Index Backfiller. */\nclass IndexBackfillerScheduler {\n  constructor(asyncQueue, backfiller) {\n    this.asyncQueue = asyncQueue;\n    this.backfiller = backfiller;\n    this.task = null;\n  }\n  start() {\n    this.schedule(INITIAL_BACKFILL_DELAY_MS);\n  }\n  stop() {\n    if (this.task) {\n      this.task.cancel();\n      this.task = null;\n    }\n  }\n  get started() {\n    return this.task !== null;\n  }\n  schedule(delay) {\n    logDebug(LOG_TAG$h, `Scheduled in ${delay}ms`);\n    this.task = this.asyncQueue.enqueueAfterDelay(\"index_backfill\" /* TimerId.IndexBackfill */, delay, async () => {\n      this.task = null;\n      try {\n        const documentsProcessed = await this.backfiller.backfill();\n        logDebug(LOG_TAG$h, `Documents written: ${documentsProcessed}`);\n      } catch (e) {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG$h, 'Ignoring IndexedDB error during index backfill: ', e);\n        } else {\n          await ignoreIfPrimaryLeaseLoss(e);\n        }\n      }\n      await this.schedule(REGULAR_BACKFILL_DELAY_MS);\n    });\n  }\n}\n/** Implements the steps for backfilling indexes. */\nclass IndexBackfiller {\n  constructor(\n  /**\n   * LocalStore provides access to IndexManager and LocalDocumentView.\n   * These properties will update when the user changes. Consequently,\n   * making a local copy of IndexManager and LocalDocumentView will require\n   * updates over time. The simpler solution is to rely on LocalStore to have\n   * an up-to-date references to IndexManager and LocalDocumentStore.\n   */\n  localStore, persistence) {\n    this.localStore = localStore;\n    this.persistence = persistence;\n  }\n  async backfill(maxDocumentsToProcess = MAX_DOCUMENTS_TO_PROCESS) {\n    return this.persistence.runTransaction('Backfill Indexes', 'readwrite-primary', txn => this.writeIndexEntries(txn, maxDocumentsToProcess));\n  }\n  /** Writes index entries until the cap is reached. Returns the number of documents processed. */\n  writeIndexEntries(transaction, maxDocumentsToProcess) {\n    const processedCollectionGroups = new Set();\n    let documentsRemaining = maxDocumentsToProcess;\n    let continueLoop = true;\n    return PersistencePromise.doWhile(() => continueLoop === true && documentsRemaining > 0, () => {\n      return this.localStore.indexManager.getNextCollectionGroupToUpdate(transaction).next(collectionGroup => {\n        if (collectionGroup === null || processedCollectionGroups.has(collectionGroup)) {\n          continueLoop = false;\n        } else {\n          logDebug(LOG_TAG$h, `Processing collection: ${collectionGroup}`);\n          return this.writeEntriesForCollectionGroup(transaction, collectionGroup, documentsRemaining).next(documentsProcessed => {\n            documentsRemaining -= documentsProcessed;\n            processedCollectionGroups.add(collectionGroup);\n          });\n        }\n      });\n    }).next(() => maxDocumentsToProcess - documentsRemaining);\n  }\n  /**\n   * Writes entries for the provided collection group. Returns the number of documents processed.\n   */\n  writeEntriesForCollectionGroup(transaction, collectionGroup, documentsRemainingUnderCap) {\n    // Use the earliest offset of all field indexes to query the local cache.\n    return this.localStore.indexManager.getMinOffsetFromCollectionGroup(transaction, collectionGroup).next(existingOffset => this.localStore.localDocuments.getNextDocuments(transaction, collectionGroup, existingOffset, documentsRemainingUnderCap).next(nextBatch => {\n      const docs = nextBatch.changes;\n      return this.localStore.indexManager.updateIndexEntries(transaction, docs).next(() => this.getNewOffset(existingOffset, nextBatch)).next(newOffset => {\n        logDebug(LOG_TAG$h, `Updating offset: ${newOffset}`);\n        return this.localStore.indexManager.updateCollectionGroup(transaction, collectionGroup, newOffset);\n      }).next(() => docs.size);\n    }));\n  }\n  /** Returns the next offset based on the provided documents. */\n  getNewOffset(existingOffset, lookupResult) {\n    let maxOffset = existingOffset;\n    lookupResult.changes.forEach((key, document) => {\n      const newOffset = newIndexOffsetFromDocument(document);\n      if (indexOffsetComparator(newOffset, maxOffset) > 0) {\n        maxOffset = newOffset;\n      }\n    });\n    return new IndexOffset(maxOffset.readTime, maxOffset.documentKey, Math.max(lookupResult.batchId, existingOffset.largestBatchId));\n  }\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\n * exceed. All subsequent calls to next will return increasing values. If provided with a\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\n * well as write out sequence numbers that it produces via `next()`.\n */\nclass ListenSequence {\n  constructor(previousValue, sequenceNumberSyncer) {\n    this.previousValue = previousValue;\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber => this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber => sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n  setPreviousValue(externalPreviousValue) {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n  next() {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\nListenSequence.INVALID = -1;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst escapeChar = '\\u0001';\nconst encodedSeparatorChar = '\\u0001';\nconst encodedNul = '\\u0010';\nconst encodedEscape = '\\u0011';\n/**\n * Encodes a resource path into a IndexedDb-compatible string form.\n */\nfunction encodeResourcePath(path) {\n  let result = '';\n  for (let i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n    result = encodeSegment(path.get(i), result);\n  }\n  return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n  let result = resultBuf;\n  const length = segment.length;\n  for (let i = 0; i < length; i++) {\n    const c = segment.charAt(i);\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n      default:\n        result += c;\n    }\n  }\n  return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n  return result + escapeChar + encodedSeparatorChar;\n}\n/**\n * Decodes the given IndexedDb-compatible string form of a resource path into\n * a ResourcePath instance. Note that this method is not suitable for use with\n * decoding resource names from the server; those are One Platform format\n * strings.\n */\nfunction decodeResourcePath(path) {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  const length = path.length;\n  hardAssert(length >= 2);\n  if (length === 2) {\n    hardAssert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar);\n    return ResourcePath.emptyPath();\n  }\n  // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n  const lastReasonableEscapeIndex = length - 2;\n  const segments = [];\n  let segmentBuilder = '';\n  for (let start = 0; start < length;) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    const end = path.indexOf(escapeChar, start);\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail();\n    }\n    const next = path.charAt(end + 1);\n    switch (next) {\n      case encodedSeparatorChar:\n        const currentPiece = path.substring(start, end);\n        let segment;\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n        segments.push(segment);\n        break;\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n      default:\n        fail();\n    }\n    start = end + 2;\n  }\n  return new ResourcePath(segments);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DbRemoteDocumentStore$1 = 'remoteDocuments';\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Name of the IndexedDb object store.\n *\n * Note that the name 'owner' is chosen to ensure backwards compatibility with\n * older clients that only supported single locked access to the persistence\n * layer.\n */\nconst DbPrimaryClientStore = 'owner';\n/**\n * The key string used for the single object that exists in the\n * DbPrimaryClient store.\n */\nconst DbPrimaryClientKey = 'owner';\n/** Name of the IndexedDb object store.  */\nconst DbMutationQueueStore = 'mutationQueues';\n/** Keys are automatically assigned via the userId property. */\nconst DbMutationQueueKeyPath = 'userId';\n/** Name of the IndexedDb object store.  */\nconst DbMutationBatchStore = 'mutations';\n/** Keys are automatically assigned via the userId, batchId properties. */\nconst DbMutationBatchKeyPath = 'batchId';\n/** The index name for lookup of mutations by user. */\nconst DbMutationBatchUserMutationsIndex = 'userMutationsIndex';\n/** The user mutations index is keyed by [userId, batchId] pairs. */\nconst DbMutationBatchUserMutationsKeyPath = ['userId', 'batchId'];\n/**\n * Creates a [userId] key for use in the DbDocumentMutations index to iterate\n * over all of a user's document mutations.\n */\nfunction newDbDocumentMutationPrefixForUser(userId) {\n  return [userId];\n}\n/**\n * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\n * index to iterate over all at document mutations for a given path or lower.\n */\nfunction newDbDocumentMutationPrefixForPath(userId, path) {\n  return [userId, encodeResourcePath(path)];\n}\n/**\n * Creates a full index key of [userId, encodedPath, batchId] for inserting\n * and deleting into the DbDocumentMutations index.\n */\nfunction newDbDocumentMutationKey(userId, path, batchId) {\n  return [userId, encodeResourcePath(path), batchId];\n}\n/**\n * Because we store all the useful information for this store in the key,\n * there is no useful information to store as the value. The raw (unencoded)\n * path cannot be stored because IndexedDb doesn't store prototype\n * information.\n */\nconst DbDocumentMutationPlaceholder = {};\nconst DbDocumentMutationStore = 'documentMutations';\nconst DbRemoteDocumentStore = 'remoteDocumentsV14';\n/**\n * The primary key of the remote documents store, which allows for efficient\n * access by collection path and read time.\n */\nconst DbRemoteDocumentKeyPath = ['prefixPath', 'collectionGroup', 'readTime', 'documentId'];\n/** An index that provides access to documents by key. */\nconst DbRemoteDocumentDocumentKeyIndex = 'documentKeyIndex';\nconst DbRemoteDocumentDocumentKeyIndexPath = ['prefixPath', 'collectionGroup', 'documentId'];\n/**\n * An index that provides access to documents by collection group and read\n * time.\n *\n * This index is used by the index backfiller.\n */\nconst DbRemoteDocumentCollectionGroupIndex = 'collectionGroupIndex';\nconst DbRemoteDocumentCollectionGroupIndexPath = ['collectionGroup', 'readTime', 'prefixPath', 'documentId'];\nconst DbRemoteDocumentGlobalStore = 'remoteDocumentGlobal';\nconst DbRemoteDocumentGlobalKey = 'remoteDocumentGlobalKey';\nconst DbTargetStore = 'targets';\n/** Keys are automatically assigned via the targetId property. */\nconst DbTargetKeyPath = 'targetId';\n/** The name of the queryTargets index. */\nconst DbTargetQueryTargetsIndexName = 'queryTargetsIndex';\n/**\n * The index of all canonicalIds to the targets that they match. This is not\n * a unique mapping because canonicalId does not promise a unique name for all\n * possible queries, so we append the targetId to make the mapping unique.\n */\nconst DbTargetQueryTargetsKeyPath = ['canonicalId', 'targetId'];\n/** Name of the IndexedDb object store.  */\nconst DbTargetDocumentStore = 'targetDocuments';\n/** Keys are automatically assigned via the targetId, path properties. */\nconst DbTargetDocumentKeyPath = ['targetId', 'path'];\n/** The index name for the reverse index. */\nconst DbTargetDocumentDocumentTargetsIndex = 'documentTargetsIndex';\n/** We also need to create the reverse index for these properties. */\nconst DbTargetDocumentDocumentTargetsKeyPath = ['path', 'targetId'];\n/**\n * The key string used for the single object that exists in the\n * DbTargetGlobal store.\n */\nconst DbTargetGlobalKey = 'targetGlobalKey';\nconst DbTargetGlobalStore = 'targetGlobal';\n/** Name of the IndexedDb object store. */\nconst DbCollectionParentStore = 'collectionParents';\n/** Keys are automatically assigned via the collectionId, parent properties. */\nconst DbCollectionParentKeyPath = ['collectionId', 'parent'];\n/** Name of the IndexedDb object store. */\nconst DbClientMetadataStore = 'clientMetadata';\n/** Keys are automatically assigned via the clientId properties. */\nconst DbClientMetadataKeyPath = 'clientId';\n/** Name of the IndexedDb object store. */\nconst DbBundleStore = 'bundles';\nconst DbBundleKeyPath = 'bundleId';\n/** Name of the IndexedDb object store. */\nconst DbNamedQueryStore = 'namedQueries';\nconst DbNamedQueryKeyPath = 'name';\n/** Name of the IndexedDb object store. */\nconst DbIndexConfigurationStore = 'indexConfiguration';\nconst DbIndexConfigurationKeyPath = 'indexId';\n/**\n * An index that provides access to the index configurations by collection\n * group.\n *\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\n * not possible here as the Web client supports concurrent access to\n * persistence via multi-tab.\n */\nconst DbIndexConfigurationCollectionGroupIndex = 'collectionGroupIndex';\nconst DbIndexConfigurationCollectionGroupIndexPath = 'collectionGroup';\n/** Name of the IndexedDb object store. */\nconst DbIndexStateStore = 'indexState';\nconst DbIndexStateKeyPath = ['indexId', 'uid'];\n/**\n * An index that provides access to documents in a collection sorted by last\n * update time. Used by the backfiller.\n *\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\n * not possible here as the Web client supports concurrent access to\n * persistence via multi-tab.\n */\nconst DbIndexStateSequenceNumberIndex = 'sequenceNumberIndex';\nconst DbIndexStateSequenceNumberIndexPath = ['uid', 'sequenceNumber'];\n/** Name of the IndexedDb object store. */\nconst DbIndexEntryStore = 'indexEntries';\nconst DbIndexEntryKeyPath = ['indexId', 'uid', 'arrayValue', 'directionalValue', 'orderedDocumentKey', 'documentKey'];\nconst DbIndexEntryDocumentKeyIndex = 'documentKeyIndex';\nconst DbIndexEntryDocumentKeyIndexPath = ['indexId', 'uid', 'orderedDocumentKey'];\n/** Name of the IndexedDb object store. */\nconst DbDocumentOverlayStore = 'documentOverlays';\nconst DbDocumentOverlayKeyPath = ['userId', 'collectionPath', 'documentId'];\nconst DbDocumentOverlayCollectionPathOverlayIndex = 'collectionPathOverlayIndex';\nconst DbDocumentOverlayCollectionPathOverlayIndexPath = ['userId', 'collectionPath', 'largestBatchId'];\nconst DbDocumentOverlayCollectionGroupOverlayIndex = 'collectionGroupOverlayIndex';\nconst DbDocumentOverlayCollectionGroupOverlayIndexPath = ['userId', 'collectionGroup', 'largestBatchId'];\n/** Name of the IndexedDb object store. */\nconst DbGlobalsStore = 'globals';\nconst DbGlobalsKeyPath = 'name';\n// Visible for testing\nconst V1_STORES = [DbMutationQueueStore, DbMutationBatchStore, DbDocumentMutationStore, DbRemoteDocumentStore$1, DbTargetStore, DbPrimaryClientStore, DbTargetGlobalStore, DbTargetDocumentStore];\n// Visible for testing\nconst V3_STORES = V1_STORES;\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\nconst V4_STORES = [...V3_STORES, DbClientMetadataStore];\nconst V6_STORES = [...V4_STORES, DbRemoteDocumentGlobalStore];\nconst V8_STORES = [...V6_STORES, DbCollectionParentStore];\nconst V11_STORES = [...V8_STORES, DbBundleStore, DbNamedQueryStore];\nconst V12_STORES = [...V11_STORES, DbDocumentOverlayStore];\nconst V13_STORES = [DbMutationQueueStore, DbMutationBatchStore, DbDocumentMutationStore, DbRemoteDocumentStore, DbTargetStore, DbPrimaryClientStore, DbTargetGlobalStore, DbTargetDocumentStore, DbClientMetadataStore, DbRemoteDocumentGlobalStore, DbCollectionParentStore, DbBundleStore, DbNamedQueryStore, DbDocumentOverlayStore];\nconst V14_STORES = V13_STORES;\nconst V15_STORES = [...V14_STORES, DbIndexConfigurationStore, DbIndexStateStore, DbIndexEntryStore];\nconst V16_STORES = V15_STORES;\nconst V17_STORES = [...V15_STORES, DbGlobalsStore];\n/** Returns the object stores for the provided schema. */\nfunction getObjectStores(schemaVersion) {\n  if (schemaVersion === 17) {\n    return V17_STORES;\n  } else if (schemaVersion === 16) {\n    return V16_STORES;\n  } else if (schemaVersion === 15) {\n    return V15_STORES;\n  } else if (schemaVersion === 14) {\n    return V14_STORES;\n  } else if (schemaVersion === 13) {\n    return V13_STORES;\n  } else if (schemaVersion === 12) {\n    return V12_STORES;\n  } else if (schemaVersion === 11) {\n    return V11_STORES;\n  } else {\n    fail();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IndexedDbTransaction extends PersistenceTransaction {\n  constructor(simpleDbTransaction, currentSequenceNumber) {\n    super();\n    this.simpleDbTransaction = simpleDbTransaction;\n    this.currentSequenceNumber = currentSequenceNumber;\n  }\n}\nfunction getStore(txn, store) {\n  const indexedDbTransaction = debugCast(txn);\n  return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction objectSize(obj) {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction forEach(obj, fn) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\nfunction mapToArray(obj, fn) {\n  const result = [];\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result.push(fn(obj[key], key, obj));\n    }\n  }\n  return result;\n}\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n  constructor(comparator, root) {\n    this.comparator = comparator;\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key, value) {\n    return new SortedMap(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns a copy of the map, with the specified key removed.\n  remove(key) {\n    return new SortedMap(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns the value of the node with the given key, or null.\n  get(key) {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key) {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n  isEmpty() {\n    return this.root.isEmpty();\n  }\n  // Returns the total number of nodes in the map.\n  get size() {\n    return this.root.size;\n  }\n  // Returns the minimum key in the map.\n  minKey() {\n    return this.root.minKey();\n  }\n  // Returns the maximum key in the map.\n  maxKey() {\n    return this.root.maxKey();\n  }\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(action) {\n    return this.root.inorderTraversal(action);\n  }\n  forEach(fn) {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n  toString() {\n    const descriptions = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(action) {\n    return this.root.reverseTraversal(action);\n  }\n  // Returns an iterator over the SortedMap.\n  getIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, false);\n  }\n  getIteratorFrom(key) {\n    return new SortedMapIterator(this.root, key, this.comparator, false);\n  }\n  getReverseIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, true);\n  }\n  getReverseIteratorFrom(key) {\n    return new SortedMapIterator(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n  constructor(node, startKey, comparator, isReverse) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (startKey && isReverse) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    let node = this.nodeStack.pop();\n    const result = {\n      key: node.key,\n      value: node.value\n    };\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n  peek() {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: node.key,\n      value: node.value\n    };\n  }\n} // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  isEmpty() {\n    return false;\n  }\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  // Returns the minimum node in the tree.\n  min() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min();\n    }\n  }\n  // Returns the maximum key in the tree.\n  minKey() {\n    return this.min().key;\n  }\n  // Returns the maximum key in the tree.\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  // Returns new tree, with the key/value added.\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp();\n  }\n  removeMin() {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, n.left.removeMin(), null);\n    return n.fixUp();\n  }\n  // Returns new tree, with the specified item removed.\n  remove(key, comparator) {\n    let smallest;\n    let n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = n.right.min();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n  isRed() {\n    return this.color;\n  }\n  // Returns new tree after performing any needed rotations.\n  fixUp() {\n    let n = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  moveRedLeft() {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight());\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  moveRedRight() {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  rotateLeft() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  rotateRight() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  colorFlip() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  // For testing.\n  checkMaxDepth() {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  check() {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail();\n    }\n    if (this.right.isRed()) {\n      throw fail();\n    }\n    const blackDepth = this.left.check();\n    if (blackDepth !== this.right.check()) {\n      throw fail();\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null;\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n  constructor() {\n    this.size = 0;\n  }\n  get key() {\n    throw fail();\n  }\n  get value() {\n    throw fail();\n  }\n  get color() {\n    throw fail();\n  }\n  get left() {\n    throw fail();\n  }\n  get right() {\n    throw fail();\n  }\n  // Returns a copy of the current node.\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value);\n  }\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key, comparator) {\n    return this;\n  }\n  isEmpty() {\n    return true;\n  }\n  inorderTraversal(action) {\n    return false;\n  }\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  isRed() {\n    return false;\n  }\n  // For testing.\n  checkMaxDepth() {\n    return true;\n  }\n  check() {\n    return 0;\n  }\n} // end LLRBEmptyNode\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.data = new SortedMap(this.comparator);\n  }\n  has(elem) {\n    return this.data.get(elem) !== null;\n  }\n  first() {\n    return this.data.minKey();\n  }\n  last() {\n    return this.data.maxKey();\n  }\n  get size() {\n    return this.data.size;\n  }\n  indexOf(elem) {\n    return this.data.indexOf(elem);\n  }\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb) {\n    this.data.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  forEachInRange(range, cb) {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n  /**\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n   */\n  forEachWhile(cb, start) {\n    let iter;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem) {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n  getIterator() {\n    return new SortedSetIterator(this.data.getIterator());\n  }\n  getIteratorFrom(key) {\n    return new SortedSetIterator(this.data.getIteratorFrom(key));\n  }\n  /** Inserts or updates an element */\n  add(elem) {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n  /** Deletes an element */\n  delete(elem) {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n  unionWith(other) {\n    let result = this;\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n  isEqual(other) {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toArray() {\n    const res = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n  toString() {\n    const result = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n  copy(data) {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\nclass SortedSetIterator {\n  constructor(iter) {\n    this.iter = iter;\n  }\n  getNext() {\n    return this.iter.getNext().key;\n  }\n  hasNext() {\n    return this.iter.hasNext();\n  }\n}\n/**\n * Compares two sorted sets for equality using their natural ordering. The\n * method computes the intersection and invokes `onAdd` for every element that\n * is in `after` but not `before`. `onRemove` is invoked for every element in\n * `before` but missing from `after`.\n *\n * The method creates a copy of both `before` and `after` and runs in O(n log\n * n), where n is the size of the two lists.\n *\n * @param before - The elements that exist in the original set.\n * @param after - The elements to diff against the original set.\n * @param comparator - The comparator for the elements in before and after.\n * @param onAdd - A function to invoke for every element that is part of `\n * after` but not `before`.\n * @param onRemove - A function to invoke for every element that is part of\n * `before` but not `after`.\n */\nfunction diffSortedSets(before, after, comparator, onAdd, onRemove) {\n  const beforeIt = before.getIterator();\n  const afterIt = after.getIterator();\n  let beforeValue = advanceIterator(beforeIt);\n  let afterValue = advanceIterator(afterIt);\n  // Walk through the two sets at the same time, using the ordering defined by\n  // `comparator`.\n  while (beforeValue || afterValue) {\n    let added = false;\n    let removed = false;\n    if (beforeValue && afterValue) {\n      const cmp = comparator(beforeValue, afterValue);\n      if (cmp < 0) {\n        // The element was removed if the next element in our ordered\n        // walkthrough is only in `before`.\n        removed = true;\n      } else if (cmp > 0) {\n        // The element was added if the next element in our ordered walkthrough\n        // is only in `after`.\n        added = true;\n      }\n    } else if (beforeValue != null) {\n      removed = true;\n    } else {\n      added = true;\n    }\n    if (added) {\n      onAdd(afterValue);\n      afterValue = advanceIterator(afterIt);\n    } else if (removed) {\n      onRemove(beforeValue);\n      beforeValue = advanceIterator(beforeIt);\n    } else {\n      beforeValue = advanceIterator(beforeIt);\n      afterValue = advanceIterator(afterIt);\n    }\n  }\n}\n/**\n * Returns the next element from the iterator or `undefined` if none available.\n */\nfunction advanceIterator(it) {\n  return it.hasNext() ? it.getNext() : undefined;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nclass FieldMask {\n  constructor(fields) {\n    this.fields = fields;\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath$1.comparator);\n  }\n  static empty() {\n    return new FieldMask([]);\n  }\n  /**\n   * Returns a new FieldMask object that is the result of adding all the given\n   * fields paths to this field mask.\n   */\n  unionWith(extraFields) {\n    let mergedMaskSet = new SortedSet(FieldPath$1.comparator);\n    for (const fieldPath of this.fields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    for (const fieldPath of extraFields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    return new FieldMask(mergedMaskSet.toArray());\n  }\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(fieldPath) {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isEqual(other) {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  // Note: We used to validate the base64 string here via a regular expression.\n  // This was removed to improve the performance of indexing.\n  return Buffer.from(encoded, 'base64').toString('binary');\n}\n/** Converts a binary string to a Base64 encoded string. */\nfunction encodeBase64(raw) {\n  return Buffer.from(raw, 'binary').toString('base64');\n}\n/** True if and only if the Base64 conversion functions are available. */\nfunction isBase64Available() {\n  return true;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n  constructor(binaryString) {\n    this.binaryString = binaryString;\n  }\n  static fromBase64String(base64) {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n  static fromUint8Array(array) {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n  [Symbol.iterator]() {\n    let i = 0;\n    return {\n      next: () => {\n        if (i < this.binaryString.length) {\n          return {\n            value: this.binaryString.charCodeAt(i++),\n            done: false\n          };\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n  }\n  toBase64() {\n    return encodeBase64(this.binaryString);\n  }\n  toUint8Array() {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n  approximateByteSize() {\n    return this.binaryString.length * 2;\n  }\n  compareTo(other) {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n  isEqual(other) {\n    return this.binaryString === other.binaryString;\n  }\n}\nByteString.EMPTY_BYTE_STRING = new ByteString('');\n/**\n * Helper function to convert an Uint8array to a binary string.\n */\nfunction binaryStringFromUint8Array(array) {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n/**\n * Helper function to convert a binary string to an Uint8Array.\n */\nfunction uint8ArrayFromBinaryString(binaryString) {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nfunction normalizeTimestamp(date) {\n  hardAssert(!!date);\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n    return {\n      seconds,\n      nanos\n    };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return {\n      seconds,\n      nanos\n    };\n  }\n}\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nfunction normalizeNumber(value) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n/** Converts the possible Proto types for Blobs into a ByteString. */\nfunction normalizeByteString(blob) {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY$1 = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\nfunction isServerTimestamp(value) {\n  var _a, _b;\n  const type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY$1]) === null || _b === void 0 ? void 0 : _b.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n/**\n * Creates a new ServerTimestamp proto value (using the internal format).\n */\nfunction serverTimestamp$1(localWriteTime, previousValue) {\n  const mapValue = {\n    fields: {\n      [TYPE_KEY$1]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n  // We should avoid storing deeply nested server timestamp map values\n  // because we never use the intermediate \"previous values\".\n  // For example:\n  // previous: 42L, add: t1, result: t1 -> 42L\n  // previous: t1,  add: t2, result: t2 -> 42L (NOT t2 -> t1 -> 42L)\n  // previous: t2,  add: t3, result: t3 -> 42L (NOT t3 -> t2 -> t1 -> 42L)\n  // `getPreviousValue` recursively traverses server timestamps to find the\n  // least recent Value.\n  if (previousValue && isServerTimestamp(previousValue)) {\n    previousValue = getPreviousValue(previousValue);\n  }\n  if (previousValue) {\n    mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;\n  }\n  return {\n    mapValue\n  };\n}\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nfunction getPreviousValue(value) {\n  const previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n/**\n * Returns the local time at which this timestamp was first set.\n */\nfunction getLocalWriteTime(value) {\n  const localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param longPollingOptions Options that configure long-polling.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, longPollingOptions, useFetchStreams) {\n    this.databaseId = databaseId;\n    this.appId = appId;\n    this.persistenceKey = persistenceKey;\n    this.host = host;\n    this.ssl = ssl;\n    this.forceLongPolling = forceLongPolling;\n    this.autoDetectLongPolling = autoDetectLongPolling;\n    this.longPollingOptions = longPollingOptions;\n    this.useFetchStreams = useFetchStreams;\n  }\n}\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n  constructor(projectId, database) {\n    this.projectId = projectId;\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n  static empty() {\n    return new DatabaseId('', '');\n  }\n  get isDefaultDatabase() {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n  isEqual(other) {\n    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;\n  }\n}\nfunction databaseIdFromApp(app, database) {\n  if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n  }\n  return new DatabaseId(app.options.projectId, database);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sentinel value that sorts before any Mutation Batch ID. */\nconst BATCHID_UNKNOWN = -1;\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n/** Returns whether the value represents -0. */\nfunction isNegativeZero(value) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === 0 && 1 / value === 1 / -0;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\nfunction isSafeInteger(value) {\n  return typeof value === 'number' && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst TYPE_KEY = '__type__';\nconst MAX_VALUE_TYPE = '__max__';\nconst MAX_VALUE = {\n  mapValue: {\n    fields: {\n      '__type__': {\n        stringValue: MAX_VALUE_TYPE\n      }\n    }\n  }\n};\nconst VECTOR_VALUE_SENTINEL = '__vector__';\nconst VECTOR_MAP_VECTORS_KEY = 'value';\nconst MIN_VALUE = {\n  nullValue: 'NULL_VALUE'\n};\n/** Extracts the backend's type order for the provided value. */\nfunction typeOrder(value) {\n  if ('nullValue' in value) {\n    return 0 /* TypeOrder.NullValue */;\n  } else if ('booleanValue' in value) {\n    return 1 /* TypeOrder.BooleanValue */;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return 2 /* TypeOrder.NumberValue */;\n  } else if ('timestampValue' in value) {\n    return 3 /* TypeOrder.TimestampValue */;\n  } else if ('stringValue' in value) {\n    return 5 /* TypeOrder.StringValue */;\n  } else if ('bytesValue' in value) {\n    return 6 /* TypeOrder.BlobValue */;\n  } else if ('referenceValue' in value) {\n    return 7 /* TypeOrder.RefValue */;\n  } else if ('geoPointValue' in value) {\n    return 8 /* TypeOrder.GeoPointValue */;\n  } else if ('arrayValue' in value) {\n    return 9 /* TypeOrder.ArrayValue */;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return 4 /* TypeOrder.ServerTimestampValue */;\n    } else if (isMaxValue(value)) {\n      return 9007199254740991 /* TypeOrder.MaxValue */;\n    } else if (isVectorValue(value)) {\n      return 10 /* TypeOrder.VectorValue */;\n    }\n    return 11 /* TypeOrder.ObjectValue */;\n  } else {\n    return fail();\n  }\n}\n/** Tests `left` and `right` for equality based on the backend semantics. */\nfunction valueEquals(left, right) {\n  if (left === right) {\n    return true;\n  }\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n  switch (leftType) {\n    case 0 /* TypeOrder.NullValue */:\n      return true;\n    case 1 /* TypeOrder.BooleanValue */:\n      return left.booleanValue === right.booleanValue;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case 3 /* TypeOrder.TimestampValue */:\n      return timestampEquals(left, right);\n    case 5 /* TypeOrder.StringValue */:\n      return left.stringValue === right.stringValue;\n    case 6 /* TypeOrder.BlobValue */:\n      return blobEquals(left, right);\n    case 7 /* TypeOrder.RefValue */:\n      return left.referenceValue === right.referenceValue;\n    case 8 /* TypeOrder.GeoPointValue */:\n      return geoPointEquals(left, right);\n    case 2 /* TypeOrder.NumberValue */:\n      return numberEquals(left, right);\n    case 9 /* TypeOrder.ArrayValue */:\n      return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);\n    case 10 /* TypeOrder.VectorValue */:\n    case 11 /* TypeOrder.ObjectValue */:\n      return objectEquals(left, right);\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return true;\n    default:\n      return fail();\n  }\n}\nfunction timestampEquals(left, right) {\n  if (typeof left.timestampValue === 'string' && typeof right.timestampValue === 'string' && left.timestampValue.length === right.timestampValue.length) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n  const leftTimestamp = normalizeTimestamp(left.timestampValue);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue);\n  return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;\n}\nfunction geoPointEquals(left, right) {\n  return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);\n}\nfunction blobEquals(left, right) {\n  return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));\n}\nfunction numberEquals(left, right) {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue);\n    const n2 = normalizeNumber(right.doubleValue);\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n  return false;\n}\nfunction objectEquals(left, right) {\n  const leftMap = left.mapValue.fields || {};\n  const rightMap = right.mapValue.fields || {};\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (rightMap[key] === undefined || !valueEquals(leftMap[key], rightMap[key])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/** Returns true if the ArrayValue contains the specified element. */\nfunction arrayValueContains(haystack, needle) {\n  return (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined;\n}\nfunction valueCompare(left, right) {\n  if (left === right) {\n    return 0;\n  }\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n  switch (leftType) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return 0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return primitiveComparator(left.booleanValue, right.booleanValue);\n    case 2 /* TypeOrder.NumberValue */:\n      return compareNumbers(left, right);\n    case 3 /* TypeOrder.TimestampValue */:\n      return compareTimestamps(left.timestampValue, right.timestampValue);\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));\n    case 5 /* TypeOrder.StringValue */:\n      return primitiveComparator(left.stringValue, right.stringValue);\n    case 6 /* TypeOrder.BlobValue */:\n      return compareBlobs(left.bytesValue, right.bytesValue);\n    case 7 /* TypeOrder.RefValue */:\n      return compareReferences(left.referenceValue, right.referenceValue);\n    case 8 /* TypeOrder.GeoPointValue */:\n      return compareGeoPoints(left.geoPointValue, right.geoPointValue);\n    case 9 /* TypeOrder.ArrayValue */:\n      return compareArrays(left.arrayValue, right.arrayValue);\n    case 10 /* TypeOrder.VectorValue */:\n      return compareVectors(left.mapValue, right.mapValue);\n    case 11 /* TypeOrder.ObjectValue */:\n      return compareMaps(left.mapValue, right.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction compareNumbers(left, right) {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\nfunction compareTimestamps(left, right) {\n  if (typeof left === 'string' && typeof right === 'string' && left.length === right.length) {\n    return primitiveComparator(left, right);\n  }\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n  const comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\nfunction compareReferences(leftPath, rightPath) {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\nfunction compareGeoPoints(left, right) {\n  const comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));\n}\nfunction compareBlobs(left, right) {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\nfunction compareArrays(left, right) {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\nfunction compareVectors(left, right) {\n  var _a, _b, _c, _d;\n  const leftMap = left.fields || {};\n  const rightMap = right.fields || {};\n  // The vector is a map, but only vector value is compared.\n  const leftArrayValue = (_a = leftMap[VECTOR_MAP_VECTORS_KEY]) === null || _a === void 0 ? void 0 : _a.arrayValue;\n  const rightArrayValue = (_b = rightMap[VECTOR_MAP_VECTORS_KEY]) === null || _b === void 0 ? void 0 : _b.arrayValue;\n  const lengthCompare = primitiveComparator(((_c = leftArrayValue === null || leftArrayValue === void 0 ? void 0 : leftArrayValue.values) === null || _c === void 0 ? void 0 : _c.length) || 0, ((_d = rightArrayValue === null || rightArrayValue === void 0 ? void 0 : rightArrayValue.values) === null || _d === void 0 ? void 0 : _d.length) || 0);\n  if (lengthCompare !== 0) {\n    return lengthCompare;\n  }\n  return compareArrays(leftArrayValue, rightArrayValue);\n}\nfunction compareMaps(left, right) {\n  if (left === MAX_VALUE.mapValue && right === MAX_VALUE.mapValue) {\n    return 0;\n  } else if (left === MAX_VALUE.mapValue) {\n    return 1;\n  } else if (right === MAX_VALUE.mapValue) {\n    return -1;\n  }\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n/**\n * Generates the canonical ID for the provided field value (as used in Target\n * serialization).\n */\nfunction canonicalId(value) {\n  return canonifyValue(value);\n}\nfunction canonifyValue(value) {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue);\n  } else if ('stringValue' in value) {\n    return value.stringValue;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue);\n  } else {\n    return fail();\n  }\n}\nfunction canonifyByteString(byteString) {\n  return normalizeByteString(byteString).toBase64();\n}\nfunction canonifyTimestamp(timestamp) {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\nfunction canonifyGeoPoint(geoPoint) {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\nfunction canonifyReference(referenceValue) {\n  return DocumentKey.fromName(referenceValue).toString();\n}\nfunction canonifyMap(mapValue) {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields[key])}`;\n  }\n  return result + '}';\n}\nfunction canonifyArray(arrayValue) {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n/**\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\n * value.\n *\n * The memory size takes into account only the actual user data as it resides\n * in memory and ignores object overhead.\n */\nfunction estimateByteSize(value) {\n  switch (typeOrder(value)) {\n    case 0 /* TypeOrder.NullValue */:\n      return 4;\n    case 1 /* TypeOrder.BooleanValue */:\n      return 4;\n    case 2 /* TypeOrder.NumberValue */:\n      return 8;\n    case 3 /* TypeOrder.TimestampValue */:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case 5 /* TypeOrder.StringValue */:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue.length * 2;\n    case 6 /* TypeOrder.BlobValue */:\n      return normalizeByteString(value.bytesValue).approximateByteSize();\n    case 7 /* TypeOrder.RefValue */:\n      return value.referenceValue.length;\n    case 8 /* TypeOrder.GeoPointValue */:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case 9 /* TypeOrder.ArrayValue */:\n      return estimateArrayByteSize(value.arrayValue);\n    case 10 /* TypeOrder.VectorValue */:\n    case 11 /* TypeOrder.ObjectValue */:\n      return estimateMapByteSize(value.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction estimateMapByteSize(mapValue) {\n  let size = 0;\n  forEach(mapValue.fields, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\nfunction estimateArrayByteSize(arrayValue) {\n  return (arrayValue.values || []).reduce((previousSize, value) => previousSize + estimateByteSize(value), 0);\n}\n/** Returns a reference value for the provided database and key. */\nfunction refValue(databaseId, key) {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${databaseId.database}/documents/${key.path.canonicalString()}`\n  };\n}\n/** Returns true if `value` is an IntegerValue . */\nfunction isInteger(value) {\n  return !!value && 'integerValue' in value;\n}\n/** Returns true if `value` is a DoubleValue. */\nfunction isDouble(value) {\n  return !!value && 'doubleValue' in value;\n}\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nfunction isNumber(value) {\n  return isInteger(value) || isDouble(value);\n}\n/** Returns true if `value` is an ArrayValue. */\nfunction isArray(value) {\n  return !!value && 'arrayValue' in value;\n}\n/** Returns true if `value` is a NullValue. */\nfunction isNullValue(value) {\n  return !!value && 'nullValue' in value;\n}\n/** Returns true if `value` is NaN. */\nfunction isNanValue(value) {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n/** Returns true if `value` is a MapValue. */\nfunction isMapValue(value) {\n  return !!value && 'mapValue' in value;\n}\n/** Returns true if `value` is a VetorValue. */\nfunction isVectorValue(value) {\n  var _a, _b;\n  const type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;\n  return type === VECTOR_VALUE_SENTINEL;\n}\n/** Creates a deep copy of `source`. */\nfunction deepClone(source) {\n  if (source.geoPointValue) {\n    return {\n      geoPointValue: Object.assign({}, source.geoPointValue)\n    };\n  } else if (source.timestampValue && typeof source.timestampValue === 'object') {\n    return {\n      timestampValue: Object.assign({}, source.timestampValue)\n    };\n  } else if (source.mapValue) {\n    const target = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    forEach(source.mapValue.fields, (key, val) => target.mapValue.fields[key] = deepClone(val));\n    return target;\n  } else if (source.arrayValue) {\n    const target = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (let i = 0; i < (source.arrayValue.values || []).length; ++i) {\n      target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);\n    }\n    return target;\n  } else {\n    return Object.assign({}, source);\n  }\n}\n/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\nfunction isMaxValue(value) {\n  return (((value.mapValue || {}).fields || {})['__type__'] || {}).stringValue === MAX_VALUE_TYPE;\n}\nconst MIN_VECTOR_VALUE = {\n  mapValue: {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: VECTOR_VALUE_SENTINEL\n      },\n      [VECTOR_MAP_VECTORS_KEY]: {\n        arrayValue: {}\n      }\n    }\n  }\n};\n/** Returns the lowest value for the given value type (inclusive). */\nfunction valuesGetLowerBound(value) {\n  if ('nullValue' in value) {\n    return MIN_VALUE;\n  } else if ('booleanValue' in value) {\n    return {\n      booleanValue: false\n    };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return {\n      doubleValue: NaN\n    };\n  } else if ('timestampValue' in value) {\n    return {\n      timestampValue: {\n        seconds: Number.MIN_SAFE_INTEGER\n      }\n    };\n  } else if ('stringValue' in value) {\n    return {\n      stringValue: ''\n    };\n  } else if ('bytesValue' in value) {\n    return {\n      bytesValue: ''\n    };\n  } else if ('referenceValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('geoPointValue' in value) {\n    return {\n      geoPointValue: {\n        latitude: -90,\n        longitude: -180\n      }\n    };\n  } else if ('arrayValue' in value) {\n    return {\n      arrayValue: {}\n    };\n  } else if ('mapValue' in value) {\n    if (isVectorValue(value)) {\n      return MIN_VECTOR_VALUE;\n    }\n    return {\n      mapValue: {}\n    };\n  } else {\n    return fail();\n  }\n}\n/** Returns the largest value for the given value type (exclusive). */\nfunction valuesGetUpperBound(value) {\n  if ('nullValue' in value) {\n    return {\n      booleanValue: false\n    };\n  } else if ('booleanValue' in value) {\n    return {\n      doubleValue: NaN\n    };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return {\n      timestampValue: {\n        seconds: Number.MIN_SAFE_INTEGER\n      }\n    };\n  } else if ('timestampValue' in value) {\n    return {\n      stringValue: ''\n    };\n  } else if ('stringValue' in value) {\n    return {\n      bytesValue: ''\n    };\n  } else if ('bytesValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('referenceValue' in value) {\n    return {\n      geoPointValue: {\n        latitude: -90,\n        longitude: -180\n      }\n    };\n  } else if ('geoPointValue' in value) {\n    return {\n      arrayValue: {}\n    };\n  } else if ('arrayValue' in value) {\n    return MIN_VECTOR_VALUE;\n  } else if ('mapValue' in value) {\n    if (isVectorValue(value)) {\n      return {\n        mapValue: {}\n      };\n    }\n    return MAX_VALUE;\n  } else {\n    return fail();\n  }\n}\nfunction lowerBoundCompare(left, right) {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  if (left.inclusive && !right.inclusive) {\n    return -1;\n  } else if (!left.inclusive && right.inclusive) {\n    return 1;\n  }\n  return 0;\n}\nfunction upperBoundCompare(left, right) {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  if (left.inclusive && !right.inclusive) {\n    return 1;\n  } else if (!left.inclusive && right.inclusive) {\n    return -1;\n  }\n  return 0;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nclass ObjectValue {\n  constructor(value) {\n    this.value = value;\n  }\n  static empty() {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  }\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path - the path to search\n   * @returns The value at the path or null if the path is not set.\n   */\n  field(path) {\n    if (path.isEmpty()) {\n      return this.value;\n    } else {\n      let currentLevel = this.value;\n      for (let i = 0; i < path.length - 1; ++i) {\n        currentLevel = (currentLevel.mapValue.fields || {})[path.get(i)];\n        if (!isMapValue(currentLevel)) {\n          return null;\n        }\n      }\n      currentLevel = (currentLevel.mapValue.fields || {})[path.lastSegment()];\n      return currentLevel || null;\n    }\n  }\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path - The field path to set.\n   * @param value - The value to set.\n   */\n  set(path, value) {\n    const fieldsMap = this.getFieldsMap(path.popLast());\n    fieldsMap[path.lastSegment()] = deepClone(value);\n  }\n  /**\n   * Sets the provided fields to the provided values.\n   *\n   * @param data - A map of fields to values (or null for deletes).\n   */\n  setAll(data) {\n    let parent = FieldPath$1.emptyPath();\n    let upserts = {};\n    let deletes = [];\n    data.forEach((value, path) => {\n      if (!parent.isImmediateParentOf(path)) {\n        // Insert the accumulated changes at this parent location\n        const fieldsMap = this.getFieldsMap(parent);\n        this.applyChanges(fieldsMap, upserts, deletes);\n        upserts = {};\n        deletes = [];\n        parent = path.popLast();\n      }\n      if (value) {\n        upserts[path.lastSegment()] = deepClone(value);\n      } else {\n        deletes.push(path.lastSegment());\n      }\n    });\n    const fieldsMap = this.getFieldsMap(parent);\n    this.applyChanges(fieldsMap, upserts, deletes);\n  }\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path - The field path to remove.\n   */\n  delete(path) {\n    const nestedValue = this.field(path.popLast());\n    if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\n      delete nestedValue.mapValue.fields[path.lastSegment()];\n    }\n  }\n  isEqual(other) {\n    return valueEquals(this.value, other.value);\n  }\n  /**\n   * Returns the map that contains the leaf element of `path`. If the parent\n   * entry does not yet exist, or if it is not a map, a new map will be created.\n   */\n  getFieldsMap(path) {\n    let current = this.value;\n    if (!current.mapValue.fields) {\n      current.mapValue = {\n        fields: {}\n      };\n    }\n    for (let i = 0; i < path.length; ++i) {\n      let next = current.mapValue.fields[path.get(i)];\n      if (!isMapValue(next) || !next.mapValue.fields) {\n        next = {\n          mapValue: {\n            fields: {}\n          }\n        };\n        current.mapValue.fields[path.get(i)] = next;\n      }\n      current = next;\n    }\n    return current.mapValue.fields;\n  }\n  /**\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\n   * entries.\n   */\n  applyChanges(fieldsMap, inserts, deletes) {\n    forEach(inserts, (key, val) => fieldsMap[key] = val);\n    for (const field of deletes) {\n      delete fieldsMap[field];\n    }\n  }\n  clone() {\n    return new ObjectValue(deepClone(this.value));\n  }\n}\n/**\n * Returns a FieldMask built from all fields in a MapValue.\n */\nfunction extractFieldMask(value) {\n  const fields = [];\n  forEach(value.fields, (key, value) => {\n    const currentPath = new FieldPath$1([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\nclass MutableDocument {\n  constructor(key, documentType, version, readTime, createTime, data, documentState) {\n    this.key = key;\n    this.documentType = documentType;\n    this.version = version;\n    this.readTime = readTime;\n    this.createTime = createTime;\n    this.data = data;\n    this.documentState = documentState;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n  static newInvalidDocument(documentKey) {\n    return new MutableDocument(documentKey, 0 /* DocumentType.INVALID */, /* version */SnapshotVersion.min(), /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist with the given data at the\n   * given version.\n   */\n  static newFoundDocument(documentKey, version, createTime, value) {\n    return new MutableDocument(documentKey, 1 /* DocumentType.FOUND_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */createTime, value, 0 /* DocumentState.SYNCED */);\n  }\n  /** Creates a new document that is known to not exist at the given version. */\n  static newNoDocument(documentKey, version) {\n    return new MutableDocument(documentKey, 2 /* DocumentType.NO_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist at the given version but\n   * whose data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  static newUnknownDocument(documentKey, version) {\n    return new MutableDocument(documentKey, 3 /* DocumentType.UNKNOWN_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n  }\n  /**\n   * Changes the document type to indicate that it exists and that its version\n   * and data are known.\n   */\n  convertToFoundDocument(version, value) {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    if (this.createTime.isEqual(SnapshotVersion.min()) && (this.documentType === 2 /* DocumentType.NO_DOCUMENT */ || this.documentType === 0 /* DocumentType.INVALID */)) {\n      this.createTime = version;\n    }\n    this.version = version;\n    this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */;\n    this.data = value;\n    this.documentState = 0 /* DocumentState.SYNCED */;\n    return this;\n  }\n  /**\n   * Changes the document type to indicate that it doesn't exist at the given\n   * version.\n   */\n  convertToNoDocument(version) {\n    this.version = version;\n    this.documentType = 2 /* DocumentType.NO_DOCUMENT */;\n    this.data = ObjectValue.empty();\n    this.documentState = 0 /* DocumentState.SYNCED */;\n    return this;\n  }\n  /**\n   * Changes the document type to indicate that it exists at a given version but\n   * that its data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  convertToUnknownDocument(version) {\n    this.version = version;\n    this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */;\n    this.data = ObjectValue.empty();\n    this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n    return this;\n  }\n  setHasCommittedMutations() {\n    this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n    return this;\n  }\n  setHasLocalMutations() {\n    this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\n    this.version = SnapshotVersion.min();\n    return this;\n  }\n  setReadTime(readTime) {\n    this.readTime = readTime;\n    return this;\n  }\n  get hasLocalMutations() {\n    return this.documentState === 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\n  }\n  get hasCommittedMutations() {\n    return this.documentState === 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n  }\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n  isValidDocument() {\n    return this.documentType !== 0 /* DocumentType.INVALID */;\n  }\n  isFoundDocument() {\n    return this.documentType === 1 /* DocumentType.FOUND_DOCUMENT */;\n  }\n  isNoDocument() {\n    return this.documentType === 2 /* DocumentType.NO_DOCUMENT */;\n  }\n  isUnknownDocument() {\n    return this.documentType === 3 /* DocumentType.UNKNOWN_DOCUMENT */;\n  }\n  isEqual(other) {\n    return other instanceof MutableDocument && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.documentType === other.documentType && this.documentState === other.documentState && this.data.isEqual(other.data);\n  }\n  mutableCopy() {\n    return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, ` + `{createTime: ${this.createTime}}), ` + `{documentType: ${this.documentType}}), ` + `{documentState: ${this.documentState}})`;\n  }\n}\n/**\n * Compares the value for field `field` in the provided documents. Throws if\n * the field does not exist in both documents.\n */\nfunction compareDocumentsByField(field, d1, d2) {\n  const v1 = d1.data.field(field);\n  const v2 = d2.data.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail();\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\nclass Bound {\n  constructor(position, inclusive) {\n    this.position = position;\n    this.inclusive = inclusive;\n  }\n}\nfunction boundCompareToDocument(bound, orderBy, doc) {\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      comparison = DocumentKey.comparator(DocumentKey.fromName(component.referenceValue), doc.key);\n    } else {\n      const docValue = doc.data.field(orderByComponent.field);\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === \"desc\" /* Direction.DESCENDING */) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return comparison;\n}\n/**\n * Returns true if a document sorts after a bound using the provided sort\n * order.\n */\nfunction boundSortsAfterDocument(bound, orderBy, doc) {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison >= 0 : comparison > 0;\n}\n/**\n * Returns true if a document sorts before a bound using the provided sort\n * order.\n */\nfunction boundSortsBeforeDocument(bound, orderBy, doc) {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison <= 0 : comparison < 0;\n}\nfunction boundEquals(left, right) {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n  if (left.inclusive !== right.inclusive || left.position.length !== right.position.length) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nclass OrderBy {\n  constructor(field, dir = \"asc\" /* Direction.ASCENDING */) {\n    this.field = field;\n    this.dir = dir;\n  }\n}\nfunction canonifyOrderBy(orderBy) {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\nfunction stringifyOrderBy(orderBy) {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\nfunction orderByEquals(left, right) {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Filter {}\nclass FieldFilter extends Filter {\n  constructor(field, op, value) {\n    super();\n    this.field = field;\n    this.op = op;\n    this.value = value;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(field, op, value) {\n    if (field.isKeyField()) {\n      if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\n        return this.createKeyFieldInFilter(field, op, value);\n      } else {\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === \"in\" /* Operator.IN */) {\n      return new InFilter(field, value);\n    } else if (op === \"not-in\" /* Operator.NOT_IN */) {\n      return new NotInFilter(field, value);\n    } else if (op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n  static createKeyFieldInFilter(field, op, value) {\n    return op === \"in\" /* Operator.IN */ ? new KeyFieldInFilter(field, value) : new KeyFieldNotInFilter(field, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    if (this.op === \"!=\" /* Operator.NOT_EQUAL */) {\n      return other !== null && this.matchesComparison(valueCompare(other, this.value));\n    }\n    // Only compare types with matching backend order (such as double and int).\n    return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));\n  }\n  matchesComparison(comparison) {\n    switch (this.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n        return comparison < 0;\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        return comparison <= 0;\n      case \"==\" /* Operator.EQUAL */:\n        return comparison === 0;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return comparison !== 0;\n      case \">\" /* Operator.GREATER_THAN */:\n        return comparison > 0;\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        return comparison >= 0;\n      default:\n        return fail();\n    }\n  }\n  isInequality() {\n    return [\"<\" /* Operator.LESS_THAN */, \"<=\" /* Operator.LESS_THAN_OR_EQUAL */, \">\" /* Operator.GREATER_THAN */, \">=\" /* Operator.GREATER_THAN_OR_EQUAL */, \"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */].indexOf(this.op) >= 0;\n  }\n  getFlattenedFilters() {\n    return [this];\n  }\n  getFilters() {\n    return [this];\n  }\n}\nclass CompositeFilter extends Filter {\n  constructor(filters, op) {\n    super();\n    this.filters = filters;\n    this.op = op;\n    this.memoizedFlattenedFilters = null;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(filters, op) {\n    return new CompositeFilter(filters, op);\n  }\n  matches(doc) {\n    if (compositeFilterIsConjunction(this)) {\n      // For conjunctions, all filters must match, so return false if any filter doesn't match.\n      return this.filters.find(filter => !filter.matches(doc)) === undefined;\n    } else {\n      // For disjunctions, at least one filter should match.\n      return this.filters.find(filter => filter.matches(doc)) !== undefined;\n    }\n  }\n  getFlattenedFilters() {\n    if (this.memoizedFlattenedFilters !== null) {\n      return this.memoizedFlattenedFilters;\n    }\n    this.memoizedFlattenedFilters = this.filters.reduce((result, subfilter) => {\n      return result.concat(subfilter.getFlattenedFilters());\n    }, []);\n    return this.memoizedFlattenedFilters;\n  }\n  // Returns a mutable copy of `this.filters`\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n}\nfunction compositeFilterIsConjunction(compositeFilter) {\n  return compositeFilter.op === \"and\" /* CompositeOperator.AND */;\n}\nfunction compositeFilterIsDisjunction(compositeFilter) {\n  return compositeFilter.op === \"or\" /* CompositeOperator.OR */;\n}\n/**\n * Returns true if this filter is a conjunction of field filters only. Returns false otherwise.\n */\nfunction compositeFilterIsFlatConjunction(compositeFilter) {\n  return compositeFilterIsFlat(compositeFilter) && compositeFilterIsConjunction(compositeFilter);\n}\n/**\n * Returns true if this filter does not contain any composite filters. Returns false otherwise.\n */\nfunction compositeFilterIsFlat(compositeFilter) {\n  for (const filter of compositeFilter.filters) {\n    if (filter instanceof CompositeFilter) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction canonifyFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return filter.field.canonicalString() + filter.op.toString() + canonicalId(filter.value);\n  } else if (compositeFilterIsFlatConjunction(filter)) {\n    // Older SDK versions use an implicit AND operation between their filters.\n    // In the new SDK versions, the developer may use an explicit AND filter.\n    // To stay consistent with the old usages, we add a special case to ensure\n    // the canonical ID for these two are the same. For example:\n    // `col.whereEquals(\"a\", 1).whereEquals(\"b\", 2)` should have the same\n    // canonical ID as `col.where(and(equals(\"a\",1), equals(\"b\",2)))`.\n    return filter.filters.map(filter => canonifyFilter(filter)).join(',');\n  } else {\n    // filter instanceof CompositeFilter\n    const canonicalIdsString = filter.filters.map(filter => canonifyFilter(filter)).join(',');\n    return `${filter.op}(${canonicalIdsString})`;\n  }\n}\nfunction filterEquals(f1, f2) {\n  if (f1 instanceof FieldFilter) {\n    return fieldFilterEquals(f1, f2);\n  } else if (f1 instanceof CompositeFilter) {\n    return compositeFilterEquals(f1, f2);\n  } else {\n    fail();\n  }\n}\nfunction fieldFilterEquals(f1, f2) {\n  return f2 instanceof FieldFilter && f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);\n}\nfunction compositeFilterEquals(f1, f2) {\n  if (f2 instanceof CompositeFilter && f1.op === f2.op && f1.filters.length === f2.filters.length) {\n    const subFiltersMatch = f1.filters.reduce((result, f1Filter, index) => result && filterEquals(f1Filter, f2.filters[index]), true);\n    return subFiltersMatch;\n  }\n  return false;\n}\n/**\n * Returns a new composite filter that contains all filter from\n * `compositeFilter` plus all the given filters in `otherFilters`.\n */\nfunction compositeFilterWithAddedFilters(compositeFilter, otherFilters) {\n  const mergedFilters = compositeFilter.filters.concat(otherFilters);\n  return CompositeFilter.create(mergedFilters, compositeFilter.op);\n}\n/** Returns a debug description for `filter`. */\nfunction stringifyFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    return stringifyFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return stringifyCompositeFilter(filter);\n  } else {\n    return 'Filter';\n  }\n}\nfunction stringifyCompositeFilter(filter) {\n  return filter.op.toString() + ` {` + filter.getFilters().map(stringifyFilter).join(' ,') + '}';\n}\nfunction stringifyFieldFilter(filter) {\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(filter.value)}`;\n}\n/** Filter that matches on key fields (i.e. '__name__'). */\nclass KeyFieldFilter extends FieldFilter {\n  constructor(field, op, value) {\n    super(field, op, value);\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n  matches(doc) {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n/** Filter that matches on key fields within an array. */\nclass KeyFieldInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"in\" /* Operator.IN */, value);\n    this.keys = extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */, value);\n  }\n  matches(doc) {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n/** Filter that matches on key fields not present within an array. */\nclass KeyFieldNotInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"not-in\" /* Operator.NOT_IN */, value);\n    this.keys = extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */, value);\n  }\n  matches(doc) {\n    return !this.keys.some(key => key.isEqual(doc.key));\n  }\n}\nfunction extractDocumentKeysFromArrayValue(op, value) {\n  var _a;\n  return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(v => {\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n/** A Filter that implements the array-contains operator. */\nclass ArrayContainsFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"array-contains\" /* Operator.ARRAY_CONTAINS */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n/** A Filter that implements the IN operator. */\nclass InFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"in\" /* Operator.IN */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue, other);\n  }\n}\n/** A Filter that implements the not-in operator. */\nclass NotInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"not-in\" /* Operator.NOT_IN */, value);\n  }\n  matches(doc) {\n    if (arrayValueContains(this.value.arrayValue, {\n      nullValue: 'NULL_VALUE'\n    })) {\n      return false;\n    }\n    const other = doc.data.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue, other);\n  }\n}\n/** A Filter that implements the array-contains-any operator. */\nclass ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val => arrayValueContains(this.value.arrayValue, val));\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass TargetImpl {\n  constructor(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.orderBy = orderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedCanonicalId = null;\n  }\n}\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nfunction newTarget(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\n  return new TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\n}\nfunction canonifyTarget(target) {\n  const targetImpl = debugCast(target);\n  if (targetImpl.memoizedCanonicalId === null) {\n    let str = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      str += '|cg:' + targetImpl.collectionGroup;\n    }\n    str += '|f:';\n    str += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    str += '|ob:';\n    str += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      str += '|l:';\n      str += targetImpl.limit;\n    }\n    if (targetImpl.startAt) {\n      str += '|lb:';\n      str += targetImpl.startAt.inclusive ? 'b:' : 'a:';\n      str += targetImpl.startAt.position.map(p => canonicalId(p)).join(',');\n    }\n    if (targetImpl.endAt) {\n      str += '|ub:';\n      str += targetImpl.endAt.inclusive ? 'a:' : 'b:';\n      str += targetImpl.endAt.position.map(p => canonicalId(p)).join(',');\n    }\n    targetImpl.memoizedCanonicalId = str;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\nfunction stringifyTarget(target) {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters.map(f => stringifyFilter(f)).join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy.map(o => stringifyOrderBy(o)).join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ';\n    str += target.startAt.inclusive ? 'b:' : 'a:';\n    str += target.startAt.position.map(p => canonicalId(p)).join(',');\n  }\n  if (target.endAt) {\n    str += ', endAt: ';\n    str += target.endAt.inclusive ? 'a:' : 'b:';\n    str += target.endAt.position.map(p => canonicalId(p)).join(',');\n  }\n  return `Target(${str})`;\n}\nfunction targetEquals(left, right) {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n  return boundEquals(left.endAt, right.endAt);\n}\nfunction targetIsDocumentTarget(target) {\n  return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;\n}\n/** Returns the field filters that target the given field path. */\nfunction targetGetFieldFiltersForPath(target, path) {\n  return target.filters.filter(f => f instanceof FieldFilter && f.field.isEqual(path));\n}\n/**\n * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY\n * filters. Returns `null` if there are no such filters.\n */\nfunction targetGetArrayValues(target, fieldIndex) {\n  const segment = fieldIndexGetArraySegment(fieldIndex);\n  if (segment === undefined) {\n    return null;\n  }\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\n    switch (fieldFilter.op) {\n      case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n        return fieldFilter.value.arrayValue.values || [];\n      case \"array-contains\" /* Operator.ARRAY_CONTAINS */:\n        return [fieldFilter.value];\n      // Remaining filters are not array filters.\n    }\n  }\n  return null;\n}\n/**\n * Returns the list of values that are used in != or NOT_IN filters. Returns\n * `null` if there are no such filters.\n */\nfunction targetGetNotInValues(target, fieldIndex) {\n  const values = new Map();\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\n      switch (fieldFilter.op) {\n        case \"==\" /* Operator.EQUAL */:\n        case \"in\" /* Operator.IN */:\n          // Encode equality prefix, which is encoded in the index value before\n          // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to\n          // `value != 'ab'`).\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          break;\n        case \"not-in\" /* Operator.NOT_IN */:\n        case \"!=\" /* Operator.NOT_EQUAL */:\n          // NotIn/NotEqual is always a suffix. There cannot be any remaining\n          // segments and hence we can return early here.\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          return Array.from(values.values());\n        // Remaining filters cannot be used as notIn bounds.\n      }\n    }\n  }\n  return null;\n}\n/**\n * Returns a lower bound of field values that can be used as a starting point to\n * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound\n * exists.\n */\nfunction targetGetLowerBound(target, fieldIndex) {\n  const values = [];\n  let inclusive = true;\n  // For each segment, retrieve a lower bound if there is a suitable filter or\n  // startAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */ ? targetGetAscendingBound(target, segment.fieldPath, target.startAt) : targetGetDescendingBound(target, segment.fieldPath, target.startAt);\n    values.push(segmentBound.value);\n    inclusive && (inclusive = segmentBound.inclusive);\n  }\n  return new Bound(values, inclusive);\n}\n/**\n * Returns an upper bound of field values that can be used as an ending point\n * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no\n * upper bound exists.\n */\nfunction targetGetUpperBound(target, fieldIndex) {\n  const values = [];\n  let inclusive = true;\n  // For each segment, retrieve an upper bound if there is a suitable filter or\n  // endAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */ ? targetGetDescendingBound(target, segment.fieldPath, target.endAt) : targetGetAscendingBound(target, segment.fieldPath, target.endAt);\n    values.push(segmentBound.value);\n    inclusive && (inclusive = segmentBound.inclusive);\n  }\n  return new Bound(values, inclusive);\n}\n/**\n * Returns the value to use as the lower bound for ascending index segment at\n * the provided `fieldPath` (or the upper bound for an descending segment).\n */\nfunction targetGetAscendingBound(target, fieldPath, bound) {\n  let value = MIN_VALUE;\n  let inclusive = true;\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue = MIN_VALUE;\n    let filterInclusive = true;\n    switch (fieldFilter.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        filterValue = valuesGetLowerBound(fieldFilter.value);\n        break;\n      case \"==\" /* Operator.EQUAL */:\n      case \"in\" /* Operator.IN */:\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        filterValue = fieldFilter.value;\n        break;\n      case \">\" /* Operator.GREATER_THAN */:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n      case \"not-in\" /* Operator.NOT_IN */:\n        filterValue = MIN_VALUE;\n        break;\n      // Remaining filters cannot be used as lower bounds.\n    }\n    if (lowerBoundCompare({\n      value,\n      inclusive\n    }, {\n      value: filterValue,\n      inclusive: filterInclusive\n    }) < 0) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (lowerBoundCompare({\n          value,\n          inclusive\n        }, {\n          value: cursorValue,\n          inclusive: bound.inclusive\n        }) < 0) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n  return {\n    value,\n    inclusive\n  };\n}\n/**\n * Returns the value to use as the upper bound for ascending index segment at\n * the provided `fieldPath` (or the lower bound for a descending segment).\n */\nfunction targetGetDescendingBound(target, fieldPath, bound) {\n  let value = MAX_VALUE;\n  let inclusive = true;\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue = MAX_VALUE;\n    let filterInclusive = true;\n    switch (fieldFilter.op) {\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n      case \">\" /* Operator.GREATER_THAN */:\n        filterValue = valuesGetUpperBound(fieldFilter.value);\n        filterInclusive = false;\n        break;\n      case \"==\" /* Operator.EQUAL */:\n      case \"in\" /* Operator.IN */:\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        filterValue = fieldFilter.value;\n        break;\n      case \"<\" /* Operator.LESS_THAN */:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n      case \"not-in\" /* Operator.NOT_IN */:\n        filterValue = MAX_VALUE;\n        break;\n      // Remaining filters cannot be used as upper bounds.\n    }\n    if (upperBoundCompare({\n      value,\n      inclusive\n    }, {\n      value: filterValue,\n      inclusive: filterInclusive\n    }) > 0) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (upperBoundCompare({\n          value,\n          inclusive\n        }, {\n          value: cursorValue,\n          inclusive: bound.inclusive\n        }) > 0) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n  return {\n    value,\n    inclusive\n  };\n}\n/** Returns the number of segments of a perfect index for this target. */\nfunction targetGetSegmentCount(target) {\n  let fields = new SortedSet(FieldPath$1.comparator);\n  let hasArraySegment = false;\n  for (const filter of target.filters) {\n    for (const subFilter of filter.getFlattenedFilters()) {\n      // __name__ is not an explicit segment of any index, so we don't need to\n      // count it.\n      if (subFilter.field.isKeyField()) {\n        continue;\n      }\n      // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.\n      // For instance, it is possible to have an index for \"a ARRAY a ASC\". Even\n      // though these are on the same field, they should be counted as two\n      // separate segments in an index.\n      if (subFilter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || subFilter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n        hasArraySegment = true;\n      } else {\n        fields = fields.add(subFilter.field);\n      }\n    }\n  }\n  for (const orderBy of target.orderBy) {\n    // __name__ is not an explicit segment of any index, so we don't need to\n    // count it.\n    if (!orderBy.field.isKeyField()) {\n      fields = fields.add(orderBy.field);\n    }\n  }\n  return fields.size + (hasArraySegment ? 1 : 0);\n}\nfunction targetHasLimit(target) {\n  return target.limit !== null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass QueryImpl {\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(path, collectionGroup = null, explicitOrderBy = [], filters = [], limit = null, limitType = \"F\" /* LimitType.First */, startAt = null, endAt = null) {\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.explicitOrderBy = explicitOrderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedNormalizedOrderBy = null;\n    // The corresponding `Target` of this `Query` instance, for use with\n    // non-aggregate queries.\n    this.memoizedTarget = null;\n    // The corresponding `Target` of this `Query` instance, for use with\n    // aggregate queries. Unlike targets for non-aggregate queries,\n    // aggregate query targets do not contain normalized order-bys, they only\n    // contain explicit order-bys.\n    this.memoizedAggregateTarget = null;\n    if (this.startAt) ;\n    if (this.endAt) ;\n  }\n}\n/** Creates a new Query instance with the options provided. */\nfunction newQuery(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {\n  return new QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);\n}\n/** Creates a new Query for a query that matches all documents at `path` */\nfunction newQueryForPath(path) {\n  return new QueryImpl(path);\n}\n/**\n * Helper to convert a collection group query into a collection query at a\n * specific path. This is used when executing collection group queries, since\n * we have to split the query into a set of collection queries at multiple\n * paths.\n */\nfunction asCollectionQueryAtPath(query, path) {\n  return new QueryImpl(path, /*collectionGroup=*/null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\n/**\n * Returns true if this query does not specify any query constraints that\n * could remove results.\n */\nfunction queryMatchesAllDocuments(query) {\n  return query.filters.length === 0 && query.limit === null && query.startAt == null && query.endAt == null && (query.explicitOrderBy.length === 0 || query.explicitOrderBy.length === 1 && query.explicitOrderBy[0].field.isKeyField());\n}\n// Returns the sorted set of inequality filter fields used in this query.\nfunction getInequalityFilterFields(query) {\n  let result = new SortedSet(FieldPath$1.comparator);\n  query.filters.forEach(filter => {\n    const subFilters = filter.getFlattenedFilters();\n    subFilters.forEach(filter => {\n      if (filter.isInequality()) {\n        result = result.add(filter.field);\n      }\n    });\n  });\n  return result;\n}\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\nfunction newQueryForCollectionGroup(collectionId) {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n/**\n * Returns whether the query matches a single document by path (rather than a\n * collection).\n */\nfunction isDocumentQuery$1(query) {\n  return DocumentKey.isDocumentKey(query.path) && query.collectionGroup === null && query.filters.length === 0;\n}\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction isCollectionGroupQuery(query) {\n  return query.collectionGroup !== null;\n}\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */\nfunction queryNormalizedOrderBy(query) {\n  const queryImpl = debugCast(query);\n  if (queryImpl.memoizedNormalizedOrderBy === null) {\n    queryImpl.memoizedNormalizedOrderBy = [];\n    const fieldsNormalized = new Set();\n    // Any explicit order by fields should be added as is.\n    for (const orderBy of queryImpl.explicitOrderBy) {\n      queryImpl.memoizedNormalizedOrderBy.push(orderBy);\n      fieldsNormalized.add(orderBy.field.canonicalString());\n    }\n    // The order of the implicit ordering always matches the last explicit order by.\n    const lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n    // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n    // order. When there are multiple inequality filters on the same field, the field should be added\n    // only once.\n    // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n    // field to be sorted last.\n    const inequalityFields = getInequalityFilterFields(queryImpl);\n    inequalityFields.forEach(field => {\n      if (!fieldsNormalized.has(field.canonicalString()) && !field.isKeyField()) {\n        queryImpl.memoizedNormalizedOrderBy.push(new OrderBy(field, lastDirection));\n      }\n    });\n    // Add the document key field to the last if it is not explicitly ordered.\n    if (!fieldsNormalized.has(FieldPath$1.keyField().canonicalString())) {\n      queryImpl.memoizedNormalizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));\n    }\n  }\n  return queryImpl.memoizedNormalizedOrderBy;\n}\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */\nfunction queryToTarget(query) {\n  const queryImpl = debugCast(query);\n  if (!queryImpl.memoizedTarget) {\n    queryImpl.memoizedTarget = _queryToTarget(queryImpl, queryNormalizedOrderBy(query));\n  }\n  return queryImpl.memoizedTarget;\n}\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */\nfunction queryToAggregateTarget(query) {\n  const queryImpl = debugCast(query);\n  if (!queryImpl.memoizedAggregateTarget) {\n    // Do not include implicit order-bys for aggregate queries.\n    queryImpl.memoizedAggregateTarget = _queryToTarget(queryImpl, query.explicitOrderBy);\n  }\n  return queryImpl.memoizedAggregateTarget;\n}\nfunction _queryToTarget(queryImpl, orderBys) {\n  if (queryImpl.limitType === \"F\" /* LimitType.First */) {\n    return newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);\n  } else {\n    // Flip the orderBy directions since we want the last results\n    orderBys = orderBys.map(orderBy => {\n      const dir = orderBy.dir === \"desc\" /* Direction.DESCENDING */ ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n      return new OrderBy(orderBy.field, dir);\n    });\n    // We need to swap the cursors to match the now-flipped query ordering.\n    const startAt = queryImpl.endAt ? new Bound(queryImpl.endAt.position, queryImpl.endAt.inclusive) : null;\n    const endAt = queryImpl.startAt ? new Bound(queryImpl.startAt.position, queryImpl.startAt.inclusive) : null;\n    // Now return as a LimitType.First query.\n    return newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt, endAt);\n  }\n}\nfunction queryWithAddedFilter(query, filter) {\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);\n}\nfunction queryWithAddedOrderBy(query, orderBy) {\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\nfunction queryWithLimit(query, limit, limitType) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);\n}\nfunction queryWithStartAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);\n}\nfunction queryWithEndAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);\n}\nfunction queryEquals(left, right) {\n  return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;\n}\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nfunction canonifyQuery(query) {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\nfunction stringifyQuery(query) {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${query.limitType})`;\n}\n/** Returns whether `doc` matches the constraints of `query`. */\nfunction queryMatches(query, doc) {\n  return doc.isFoundDocument() && queryMatchesPathAndCollectionGroup(query, doc) && queryMatchesOrderBy(query, doc) && queryMatchesFilters(query, doc) && queryMatchesBounds(query, doc);\n}\nfunction queryMatchesPathAndCollectionGroup(query, doc) {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return doc.key.hasCollectionId(query.collectionGroup) && query.path.isPrefixOf(docPath);\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n/**\n * A document must have a value for every ordering clause in order to show up\n * in the results.\n */\nfunction queryMatchesOrderBy(query, doc) {\n  // We must use `queryNormalizedOrderBy()` to get the list of all orderBys (both implicit and explicit).\n  // Note that for OR queries, orderBy applies to all disjunction terms and implicit orderBys must\n  // be taken into account. For example, the query \"a > 1 || b==1\" has an implicit \"orderBy a\" due\n  // to the inequality, and is evaluated as \"a > 1 orderBy a || b==1 orderBy a\".\n  // A document with content of {b:1} matches the filters, but does not match the orderBy because\n  // it's missing the field 'a'.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    // order-by key always matches\n    if (!orderBy.field.isKeyField() && doc.data.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction queryMatchesFilters(query, doc) {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query, doc) {\n  if (query.startAt && !boundSortsBeforeDocument(query.startAt, queryNormalizedOrderBy(query), doc)) {\n    return false;\n  }\n  if (query.endAt && !boundSortsAfterDocument(query.endAt, queryNormalizedOrderBy(query), doc)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Returns the collection group that this query targets.\n *\n * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab\n * synchronization for query results.\n */\nfunction queryCollectionGroup(query) {\n  return query.collectionGroup || (query.path.length % 2 === 1 ? query.path.lastSegment() : query.path.get(query.path.length - 2));\n}\n/**\n * Returns a new comparator function that can be used to compare two documents\n * based on the Query's ordering constraint.\n */\nfunction newQueryComparator(query) {\n  return (d1, d2) => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryNormalizedOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    return 0;\n  };\n}\nfunction compareDocs(orderBy, d1, d2) {\n  const comparison = orderBy.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case \"asc\" /* Direction.ASCENDING */:\n      return comparison;\n    case \"desc\" /* Direction.DESCENDING */:\n      return -1 * comparison;\n    default:\n      return fail();\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A map implementation that uses objects as keys. Objects must have an\n * associated equals function and must be immutable. Entries in the map are\n * stored together with the key being produced from the mapKeyFn. This map\n * automatically handles collisions of keys.\n */\nclass ObjectMap {\n  constructor(mapKeyFn, equalsFn) {\n    this.mapKeyFn = mapKeyFn;\n    this.equalsFn = equalsFn;\n    /**\n     * The inner map for a key/value pair. Due to the possibility of collisions we\n     * keep a list of entries that we do a linear search through to find an actual\n     * match. Note that collisions should be rare, so we still expect near\n     * constant time lookups in practice.\n     */\n    this.inner = {};\n    /** The number of entries stored in the map */\n    this.innerSize = 0;\n  }\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n  has(key) {\n    return this.get(key) !== undefined;\n  }\n  /** Put this key and value in the map. */\n  set(key, value) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      this.innerSize++;\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        // This is updating an existing entry and does not increase `innerSize`.\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n    this.innerSize++;\n  }\n  /**\n   * Remove this key from the map. Returns a boolean if anything was deleted.\n   */\n  delete(key) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        this.innerSize--;\n        return true;\n      }\n    }\n    return false;\n  }\n  forEach(fn) {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n  isEmpty() {\n    return isEmpty(this.inner);\n  }\n  size() {\n    return this.innerSize;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nfunction mutableDocumentMap() {\n  return EMPTY_MUTABLE_DOCUMENT_MAP;\n}\nconst EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nfunction documentMap(...docs) {\n  let map = EMPTY_DOCUMENT_MAP;\n  for (const doc of docs) {\n    map = map.insert(doc.key, doc);\n  }\n  return map;\n}\nfunction newOverlayedDocumentMap() {\n  return newDocumentKeyMap();\n}\nfunction convertOverlayedDocumentMapToDocumentMap(collection) {\n  let documents = EMPTY_DOCUMENT_MAP;\n  collection.forEach((k, v) => documents = documents.insert(k, v.overlayedDocument));\n  return documents;\n}\nfunction newOverlayMap() {\n  return newDocumentKeyMap();\n}\nfunction newMutationMap() {\n  return newDocumentKeyMap();\n}\nfunction newDocumentKeyMap() {\n  return new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n}\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nfunction documentVersionMap() {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nfunction documentKeySet(...keys) {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\nconst EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);\nfunction targetIdSet() {\n  return EMPTY_TARGET_ID_SET;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\nfunction toDouble(serializer, value) {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return {\n        doubleValue: 'NaN'\n      };\n    } else if (value === Infinity) {\n      return {\n        doubleValue: 'Infinity'\n      };\n    } else if (value === -Infinity) {\n      return {\n        doubleValue: '-Infinity'\n      };\n    }\n  }\n  return {\n    doubleValue: isNegativeZero(value) ? '-0' : value\n  };\n}\n/**\n * Returns an IntegerValue for `value`.\n */\nfunction toInteger(value) {\n  return {\n    integerValue: '' + value\n  };\n}\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(serializer, value) {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */\nclass TransformOperation {\n  constructor() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = undefined;\n  }\n}\n/**\n * Computes the local transform result against the provided `previousValue`,\n * optionally using the provided localWriteTime.\n */\nfunction applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp$1(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);\n  }\n}\n/**\n * Computes a final transform result after the transform has been acknowledged\n * by the server, potentially using the server-provided transformResult.\n */\nfunction applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n  return transformResult;\n}\n/**\n * If this transform operation is not idempotent, returns the base value to\n * persist for this transform. If a base value is returned, the transform\n * operation is always applied to this base value, even if document has\n * already been updated.\n *\n * Base values provide consistent behavior for non-idempotent transforms and\n * allow us to return the same latency-compensated value even if the backend\n * has already applied the transform operation. The base value is null for\n * idempotent transforms, as they can be re-played even if the backend has\n * already applied them.\n *\n * @returns a base value to store along with the mutation, or null for\n * idempotent transforms.\n */\nfunction computeTransformOperationBaseValue(transform, previousValue) {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue : {\n      integerValue: 0\n    };\n  }\n  return null;\n}\nfunction transformOperationEquals(left, right) {\n  if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {\n    return valueEquals(left.operand, right.operand);\n  }\n  return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;\n}\n/** Transforms a value into a server-generated timestamp. */\nclass ServerTimestampTransform extends TransformOperation {}\n/** Transforms an array value via a union operation. */\nclass ArrayUnionTransformOperation extends TransformOperation {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n}\nfunction applyArrayUnionTransformOperation(transform, previousValue) {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/** Transforms an array value via a remove operation. */\nclass ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n}\nfunction applyArrayRemoveTransformOperation(transform, previousValue) {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nclass NumericIncrementTransformOperation extends TransformOperation {\n  constructor(serializer, operand) {\n    super();\n    this.serializer = serializer;\n    this.operand = operand;\n  }\n}\nfunction applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(transform, previousValue);\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\nfunction asNumber(value) {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\nfunction coercedFieldValuesArray(value) {\n  return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */\nclass FieldTransform {\n  constructor(field, transform) {\n    this.field = field;\n    this.transform = transform;\n  }\n}\nfunction fieldTransformEquals(left, right) {\n  return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);\n}\nfunction fieldTransformsAreEqual(left, right) {\n  if (left === undefined && right === undefined) {\n    return true;\n  }\n  if (left && right) {\n    return arrayEquals(left, right, (l, r) => fieldTransformEquals(l, r));\n  }\n  return false;\n}\n/** The result of successfully applying a mutation to the backend. */\nclass MutationResult {\n  constructor(\n  /**\n   * The version at which the mutation was committed:\n   *\n   * - For most operations, this is the updateTime in the WriteResult.\n   * - For deletes, the commitTime of the WriteResponse (because deletes are\n   *   not stored and have no updateTime).\n   *\n   * Note that these versions can be different: No-op writes will not change\n   * the updateTime even though the commitTime advances.\n   */\n  version,\n  /**\n   * The resulting fields returned from the backend after a mutation\n   * containing field transforms has been committed. Contains one FieldValue\n   * for each FieldTransform that was in the mutation.\n   *\n   * Will be empty if the mutation did not contain any field transforms.\n   */\n  transformResults) {\n    this.version = version;\n    this.transformResults = transformResults;\n  }\n}\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nclass Precondition {\n  constructor(updateTime, exists) {\n    this.updateTime = updateTime;\n    this.exists = exists;\n  }\n  /** Creates a new empty Precondition. */\n  static none() {\n    return new Precondition();\n  }\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists) {\n    return new Precondition(undefined, exists);\n  }\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version) {\n    return new Precondition(version);\n  }\n  /** Returns whether this Precondition is empty. */\n  get isNone() {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n  isEqual(other) {\n    return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);\n  }\n}\n/** Returns true if the preconditions is valid for the given document. */\nfunction preconditionIsValidForDocument(precondition, document) {\n  if (precondition.updateTime !== undefined) {\n    return document.isFoundDocument() && document.version.isEqual(precondition.updateTime);\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === document.isFoundDocument();\n  } else {\n    return true;\n  }\n}\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\nclass Mutation {}\n/**\n * A utility method to calculate a `Mutation` representing the overlay from the\n * final state of the document, and a `FieldMask` representing the fields that\n * are mutated by the local mutations.\n */\nfunction calculateOverlayMutation(doc, mask) {\n  if (!doc.hasLocalMutations || mask && mask.fields.length === 0) {\n    return null;\n  }\n  // mask is null when sets or deletes are applied to the current document.\n  if (mask === null) {\n    if (doc.isNoDocument()) {\n      return new DeleteMutation(doc.key, Precondition.none());\n    } else {\n      return new SetMutation(doc.key, doc.data, Precondition.none());\n    }\n  } else {\n    const docValue = doc.data;\n    const patchValue = ObjectValue.empty();\n    let maskSet = new SortedSet(FieldPath$1.comparator);\n    for (let path of mask.fields) {\n      if (!maskSet.has(path)) {\n        let value = docValue.field(path);\n        // If we are deleting a nested field, we take the immediate parent as\n        // the mask used to construct the resulting mutation.\n        // Justification: Nested fields can create parent fields implicitly. If\n        // only a leaf entry is deleted in later mutations, the parent field\n        // should still remain, but we may have lost this information.\n        // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).\n        // This leaves the final result (foo, {}). Despite the fact that `doc`\n        // has the correct result, `foo` is not in `mask`, and the resulting\n        // mutation would miss `foo`.\n        if (value === null && path.length > 1) {\n          path = path.popLast();\n          value = docValue.field(path);\n        }\n        if (value === null) {\n          patchValue.delete(path);\n        } else {\n          patchValue.set(path, value);\n        }\n        maskSet = maskSet.add(path);\n      }\n    }\n    return new PatchMutation(doc.key, patchValue, new FieldMask(maskSet.toArray()), Precondition.none());\n  }\n}\n/**\n * Applies this mutation to the given document for the purposes of computing a\n * new remote document. If the input document doesn't match the expected state\n * (e.g. it is invalid or outdated), the document type may transition to\n * unknown.\n *\n * @param mutation - The mutation to apply.\n * @param document - The document to mutate. The input document can be an\n *     invalid document if the client has no knowledge of the pre-mutation state\n *     of the document.\n * @param mutationResult - The result of applying the mutation from the backend.\n */\nfunction mutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  if (mutation instanceof SetMutation) {\n    setMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    patchMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else {\n    deleteMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  }\n}\n/**\n * Applies this mutation to the given document for the purposes of computing\n * the new local view of a document. If the input document doesn't match the\n * expected state, the document is not modified.\n *\n * @param mutation - The mutation to apply.\n * @param document - The document to mutate. The input document can be an\n *     invalid document if the client has no knowledge of the pre-mutation state\n *     of the document.\n * @param previousMask - The fields that have been updated before applying this mutation.\n * @param localWriteTime - A timestamp indicating the local write time of the\n *     batch this mutation is a part of.\n * @returns A `FieldMask` representing the fields that are changed by applying this mutation.\n */\nfunction mutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (mutation instanceof SetMutation) {\n    return setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\n  } else if (mutation instanceof PatchMutation) {\n    return patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\n  } else {\n    return deleteMutationApplyToLocalView(mutation, document, previousMask);\n  }\n}\n/**\n * If this mutation is not idempotent, returns the base value to persist with\n * this mutation. If a base value is returned, the mutation is always applied\n * to this base value, even if document has already been updated.\n *\n * The base value is a sparse object that consists of only the document\n * fields for which this mutation contains a non-idempotent transformation\n * (e.g. a numeric increment). The provided value guarantees consistent\n * behavior for non-idempotent transforms and allow us to return the same\n * latency-compensated value even if the backend has already applied the\n * mutation. The base value is null for idempotent mutations, as they can be\n * re-played even if the backend has already applied them.\n *\n * @returns a base value to store along with the mutation, or null for\n * idempotent mutations.\n */\nfunction mutationExtractBaseValue(mutation, document) {\n  let baseObject = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue = document.data.field(fieldTransform.field);\n    const coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);\n    if (coercedValue != null) {\n      if (baseObject === null) {\n        baseObject = ObjectValue.empty();\n      }\n      baseObject.set(fieldTransform.field, coercedValue);\n    }\n  }\n  return baseObject ? baseObject : null;\n}\nfunction mutationEquals(left, right) {\n  if (left.type !== right.type) {\n    return false;\n  }\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n  if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\n    return false;\n  }\n  if (left.type === 0 /* MutationType.Set */) {\n    return left.value.isEqual(right.value);\n  }\n  if (left.type === 1 /* MutationType.Patch */) {\n    return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);\n  }\n  return true;\n}\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nclass SetMutation extends Mutation {\n  constructor(key, value, precondition, fieldTransforms = []) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.precondition = precondition;\n    this.fieldTransforms = fieldTransforms;\n    this.type = 0 /* MutationType.Set */;\n  }\n  getFieldMask() {\n    return null;\n  }\n}\nfunction setMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike setMutationApplyToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  const newData = mutation.value.clone();\n  const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\nfunction setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // The mutation failed to apply (e.g. a document ID created with add()\n    // caused a name collision).\n    return previousMask;\n  }\n  const newData = mutation.value.clone();\n  const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(document.version, newData).setHasLocalMutations();\n  return null; // SetMutation overwrites all fields.\n}\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nclass PatchMutation extends Mutation {\n  constructor(key, data, fieldMask, precondition, fieldTransforms = []) {\n    super();\n    this.key = key;\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.precondition = precondition;\n    this.fieldTransforms = fieldTransforms;\n    this.type = 1 /* MutationType.Patch */;\n  }\n  getFieldMask() {\n    return this.fieldMask;\n  }\n}\nfunction patchMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // Since the mutation was not rejected, we know that the precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and convert to an UnknownDocument with a\n    // known updateTime.\n    document.convertToUnknownDocument(mutationResult.version);\n    return;\n  }\n  const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\nfunction patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    return previousMask;\n  }\n  const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(document.version, newData).setHasLocalMutations();\n  if (previousMask === null) {\n    return null;\n  }\n  return previousMask.unionWith(mutation.fieldMask.fields).unionWith(mutation.fieldTransforms.map(transform => transform.field));\n}\n/**\n * Returns a FieldPath/Value map with the content of the PatchMutation.\n */\nfunction getPatch(mutation) {\n  const result = new Map();\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      result.set(fieldPath, newValue);\n    }\n  });\n  return result;\n}\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use after a mutation\n * containing transforms has been acknowledged by the server.\n *\n * @param fieldTransforms - The field transforms to apply the result to.\n * @param mutableDocument - The current state of the document after applying all\n * previous mutations.\n * @param serverTransformResults - The transform results received by the server.\n * @returns The transform results list.\n */\nfunction serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults) {\n  const transformResults = new Map();\n  hardAssert(fieldTransforms.length === serverTransformResults.length);\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults[i]));\n  }\n  return transformResults;\n}\n/**\n * Creates a list of \"transform results\" (a transform result is a field value\n * representing the result of applying a transform) for use when applying a\n * transform locally.\n *\n * @param fieldTransforms - The field transforms to apply the result to.\n * @param localWriteTime - The local time of the mutation (used to\n *     generate ServerTimestampValues).\n * @param mutableDocument - The document to apply transforms on.\n * @returns The transform results list.\n */\nfunction localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {\n  const transformResults = new Map();\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));\n  }\n  return transformResults;\n}\n/** A mutation that deletes the document at the given key. */\nclass DeleteMutation extends Mutation {\n  constructor(key, precondition) {\n    super();\n    this.key = key;\n    this.precondition = precondition;\n    this.type = 2 /* MutationType.Delete */;\n    this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\nfunction deleteMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n  document.convertToNoDocument(mutationResult.version).setHasCommittedMutations();\n}\nfunction deleteMutationApplyToLocalView(mutation, document, previousMask) {\n  if (preconditionIsValidForDocument(mutation.precondition, document)) {\n    document.convertToNoDocument(document.version).setHasLocalMutations();\n    return null;\n  }\n  return previousMask;\n}\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nclass VerifyMutation extends Mutation {\n  constructor(key, precondition) {\n    super();\n    this.key = key;\n    this.precondition = precondition;\n    this.type = 3 /* MutationType.Verify */;\n    this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A batch of mutations that will be sent as one unit to the backend.\n */\nclass MutationBatch {\n  /**\n   * @param batchId - The unique ID of this mutation batch.\n   * @param localWriteTime - The original write time of this mutation.\n   * @param baseMutations - Mutations that are used to populate the base\n   * values when this mutation is applied locally. This can be used to locally\n   * overwrite values that are persisted in the remote document cache. Base\n   * mutations are never sent to the backend.\n   * @param mutations - The user-provided mutations in this mutation batch.\n   * User-provided mutations are applied both locally and remotely on the\n   * backend.\n   */\n  constructor(batchId, localWriteTime, baseMutations, mutations) {\n    this.batchId = batchId;\n    this.localWriteTime = localWriteTime;\n    this.baseMutations = baseMutations;\n    this.mutations = mutations;\n  }\n  /**\n   * Applies all the mutations in this MutationBatch to the specified document\n   * to compute the state of the remote document\n   *\n   * @param document - The document to apply mutations to.\n   * @param batchResult - The result of applying the MutationBatch to the\n   * backend.\n   */\n  applyToRemoteDocument(document, batchResult) {\n    const mutationResults = batchResult.mutationResults;\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(document.key)) {\n        const mutationResult = mutationResults[i];\n        mutationApplyToRemoteDocument(mutation, document, mutationResult);\n      }\n    }\n  }\n  /**\n   * Computes the local view of a document given all the mutations in this\n   * batch.\n   *\n   * @param document - The document to apply mutations to.\n   * @param mutatedFields - Fields that have been updated before applying this mutation batch.\n   * @returns A `FieldMask` representing all the fields that are mutated.\n   */\n  applyToLocalView(document, mutatedFields) {\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(document.key)) {\n        mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\n      }\n    }\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(document.key)) {\n        mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\n      }\n    }\n    return mutatedFields;\n  }\n  /**\n   * Computes the local view for all provided documents given the mutations in\n   * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to\n   * replace all the mutation applications.\n   */\n  applyToLocalDocumentSet(documentMap, documentsWithoutRemoteVersion) {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    const overlays = newMutationMap();\n    this.mutations.forEach(m => {\n      const overlayedDocument = documentMap.get(m.key);\n      // TODO(mutabledocuments): This method should take a MutableDocumentMap\n      // and we should remove this cast.\n      const mutableDocument = overlayedDocument.overlayedDocument;\n      let mutatedFields = this.applyToLocalView(mutableDocument, overlayedDocument.mutatedFields);\n      // Set mutatedFields to null if the document is only from local mutations.\n      // This creates a Set or Delete mutation, instead of trying to create a\n      // patch mutation as the overlay.\n      mutatedFields = documentsWithoutRemoteVersion.has(m.key) ? null : mutatedFields;\n      const overlay = calculateOverlayMutation(mutableDocument, mutatedFields);\n      if (overlay !== null) {\n        overlays.set(m.key, overlay);\n      }\n      if (!mutableDocument.isValidDocument()) {\n        mutableDocument.convertToNoDocument(SnapshotVersion.min());\n      }\n    });\n    return overlays;\n  }\n  keys() {\n    return this.mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\n  }\n  isEqual(other) {\n    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, (l, r) => mutationEquals(l, r)) && arrayEquals(this.baseMutations, other.baseMutations, (l, r) => mutationEquals(l, r));\n  }\n}\n/** The result of applying a mutation batch to the backend. */\nclass MutationBatchResult {\n  constructor(batch, commitVersion, mutationResults,\n  /**\n   * A pre-computed mapping from each mutated document to the resulting\n   * version.\n   */\n  docVersions) {\n    this.batch = batch;\n    this.commitVersion = commitVersion;\n    this.mutationResults = mutationResults;\n    this.docVersions = docVersions;\n  }\n  /**\n   * Creates a new MutationBatchResult for the given batch and results. There\n   * must be one result for each mutation in the batch. This static factory\n   * caches a document=&gt;version mapping (docVersions).\n   */\n  static from(batch, commitVersion, results) {\n    hardAssert(batch.mutations.length === results.length);\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Representation of an overlay computed by Firestore.\n *\n * Holds information about a mutation and the largest batch id in Firestore when\n * the mutation was created.\n */\nclass Overlay {\n  constructor(largestBatchId, mutation) {\n    this.largestBatchId = largestBatchId;\n    this.mutation = mutation;\n  }\n  getKey() {\n    return this.mutation.key;\n  }\n  isEqual(other) {\n    return other !== null && this.mutation === other.mutation;\n  }\n  toString() {\n    return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistenceFilter {\n  constructor(count, unchangedNames) {\n    this.count = count;\n    this.unchangedNames = unchangedNames;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar RpcCode;\n(function (RpcCode) {\n  RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n  RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n  RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\nfunction isPermanentError(code) {\n  switch (code) {\n    case Code.OK:\n      return fail();\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependent on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail();\n  }\n}\n/**\n * Determines whether an error code represents a permanent error when received\n * in response to a write operation.\n *\n * Write operations must be handled specially because as of b/119437764, ABORTED\n * errors on the write stream should be retried too (even though ABORTED errors\n * are not generally retryable).\n *\n * Note that during the initial handshake on the write stream an ABORTED error\n * signals that we should discard our stream token (i.e. it is permanent). This\n * means a handshake error should be classified with isPermanentError, above.\n */\nfunction isPermanentWriteError(code) {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n/**\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\n * are not the same as HTTP status codes.\n *\n * @returns The Code equivalent to the given GRPC status code. Fails if there\n *     is no match.\n */\nfunction mapCodeFromRpcCode(code) {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail();\n  }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass Base64DecodeError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'Base64DecodeError';\n  }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The global, singleton instance of TestingHooksSpi.\n *\n * This variable will be `null` in all cases _except_ when running from\n * integration tests that have registered callbacks to be notified of events\n * that happen during the test execution.\n */\nlet testingHooksSpi = null;\n/**\n * Sets the value of the `testingHooksSpi` object.\n * @param instance the instance to set.\n */\nfunction setTestingHooksSpi(instance) {\n  if (testingHooksSpi) {\n    throw new Error('a TestingHooksSpi instance is already set');\n  }\n  testingHooksSpi = instance;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An instance of the Platform's 'TextEncoder' implementation.\n */\nfunction newTextEncoder() {\n  return new TextEncoder();\n}\n/**\n * An instance of the Platform's 'TextDecoder' implementation.\n */\nfunction newTextDecoder() {\n  return new TextDecoder('utf-8');\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst MAX_64_BIT_UNSIGNED_INTEGER = new Integer([0xffffffff, 0xffffffff], 0);\n// Hash a string using md5 hashing algorithm.\nfunction getMd5HashValue(value) {\n  const encodedValue = newTextEncoder().encode(value);\n  const md5 = new Md5();\n  md5.update(encodedValue);\n  return new Uint8Array(md5.digest());\n}\n// Interpret the 16 bytes array as two 64-bit unsigned integers, encoded using\n// 2’s complement using little endian.\nfunction get64BitUints(Bytes) {\n  const dataView = new DataView(Bytes.buffer);\n  const chunk1 = dataView.getUint32(0, /* littleEndian= */true);\n  const chunk2 = dataView.getUint32(4, /* littleEndian= */true);\n  const chunk3 = dataView.getUint32(8, /* littleEndian= */true);\n  const chunk4 = dataView.getUint32(12, /* littleEndian= */true);\n  const integer1 = new Integer([chunk1, chunk2], 0);\n  const integer2 = new Integer([chunk3, chunk4], 0);\n  return [integer1, integer2];\n}\nclass BloomFilter {\n  constructor(bitmap, padding, hashCount) {\n    this.bitmap = bitmap;\n    this.padding = padding;\n    this.hashCount = hashCount;\n    if (padding < 0 || padding >= 8) {\n      throw new BloomFilterError(`Invalid padding: ${padding}`);\n    }\n    if (hashCount < 0) {\n      throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\n    }\n    if (bitmap.length > 0 && this.hashCount === 0) {\n      // Only empty bloom filter can have 0 hash count.\n      throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\n    }\n    if (bitmap.length === 0 && padding !== 0) {\n      // Empty bloom filter should have 0 padding.\n      throw new BloomFilterError(`Invalid padding when bitmap length is 0: ${padding}`);\n    }\n    this.bitCount = bitmap.length * 8 - padding;\n    // Set the bit count in Integer to avoid repetition in mightContain().\n    this.bitCountInInteger = Integer.fromNumber(this.bitCount);\n  }\n  // Calculate the ith hash value based on the hashed 64bit integers,\n  // and calculate its corresponding bit index in the bitmap to be checked.\n  getBitIndex(num1, num2, hashIndex) {\n    // Calculate hashed value h(i) = h1 + (i * h2).\n    let hashValue = num1.add(num2.multiply(Integer.fromNumber(hashIndex)));\n    // Wrap if hash value overflow 64bit.\n    if (hashValue.compare(MAX_64_BIT_UNSIGNED_INTEGER) === 1) {\n      hashValue = new Integer([hashValue.getBits(0), hashValue.getBits(1)], 0);\n    }\n    return hashValue.modulo(this.bitCountInInteger).toNumber();\n  }\n  // Return whether the bit on the given index in the bitmap is set to 1.\n  isBitSet(index) {\n    // To retrieve bit n, calculate: (bitmap[n / 8] & (0x01 << (n % 8))).\n    const byte = this.bitmap[Math.floor(index / 8)];\n    const offset = index % 8;\n    return (byte & 0x01 << offset) !== 0;\n  }\n  mightContain(value) {\n    // Empty bitmap should always return false on membership check.\n    if (this.bitCount === 0) {\n      return false;\n    }\n    const md5HashedValue = getMd5HashValue(value);\n    const [hash1, hash2] = get64BitUints(md5HashedValue);\n    for (let i = 0; i < this.hashCount; i++) {\n      const index = this.getBitIndex(hash1, hash2, i);\n      if (!this.isBitSet(index)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** Create bloom filter for testing purposes only. */\n  static create(bitCount, hashCount, contains) {\n    const padding = bitCount % 8 === 0 ? 0 : 8 - bitCount % 8;\n    const bitmap = new Uint8Array(Math.ceil(bitCount / 8));\n    const bloomFilter = new BloomFilter(bitmap, padding, hashCount);\n    contains.forEach(item => bloomFilter.insert(item));\n    return bloomFilter;\n  }\n  insert(value) {\n    if (this.bitCount === 0) {\n      return;\n    }\n    const md5HashedValue = getMd5HashValue(value);\n    const [hash1, hash2] = get64BitUints(md5HashedValue);\n    for (let i = 0; i < this.hashCount; i++) {\n      const index = this.getBitIndex(hash1, hash2, i);\n      this.setBit(index);\n    }\n  }\n  setBit(index) {\n    const indexOfByte = Math.floor(index / 8);\n    const offset = index % 8;\n    this.bitmap[indexOfByte] |= 0x01 << offset;\n  }\n}\nclass BloomFilterError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'BloomFilterError';\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An event from the RemoteStore. It is split into targetChanges (changes to the\n * state or the set of documents in our watched targets) and documentUpdates\n * (changes to the actual documents).\n */\nclass RemoteEvent {\n  constructor(\n  /**\n   * The snapshot version this event brings us up to, or MIN if not set.\n   */\n  snapshotVersion,\n  /**\n   * A map from target to changes to the target. See TargetChange.\n   */\n  targetChanges,\n  /**\n   * A map of targets that is known to be inconsistent, and the purpose for\n   * re-listening. Listens for these targets should be re-established without\n   * resume tokens.\n   */\n  targetMismatches,\n  /**\n   * A set of which documents have changed or been deleted, along with the\n   * doc's new values (if not deleted).\n   */\n  documentUpdates,\n  /**\n   * A set of which document updates are due only to limbo resolution targets.\n   */\n  resolvedLimboDocuments) {\n    this.snapshotVersion = snapshotVersion;\n    this.targetChanges = targetChanges;\n    this.targetMismatches = targetMismatches;\n    this.documentUpdates = documentUpdates;\n    this.resolvedLimboDocuments = resolvedLimboDocuments;\n  }\n  /**\n   * HACK: Views require RemoteEvents in order to determine whether the view is\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\n   * used to create a synthesized RemoteEvent that can be used to apply a\n   * CURRENT status change to a View, for queries executed in a different tab.\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(targetId, current, resumeToken) {\n    const targetChanges = new Map();\n    targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken));\n    return new RemoteEvent(SnapshotVersion.min(), targetChanges, new SortedMap(primitiveComparator), mutableDocumentMap(), documentKeySet());\n  }\n}\n/**\n * A TargetChange specifies the set of changes for a specific target as part of\n * a RemoteEvent. These changes track which documents are added, modified or\n * removed, as well as the target's resume token and whether the target is\n * marked CURRENT.\n * The actual changes *to* documents are not part of the TargetChange since\n * documents may be part of multiple targets.\n */\nclass TargetChange {\n  constructor(\n  /**\n   * An opaque, server-assigned token that allows watching a query to be resumed\n   * after disconnecting without retransmitting all the data that matches the\n   * query. The resume token essentially identifies a point in time from which\n   * the server should resume sending results.\n   */\n  resumeToken,\n  /**\n   * The \"current\" (synced) status of this target. Note that \"current\"\n   * has special meaning in the RPC protocol that implies that a target is\n   * both up-to-date and consistent with the rest of the watch stream.\n   */\n  current,\n  /**\n   * The set of documents that were newly assigned to this target as part of\n   * this remote event.\n   */\n  addedDocuments,\n  /**\n   * The set of documents that were already assigned to this target but received\n   * an update during this remote event.\n   */\n  modifiedDocuments,\n  /**\n   * The set of documents that were removed from this target as part of this\n   * remote event.\n   */\n  removedDocuments) {\n    this.resumeToken = resumeToken;\n    this.current = current;\n    this.addedDocuments = addedDocuments;\n    this.modifiedDocuments = modifiedDocuments;\n    this.removedDocuments = removedDocuments;\n  }\n  /**\n   * This method is used to create a synthesized TargetChanges that can be used to\n   * apply a CURRENT status change to a View (for queries executed in a different\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\n   */\n  static createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken) {\n    return new TargetChange(resumeToken, current, documentKeySet(), documentKeySet(), documentKeySet());\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a changed document and a list of target ids to which this change\n * applies.\n *\n * If document has been deleted NoDocument will be provided.\n */\nclass DocumentWatchChange {\n  constructor(/** The new document applies to all of these targets. */\n  updatedTargetIds, /** The new document is removed from all of these targets. */\n  removedTargetIds, /** The key of the document for this change. */\n  key,\n  /**\n   * The new document or NoDocument if it was deleted. Is null if the\n   * document went out of view without the server sending a new document.\n   */\n  newDoc) {\n    this.updatedTargetIds = updatedTargetIds;\n    this.removedTargetIds = removedTargetIds;\n    this.key = key;\n    this.newDoc = newDoc;\n  }\n}\nclass ExistenceFilterChange {\n  constructor(targetId, existenceFilter) {\n    this.targetId = targetId;\n    this.existenceFilter = existenceFilter;\n  }\n}\nclass WatchTargetChange {\n  constructor(/** What kind of change occurred to the watch target. */\n  state, /** The target IDs that were added/removed/set. */\n  targetIds,\n  /**\n   * An opaque, server-assigned token that allows watching a target to be\n   * resumed after disconnecting without retransmitting all the data that\n   * matches the target. The resume token essentially identifies a point in\n   * time from which the server should resume sending results.\n   */\n  resumeToken = ByteString.EMPTY_BYTE_STRING, /** An RPC error indicating why the watch failed. */\n  cause = null) {\n    this.state = state;\n    this.targetIds = targetIds;\n    this.resumeToken = resumeToken;\n    this.cause = cause;\n  }\n}\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  constructor() {\n    /**\n     * The number of pending responses (adds or removes) that we are waiting on.\n     * We only consider targets active that have no pending responses.\n     */\n    this.pendingResponses = 0;\n    /**\n     * Keeps track of the document changes since the last raised snapshot.\n     *\n     * These changes are continuously updated as we receive document updates and\n     * always reflect the current set of changes against the last issued snapshot.\n     */\n    this.documentChanges = snapshotChangesMap();\n    /** See public getters for explanations of these fields. */\n    this._resumeToken = ByteString.EMPTY_BYTE_STRING;\n    this._current = false;\n    /**\n     * Whether this target state should be included in the next snapshot. We\n     * initialize to true so that newly-added targets are included in the next\n     * RemoteEvent.\n     */\n    this._hasPendingChanges = true;\n  }\n  /**\n   * Whether this target has been marked 'current'.\n   *\n   * 'Current' has special meaning in the RPC protocol: It implies that the\n   * Watch backend has sent us all changes up to the point at which the target\n   * was added and that the target is consistent with the rest of the watch\n   * stream.\n   */\n  get current() {\n    return this._current;\n  }\n  /** The last resume token sent to us for this target. */\n  get resumeToken() {\n    return this._resumeToken;\n  }\n  /** Whether this target has pending target adds or target removes. */\n  get isPending() {\n    return this.pendingResponses !== 0;\n  }\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges() {\n    return this._hasPendingChanges;\n  }\n  /**\n   * Applies the resume token to the TargetChange, but only when it has a new\n   * value. Empty resumeTokens are discarded.\n   */\n  updateResumeToken(resumeToken) {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n  /**\n   * Creates a target change from the current set of changes.\n   *\n   * To reset the document changes after raising this snapshot, call\n   * `clearPendingChanges()`.\n   */\n  toTargetChange() {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case 0 /* ChangeType.Added */:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case 2 /* ChangeType.Modified */:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case 1 /* ChangeType.Removed */:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail();\n      }\n    });\n    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);\n  }\n  /**\n   * Resets the document changes and sets `hasPendingChanges` to false.\n   */\n  clearPendingChanges() {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n  addDocumentChange(key, changeType) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n  removeDocumentChange(key) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n  recordPendingTargetRequest() {\n    this.pendingResponses += 1;\n  }\n  recordTargetResponse() {\n    this.pendingResponses -= 1;\n    hardAssert(this.pendingResponses >= 0);\n  }\n  markCurrent() {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\nconst LOG_TAG$g = 'WatchChangeAggregator';\n/**\n * A helper class to accumulate watch changes into a RemoteEvent.\n */\nclass WatchChangeAggregator {\n  constructor(metadataProvider) {\n    this.metadataProvider = metadataProvider;\n    /** The internal state of all tracked targets. */\n    this.targetStates = new Map();\n    /** Keeps track of the documents to update since the last raised snapshot. */\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    this.pendingDocumentUpdatesByTarget = documentTargetMap();\n    /** A mapping of document keys to their set of target IDs. */\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    /**\n     * A map of targets with existence filter mismatches. These targets are\n     * known to be inconsistent and their listens needs to be re-established by\n     * RemoteStore.\n     */\n    this.pendingTargetResets = new SortedMap(primitiveComparator);\n  }\n  /**\n   * Processes and adds the DocumentWatchChange to the current set of changes.\n   */\n  handleDocumentChange(docChange) {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else {\n        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n      }\n    }\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange) {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case 0 /* WatchTargetChangeState.NoChange */:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case 1 /* WatchTargetChangeState.Added */:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case 2 /* WatchTargetChangeState.Removed */:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          break;\n        case 3 /* WatchTargetChangeState.Current */:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case 4 /* WatchTargetChangeState.Reset */:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail();\n      }\n    });\n  }\n  /**\n   * Iterates over all targetIds that the watch change applies to: either the\n   * targetIds explicitly listed in the change or the targetIds of all currently\n   * active targets.\n   */\n  forEachTarget(targetChange, fn) {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n  /**\n   * Handles existence filters and synthesizes deletes for filter mismatches.\n   * Targets that are invalidated by filter mismatches are added to\n   * `pendingTargetResets`.\n   */\n  handleExistenceFilter(watchChange) {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (targetIsDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));\n        } else {\n          hardAssert(expectedCount === 1);\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        // Existence filter mismatch. Mark the documents as being in limbo, and\n        // raise a snapshot with `isFromCache:true`.\n        if (currentSize !== expectedCount) {\n          // Apply bloom filter to identify and mark removed documents.\n          const bloomFilter = this.parseBloomFilter(watchChange);\n          const status = bloomFilter ? this.applyBloomFilter(bloomFilter, watchChange, currentSize) : 1 /* BloomFilterApplicationStatus.Skipped */;\n          if (status !== 0 /* BloomFilterApplicationStatus.Success */) {\n            // If bloom filter application fails, we reset the mapping and\n            // trigger re-run of the query.\n            this.resetTarget(targetId);\n            const purpose = status === 2 /* BloomFilterApplicationStatus.FalsePositive */ ? \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */ : \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */;\n            this.pendingTargetResets = this.pendingTargetResets.insert(targetId, purpose);\n          }\n          testingHooksSpi === null || testingHooksSpi === void 0 ? void 0 : testingHooksSpi.notifyOnExistenceFilterMismatch(createExistenceFilterMismatchInfoForTestingHooks(currentSize, watchChange.existenceFilter, this.metadataProvider.getDatabaseId(), bloomFilter, status));\n        }\n      }\n    }\n  }\n  /**\n   * Parse the bloom filter from the \"unchanged_names\" field of an existence\n   * filter.\n   */\n  parseBloomFilter(watchChange) {\n    const unchangedNames = watchChange.existenceFilter.unchangedNames;\n    if (!unchangedNames || !unchangedNames.bits) {\n      return null;\n    }\n    const {\n      bits: {\n        bitmap = '',\n        padding = 0\n      },\n      hashCount = 0\n    } = unchangedNames;\n    let normalizedBitmap;\n    try {\n      normalizedBitmap = normalizeByteString(bitmap).toUint8Array();\n    } catch (err) {\n      if (err instanceof Base64DecodeError) {\n        logWarn('Decoding the base64 bloom filter in existence filter failed (' + err.message + '); ignoring the bloom filter and falling back to full re-query.');\n        return null;\n      } else {\n        throw err;\n      }\n    }\n    let bloomFilter;\n    try {\n      // BloomFilter throws error if the inputs are invalid.\n      bloomFilter = new BloomFilter(normalizedBitmap, padding, hashCount);\n    } catch (err) {\n      if (err instanceof BloomFilterError) {\n        logWarn('BloomFilter error: ', err);\n      } else {\n        logWarn('Applying bloom filter failed: ', err);\n      }\n      return null;\n    }\n    if (bloomFilter.bitCount === 0) {\n      return null;\n    }\n    return bloomFilter;\n  }\n  /**\n   * Apply bloom filter to remove the deleted documents, and return the\n   * application status.\n   */\n  applyBloomFilter(bloomFilter, watchChange, currentCount) {\n    const expectedCount = watchChange.existenceFilter.count;\n    const removedDocumentCount = this.filterRemovedDocuments(bloomFilter, watchChange.targetId);\n    return expectedCount === currentCount - removedDocumentCount ? 0 /* BloomFilterApplicationStatus.Success */ : 2 /* BloomFilterApplicationStatus.FalsePositive */;\n  }\n  /**\n   * Filter out removed documents based on bloom filter membership result and\n   * return number of documents removed.\n   */\n  filterRemovedDocuments(bloomFilter, targetId) {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    let removalCount = 0;\n    existingKeys.forEach(key => {\n      const databaseId = this.metadataProvider.getDatabaseId();\n      const documentPath = `projects/${databaseId.projectId}` + `/databases/${databaseId.database}` + `/documents/${key.path.canonicalString()}`;\n      if (!bloomFilter.mightContain(documentPath)) {\n        this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/null);\n        removalCount++;\n      }\n    });\n    return removalCount;\n  }\n  /**\n   * Converts the currently accumulated state into a remote event at the\n   * provided snapshot version. Resets the accumulated changes before returning.\n   */\n  createRemoteEvent(snapshotVersion) {\n    const targetChanges = new Map();\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && targetIsDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document for this\n          // target. This resolves the limbo state of the document, removing it\n          // from limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (!this.ensureDocumentUpdateByTarget(key).has(targetId) && !this.targetContainsDocument(targetId, key)) {\n            this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));\n          }\n        }\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n    let resolvedLimboDocuments = documentKeySet();\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (targetData && targetData.purpose !== \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n        return true;\n      });\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n    this.pendingDocumentUpdates.forEach((_, doc) => doc.setReadTime(snapshotVersion));\n    const remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    this.pendingDocumentUpdatesByTarget = documentTargetMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedMap(primitiveComparator);\n    return remoteEvent;\n  }\n  /**\n   * Adds the provided document to the internal list of document updates and\n   * its document key to the given target's mapping.\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId, document) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n    const changeType = this.targetContainsDocument(targetId, document.key) ? 2 /* ChangeType.Modified */ : 0 /* ChangeType.Added */;\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);\n    this.pendingDocumentUpdatesByTarget = this.pendingDocumentUpdatesByTarget.insert(document.key, this.ensureDocumentUpdateByTarget(document.key).add(targetId));\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));\n  }\n  /**\n   * Removes the provided document from the target mapping. If the\n   * document no longer matches the target, but the document's state is still\n   * known (e.g. we know that the document was deleted or we received the change\n   * that caused the filter mismatch), the new document can be provided\n   * to update the remote document cache.\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(targetId, key, updatedDocument) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, 1 /* ChangeType.Removed */);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).add(targetId));\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);\n    }\n  }\n  removeTarget(targetId) {\n    this.targetStates.delete(targetId);\n  }\n  /**\n   * Returns the current count of documents in the target. This includes both\n   * the number of documents that the LocalStore considers to be part of the\n   * target as well as any accumulated changes.\n   */\n  getCurrentDocumentCountForTarget(targetId) {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;\n  }\n  /**\n   * Increment the number of acks needed from watch before we can consider the\n   * server to be 'in-sync' with the client's active targets.\n   */\n  recordPendingTargetRequest(targetId) {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n  ensureTargetState(targetId) {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n  ensureDocumentTargetMapping(key) {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n    if (!targetMapping) {\n      targetMapping = new SortedSet(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);\n    }\n    return targetMapping;\n  }\n  ensureDocumentUpdateByTarget(key) {\n    let targetMapping = this.pendingDocumentUpdatesByTarget.get(key);\n    if (!targetMapping) {\n      targetMapping = new SortedSet(primitiveComparator);\n      this.pendingDocumentUpdatesByTarget = this.pendingDocumentUpdatesByTarget.insert(key, targetMapping);\n    }\n    return targetMapping;\n  }\n  /**\n   * Verifies that the user is still interested in this target (by calling\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\n   * from watch.\n   */\n  isActiveTarget(targetId) {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG$g, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n  /**\n   * Returns the TargetData for an active target (i.e. a target that the user\n   * is still interested in that has no outstanding target change requests).\n   */\n  targetDataForActiveTarget(targetId) {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n  /**\n   * Resets the state of a Watch target to its initial state (e.g. sets\n   * 'current' to false, clears the resume token and removes its target mapping\n   * from all documents).\n   */\n  resetTarget(targetId) {\n    this.targetStates.set(targetId, new TargetState());\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/null);\n    });\n  }\n  /**\n   * Returns whether the LocalStore considers the document to be part of the\n   * specified target.\n   */\n  targetContainsDocument(targetId, key) {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\nfunction documentTargetMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nfunction snapshotChangesMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nfunction createExistenceFilterMismatchInfoForTestingHooks(localCacheCount, existenceFilter, databaseId, bloomFilter, bloomFilterStatus) {\n  var _a, _b, _c, _d, _e, _f;\n  const result = {\n    localCacheCount,\n    existenceFilterCount: existenceFilter.count,\n    databaseId: databaseId.database,\n    projectId: databaseId.projectId\n  };\n  const unchangedNames = existenceFilter.unchangedNames;\n  if (unchangedNames) {\n    result.bloomFilter = {\n      applied: bloomFilterStatus === 0 /* BloomFilterApplicationStatus.Success */,\n      hashCount: (_a = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.hashCount) !== null && _a !== void 0 ? _a : 0,\n      bitmapLength: (_d = (_c = (_b = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _b === void 0 ? void 0 : _b.bitmap) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0,\n      padding: (_f = (_e = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _e === void 0 ? void 0 : _e.padding) !== null && _f !== void 0 ? _f : 0,\n      mightContain: value => {\n        var _a;\n        return (_a = bloomFilter === null || bloomFilter === void 0 ? void 0 : bloomFilter.mightContain(value)) !== null && _a !== void 0 ? _a : false;\n      }\n    };\n  }\n  return result;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DIRECTIONS = (() => {\n  const dirs = {};\n  dirs[\"asc\" /* Direction.ASCENDING */] = 'ASCENDING';\n  dirs[\"desc\" /* Direction.DESCENDING */] = 'DESCENDING';\n  return dirs;\n})();\nconst OPERATORS = (() => {\n  const ops = {};\n  ops[\"<\" /* Operator.LESS_THAN */] = 'LESS_THAN';\n  ops[\"<=\" /* Operator.LESS_THAN_OR_EQUAL */] = 'LESS_THAN_OR_EQUAL';\n  ops[\">\" /* Operator.GREATER_THAN */] = 'GREATER_THAN';\n  ops[\">=\" /* Operator.GREATER_THAN_OR_EQUAL */] = 'GREATER_THAN_OR_EQUAL';\n  ops[\"==\" /* Operator.EQUAL */] = 'EQUAL';\n  ops[\"!=\" /* Operator.NOT_EQUAL */] = 'NOT_EQUAL';\n  ops[\"array-contains\" /* Operator.ARRAY_CONTAINS */] = 'ARRAY_CONTAINS';\n  ops[\"in\" /* Operator.IN */] = 'IN';\n  ops[\"not-in\" /* Operator.NOT_IN */] = 'NOT_IN';\n  ops[\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\nconst COMPOSITE_OPERATORS = (() => {\n  const ops = {};\n  ops[\"and\" /* CompositeOperator.AND */] = 'AND';\n  ops[\"or\" /* CompositeOperator.OR */] = 'OR';\n  return ops;\n})();\nfunction assertPresent(value, description) {}\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n  constructor(databaseId, useProto3Json) {\n    this.databaseId = databaseId;\n    this.useProto3Json = useProto3Json;\n  }\n}\nfunction fromRpcStatus(status) {\n  const code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\nfunction toInt32Proto(serializer, val) {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return {\n      value: val\n    };\n  }\n}\n/**\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\n */\nfunction fromInt32Proto(val) {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(serializer, timestamp) {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    };\n  }\n}\nfunction fromTimestamp(date) {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction toBytes(serializer, bytes) {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n/**\n * Returns a ByteString based on the proto string value.\n */\nfunction fromBytes(serializer, value) {\n  if (serializer.useProto3Json) {\n    hardAssert(value === undefined || typeof value === 'string');\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(value === undefined ||\n    // Check if the value is an instance of both Buffer and Uint8Array,\n    // despite the fact that Buffer extends Uint8Array. In some\n    // environments, such as jsdom, the prototype chain of Buffer\n    // does not indicate that it extends Uint8Array.\n    value instanceof Buffer || value instanceof Uint8Array);\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\nfunction toVersion(serializer, version) {\n  return toTimestamp(serializer, version.toTimestamp());\n}\nfunction fromVersion(version) {\n  hardAssert(!!version);\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\nfunction toResourceName(databaseId, path) {\n  return toResourcePath(databaseId, path).canonicalString();\n}\nfunction toResourcePath(databaseId, path) {\n  const resourcePath = fullyQualifiedPrefixPath(databaseId).child('documents');\n  return path === undefined ? resourcePath : resourcePath.child(path);\n}\nfunction fromResourceName(name) {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(isValidResourceName(resource));\n  return resource;\n}\nfunction toName(serializer, key) {\n  return toResourceName(serializer.databaseId, key.path);\n}\nfunction fromName(serializer, name) {\n  const resource = fromResourceName(name);\n  if (resource.get(1) !== serializer.databaseId.projectId) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different project: ' + resource.get(1) + ' vs ' + serializer.databaseId.projectId);\n  }\n  if (resource.get(3) !== serializer.databaseId.database) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different database: ' + resource.get(3) + ' vs ' + serializer.databaseId.database);\n  }\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\nfunction toQueryPath(serializer, path) {\n  return toResourceName(serializer.databaseId, path);\n}\nfunction fromQueryPath(name) {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\nfunction getEncodedDatabaseId(serializer) {\n  const path = new ResourcePath(['projects', serializer.databaseId.projectId, 'databases', serializer.databaseId.database]);\n  return path.canonicalString();\n}\nfunction fullyQualifiedPrefixPath(databaseId) {\n  return new ResourcePath(['projects', databaseId.projectId, 'databases', databaseId.database]);\n}\nfunction extractLocalPathFromResourceName(resourceName) {\n  hardAssert(resourceName.length > 4 && resourceName.get(4) === 'documents');\n  return resourceName.popFirst(5);\n}\n/** Creates a Document proto from key and fields (but no create/update time) */\nfunction toMutationDocument(serializer, key, fields) {\n  return {\n    name: toName(serializer, key),\n    fields: fields.value.mapValue.fields\n  };\n}\nfunction toDocument(serializer, document) {\n  return {\n    name: toName(serializer, document.key),\n    fields: document.data.value.mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp()),\n    createTime: toTimestamp(serializer, document.createTime.toTimestamp())\n  };\n}\nfunction fromDocument(serializer, document, hasCommittedMutations) {\n  const key = fromName(serializer, document.name);\n  const version = fromVersion(document.updateTime);\n  // If we read a document from persistence that is missing createTime, it's due\n  // to older SDK versions not storing this information. In such cases, we'll\n  // set the createTime to zero. This can be removed in the long term.\n  const createTime = document.createTime ? fromVersion(document.createTime) : SnapshotVersion.min();\n  const data = new ObjectValue({\n    mapValue: {\n      fields: document.fields\n    }\n  });\n  const result = MutableDocument.newFoundDocument(key, version, createTime, data);\n  if (hasCommittedMutations) {\n    result.setHasCommittedMutations();\n  }\n  return hasCommittedMutations ? result.setHasCommittedMutations() : result;\n}\nfunction fromFound(serializer, doc) {\n  hardAssert(!!doc.found);\n  assertPresent(doc.found.name);\n  assertPresent(doc.found.updateTime);\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const createTime = doc.found.createTime ? fromVersion(doc.found.createTime) : SnapshotVersion.min();\n  const data = new ObjectValue({\n    mapValue: {\n      fields: doc.found.fields\n    }\n  });\n  return MutableDocument.newFoundDocument(key, version, createTime, data);\n}\nfunction fromMissing(serializer, result) {\n  hardAssert(!!result.missing);\n  hardAssert(!!result.readTime);\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return MutableDocument.newNoDocument(key, version);\n}\nfunction fromBatchGetDocumentsResponse(serializer, result) {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail();\n}\nfunction fromWatchChange(serializer, change) {\n  let watchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange);\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n    const targetIds = change.targetChange.targetIds || [];\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange);\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document);\n    assertPresent(entityChange.document.name);\n    assertPresent(entityChange.document.updateTime);\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const createTime = entityChange.document.createTime ? fromVersion(entityChange.document.createTime) : SnapshotVersion.min();\n    const data = new ObjectValue({\n      mapValue: {\n        fields: entityChange.document.fields\n      }\n    });\n    const doc = MutableDocument.newFoundDocument(key, version, createTime, data);\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete);\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document);\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();\n    const doc = MutableDocument.newNoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove);\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document);\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter);\n    const filter = change.filter;\n    assertPresent(filter.targetId);\n    const {\n      count = 0,\n      unchangedNames\n    } = filter;\n    const existenceFilter = new ExistenceFilter(count, unchangedNames);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail();\n  }\n  return watchChange;\n}\nfunction fromWatchTargetChangeState(state) {\n  if (state === 'NO_CHANGE') {\n    return 0 /* WatchTargetChangeState.NoChange */;\n  } else if (state === 'ADD') {\n    return 1 /* WatchTargetChangeState.Added */;\n  } else if (state === 'REMOVE') {\n    return 2 /* WatchTargetChangeState.Removed */;\n  } else if (state === 'CURRENT') {\n    return 3 /* WatchTargetChangeState.Current */;\n  } else if (state === 'RESET') {\n    return 4 /* WatchTargetChangeState.Reset */;\n  } else {\n    return fail();\n  }\n}\nfunction versionFromListenResponse(change) {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\nfunction toMutation(serializer, mutation) {\n  let result;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = {\n      delete: toName(serializer, mutation.key)\n    };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail();\n  }\n  if (mutation.fieldTransforms.length > 0) {\n    result.updateTransforms = mutation.fieldTransforms.map(transform => toFieldTransform(serializer, transform));\n  }\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n  return result;\n}\nfunction fromMutation(serializer, proto) {\n  const precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();\n  const fieldTransforms = proto.updateTransforms ? proto.updateTransforms.map(transform => fromFieldTransform(serializer, transform)) : [];\n  if (proto.update) {\n    assertPresent(proto.update.name);\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: {\n        fields: proto.update.fields\n      }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);\n    } else {\n      return new SetMutation(key, value, precondition, fieldTransforms);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail();\n  }\n}\nfunction toPrecondition(serializer, precondition) {\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return {\n      exists: precondition.exists\n    };\n  } else {\n    return fail();\n  }\n}\nfunction fromPrecondition(precondition) {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\nfunction fromWriteResult(proto, commitTime) {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n  return new MutationResult(version, proto.transformResults || []);\n}\nfunction fromWriteResults(protos, commitTime) {\n  if (protos && protos.length > 0) {\n    hardAssert(commitTime !== undefined);\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\nfunction toFieldTransform(serializer, fieldTransform) {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail();\n  }\n}\nfunction fromFieldTransform(serializer, proto) {\n  let transform = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(proto.setToServerValue === 'REQUEST_TIME');\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(serializer, proto.increment);\n  } else {\n    fail();\n  }\n  const fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);\n  return new FieldTransform(fieldPath, transform);\n}\nfunction toDocumentsTarget(serializer, target) {\n  return {\n    documents: [toQueryPath(serializer, target.path)]\n  };\n}\nfunction fromDocumentsTarget(documentsTarget) {\n  const count = documentsTarget.documents.length;\n  hardAssert(count === 1);\n  const name = documentsTarget.documents[0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\nfunction toQueryTarget(serializer, target) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const queryTarget = {\n    structuredQuery: {}\n  };\n  const path = target.path;\n  let parent;\n  if (target.collectionGroup !== null) {\n    parent = path;\n    queryTarget.structuredQuery.from = [{\n      collectionId: target.collectionGroup,\n      allDescendants: true\n    }];\n  } else {\n    parent = path.popLast();\n    queryTarget.structuredQuery.from = [{\n      collectionId: path.lastSegment()\n    }];\n  }\n  queryTarget.parent = toQueryPath(serializer, parent);\n  const where = toFilters(target.filters);\n  if (where) {\n    queryTarget.structuredQuery.where = where;\n  }\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    queryTarget.structuredQuery.orderBy = orderBy;\n  }\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    queryTarget.structuredQuery.limit = limit;\n  }\n  if (target.startAt) {\n    queryTarget.structuredQuery.startAt = toStartAtCursor(target.startAt);\n  }\n  if (target.endAt) {\n    queryTarget.structuredQuery.endAt = toEndAtCursor(target.endAt);\n  }\n  return {\n    queryTarget,\n    parent\n  };\n}\nfunction toRunAggregationQueryRequest(serializer, target, aggregates, skipAliasing) {\n  const {\n    queryTarget,\n    parent\n  } = toQueryTarget(serializer, target);\n  const aliasMap = {};\n  const aggregations = [];\n  let aggregationNum = 0;\n  aggregates.forEach(aggregate => {\n    // Map all client-side aliases to a unique short-form\n    // alias. This avoids issues with client-side aliases that\n    // exceed the 1500-byte string size limit.\n    const serverAlias = skipAliasing ? aggregate.alias : `aggregate_${aggregationNum++}`;\n    aliasMap[serverAlias] = aggregate.alias;\n    if (aggregate.aggregateType === 'count') {\n      aggregations.push({\n        alias: serverAlias,\n        count: {}\n      });\n    } else if (aggregate.aggregateType === 'avg') {\n      aggregations.push({\n        alias: serverAlias,\n        avg: {\n          field: toFieldPathReference(aggregate.fieldPath)\n        }\n      });\n    } else if (aggregate.aggregateType === 'sum') {\n      aggregations.push({\n        alias: serverAlias,\n        sum: {\n          field: toFieldPathReference(aggregate.fieldPath)\n        }\n      });\n    }\n  });\n  return {\n    request: {\n      structuredAggregationQuery: {\n        aggregations,\n        structuredQuery: queryTarget.structuredQuery\n      },\n      parent: queryTarget.parent\n    },\n    aliasMap,\n    parent\n  };\n}\nfunction convertQueryTargetToQuery(target) {\n  let path = fromQueryPath(target.parent);\n  const query = target.structuredQuery;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup = null;\n  if (fromCount > 0) {\n    hardAssert(fromCount === 1);\n    const from = query.from[0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId;\n    } else {\n      path = path.child(from.collectionId);\n    }\n  }\n  let filterBy = [];\n  if (query.where) {\n    filterBy = fromFilters(query.where);\n  }\n  let orderBy = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n  let limit = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n  let startAt = null;\n  if (query.startAt) {\n    startAt = fromStartAtCursor(query.startAt);\n  }\n  let endAt = null;\n  if (query.endAt) {\n    endAt = fromEndAtCursor(query.endAt);\n  }\n  return newQuery(path, collectionGroup, orderBy, filterBy, limit, \"F\" /* LimitType.First */, startAt, endAt);\n}\nfunction fromQueryTarget(target) {\n  return queryToTarget(convertQueryTargetToQuery(target));\n}\nfunction toListenRequestLabels(serializer, targetData) {\n  const value = toLabel(targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\nfunction toLabel(purpose) {\n  switch (purpose) {\n    case \"TargetPurposeListen\" /* TargetPurpose.Listen */:\n      return null;\n    case \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */:\n      return 'existence-filter-mismatch';\n    case \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */:\n      return 'existence-filter-mismatch-bloom';\n    case \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */:\n      return 'limbo-document';\n    default:\n      return fail();\n  }\n}\nfunction toTarget(serializer, targetData) {\n  let result;\n  const target = targetData.target;\n  if (targetIsDocumentTarget(target)) {\n    result = {\n      documents: toDocumentsTarget(serializer, target)\n    };\n  } else {\n    result = {\n      query: toQueryTarget(serializer, target).queryTarget\n    };\n  }\n  result.targetId = targetData.targetId;\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    // TODO(wuandy): Consider removing above check because it is most likely true.\n    // Right now, many tests depend on this behaviour though (leaving min() out\n    // of serialization).\n    result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  }\n  return result;\n}\nfunction toFilters(filters) {\n  if (filters.length === 0) {\n    return;\n  }\n  return toFilter(CompositeFilter.create(filters, \"and\" /* CompositeOperator.AND */));\n}\nfunction fromFilters(filter) {\n  const result = fromFilter(filter);\n  if (result instanceof CompositeFilter && compositeFilterIsFlatConjunction(result)) {\n    return result.getFilters();\n  }\n  return [result];\n}\nfunction fromFilter(filter) {\n  if (filter.unaryFilter !== undefined) {\n    return fromUnaryFilter(filter);\n  } else if (filter.fieldFilter !== undefined) {\n    return fromFieldFilter(filter);\n  } else if (filter.compositeFilter !== undefined) {\n    return fromCompositeFilter(filter);\n  } else {\n    return fail();\n  }\n}\nfunction toOrder(orderBys) {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\nfunction fromOrder(orderBys) {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\nfunction toStartAtCursor(cursor) {\n  return {\n    before: cursor.inclusive,\n    values: cursor.position\n  };\n}\nfunction toEndAtCursor(cursor) {\n  return {\n    before: !cursor.inclusive,\n    values: cursor.position\n  };\n}\nfunction fromStartAtCursor(cursor) {\n  const inclusive = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\nfunction fromEndAtCursor(cursor) {\n  const inclusive = !cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\n// visible for testing\nfunction toDirection(dir) {\n  return DIRECTIONS[dir];\n}\n// visible for testing\nfunction fromDirection(dir) {\n  switch (dir) {\n    case 'ASCENDING':\n      return \"asc\" /* Direction.ASCENDING */;\n    case 'DESCENDING':\n      return \"desc\" /* Direction.DESCENDING */;\n    default:\n      return undefined;\n  }\n}\n// visible for testing\nfunction toOperatorName(op) {\n  return OPERATORS[op];\n}\nfunction toCompositeOperatorName(op) {\n  return COMPOSITE_OPERATORS[op];\n}\nfunction fromOperatorName(op) {\n  switch (op) {\n    case 'EQUAL':\n      return \"==\" /* Operator.EQUAL */;\n    case 'NOT_EQUAL':\n      return \"!=\" /* Operator.NOT_EQUAL */;\n    case 'GREATER_THAN':\n      return \">\" /* Operator.GREATER_THAN */;\n    case 'GREATER_THAN_OR_EQUAL':\n      return \">=\" /* Operator.GREATER_THAN_OR_EQUAL */;\n    case 'LESS_THAN':\n      return \"<\" /* Operator.LESS_THAN */;\n    case 'LESS_THAN_OR_EQUAL':\n      return \"<=\" /* Operator.LESS_THAN_OR_EQUAL */;\n    case 'ARRAY_CONTAINS':\n      return \"array-contains\" /* Operator.ARRAY_CONTAINS */;\n    case 'IN':\n      return \"in\" /* Operator.IN */;\n    case 'NOT_IN':\n      return \"not-in\" /* Operator.NOT_IN */;\n    case 'ARRAY_CONTAINS_ANY':\n      return \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n    default:\n      return fail();\n  }\n}\nfunction fromCompositeOperatorName(op) {\n  switch (op) {\n    case 'AND':\n      return \"and\" /* CompositeOperator.AND */;\n    case 'OR':\n      return \"or\" /* CompositeOperator.OR */;\n    default:\n      return fail();\n  }\n}\nfunction toFieldPathReference(path) {\n  return {\n    fieldPath: path.canonicalString()\n  };\n}\nfunction fromFieldPathReference(fieldReference) {\n  return FieldPath$1.fromServerFormat(fieldReference.fieldPath);\n}\n// visible for testing\nfunction toPropertyOrder(orderBy) {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\nfunction fromPropertyOrder(orderBy) {\n  return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));\n}\n// visible for testing\nfunction toFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    return toUnaryOrFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return toCompositeFilter(filter);\n  } else {\n    return fail();\n  }\n}\nfunction toCompositeFilter(filter) {\n  const protos = filter.getFilters().map(filter => toFilter(filter));\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return {\n    compositeFilter: {\n      op: toCompositeOperatorName(filter.op),\n      filters: protos\n    }\n  };\n}\nfunction toUnaryOrFieldFilter(filter) {\n  if (filter.op === \"==\" /* Operator.EQUAL */) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  } else if (filter.op === \"!=\" /* Operator.NOT_EQUAL */) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\nfunction fromUnaryFilter(filter) {\n  switch (filter.unaryFilter.op) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nanField, \"==\" /* Operator.EQUAL */, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nullField, \"==\" /* Operator.EQUAL */, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'IS_NOT_NAN':\n      const notNanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNanField, \"!=\" /* Operator.NOT_EQUAL */, {\n        doubleValue: NaN\n      });\n    case 'IS_NOT_NULL':\n      const notNullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNullField, \"!=\" /* Operator.NOT_EQUAL */, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n    default:\n      return fail();\n  }\n}\nfunction fromFieldFilter(filter) {\n  return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);\n}\nfunction fromCompositeFilter(filter) {\n  return CompositeFilter.create(filter.compositeFilter.filters.map(filter => fromFilter(filter)), fromCompositeOperatorName(filter.compositeFilter.op));\n}\nfunction toDocumentMask(fieldMask) {\n  const canonicalFields = [];\n  fieldMask.fields.forEach(field => canonicalFields.push(field.canonicalString()));\n  return {\n    fieldPaths: canonicalFields\n  };\n}\nfunction fromDocumentMask(proto) {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath$1.fromServerFormat(path)));\n}\nfunction isValidResourceName(path) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return path.length >= 4 && path.get(0) === 'projects' && path.get(2) === 'databases';\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable set of metadata that the local store tracks for each target.\n */\nclass TargetData {\n  constructor(/** The target being listened to. */\n  target,\n  /**\n   * The target ID to which the target corresponds; Assigned by the\n   * LocalStore for user listens and by the SyncEngine for limbo watches.\n   */\n  targetId, /** The purpose of the target. */\n  purpose,\n  /**\n   * The sequence number of the last transaction during which this target data\n   * was modified.\n   */\n  sequenceNumber, /** The latest snapshot version seen for this target. */\n  snapshotVersion = SnapshotVersion.min(),\n  /**\n   * The maximum snapshot version at which the associated view\n   * contained no limbo documents.\n   */\n  lastLimboFreeSnapshotVersion = SnapshotVersion.min(),\n  /**\n   * An opaque, server-assigned token that allows watching a target to be\n   * resumed after disconnecting without retransmitting all the data that\n   * matches the target. The resume token essentially identifies a point in\n   * time from which the server should resume sending results.\n   */\n  resumeToken = ByteString.EMPTY_BYTE_STRING,\n  /**\n   * The number of documents that last matched the query at the resume token or\n   * read time. Documents are counted only when making a listen request with\n   * resume token or read time, otherwise, keep it null.\n   */\n  expectedCount = null) {\n    this.target = target;\n    this.targetId = targetId;\n    this.purpose = purpose;\n    this.sequenceNumber = sequenceNumber;\n    this.snapshotVersion = snapshotVersion;\n    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\n    this.resumeToken = resumeToken;\n    this.expectedCount = expectedCount;\n  }\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber) {\n    return new TargetData(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\n  }\n  /**\n   * Creates a new target data instance with an updated resume token and\n   * snapshot version.\n   */\n  withResumeToken(resumeToken, snapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken, /* expectedCount= */null);\n  }\n  /**\n   * Creates a new target data instance with an updated expected count.\n   */\n  withExpectedCount(expectedCount) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, expectedCount);\n  }\n  /**\n   * Creates a new target data instance with an updated last limbo free\n   * snapshot version number.\n   */\n  withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Serializer for values stored in the LocalStore. */\nclass LocalSerializer {\n  constructor(remoteSerializer) {\n    this.remoteSerializer = remoteSerializer;\n  }\n}\n/** Decodes a remote document from storage locally to a Document. */\nfunction fromDbRemoteDocument(localSerializer, remoteDoc) {\n  let doc;\n  if (remoteDoc.document) {\n    doc = fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);\n  } else if (remoteDoc.noDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n    const version = fromDbTimestamp(remoteDoc.noDocument.readTime);\n    doc = MutableDocument.newNoDocument(key, version);\n    if (remoteDoc.hasCommittedMutations) {\n      doc.setHasCommittedMutations();\n    }\n  } else if (remoteDoc.unknownDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n    const version = fromDbTimestamp(remoteDoc.unknownDocument.version);\n    doc = MutableDocument.newUnknownDocument(key, version);\n  } else {\n    return fail();\n  }\n  if (remoteDoc.readTime) {\n    doc.setReadTime(fromDbTimestampKey(remoteDoc.readTime));\n  }\n  return doc;\n}\n/** Encodes a document for storage locally. */\nfunction toDbRemoteDocument(localSerializer, document) {\n  const key = document.key;\n  const remoteDoc = {\n    prefixPath: key.getCollectionPath().popLast().toArray(),\n    collectionGroup: key.collectionGroup,\n    documentId: key.path.lastSegment(),\n    readTime: toDbTimestampKey(document.readTime),\n    hasCommittedMutations: document.hasCommittedMutations\n  };\n  if (document.isFoundDocument()) {\n    remoteDoc.document = toDocument(localSerializer.remoteSerializer, document);\n  } else if (document.isNoDocument()) {\n    remoteDoc.noDocument = {\n      path: key.path.toArray(),\n      readTime: toDbTimestamp(document.version)\n    };\n  } else if (document.isUnknownDocument()) {\n    remoteDoc.unknownDocument = {\n      path: key.path.toArray(),\n      version: toDbTimestamp(document.version)\n    };\n  } else {\n    return fail();\n  }\n  return remoteDoc;\n}\nfunction toDbTimestampKey(snapshotVersion) {\n  const timestamp = snapshotVersion.toTimestamp();\n  return [timestamp.seconds, timestamp.nanoseconds];\n}\nfunction fromDbTimestampKey(dbTimestampKey) {\n  const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\nfunction toDbTimestamp(snapshotVersion) {\n  const timestamp = snapshotVersion.toTimestamp();\n  return {\n    seconds: timestamp.seconds,\n    nanoseconds: timestamp.nanoseconds\n  };\n}\nfunction fromDbTimestamp(dbTimestamp) {\n  const timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\nfunction toDbMutationBatch(localSerializer, userId, batch) {\n  const serializedBaseMutations = batch.baseMutations.map(m => toMutation(localSerializer.remoteSerializer, m));\n  const serializedMutations = batch.mutations.map(m => toMutation(localSerializer.remoteSerializer, m));\n  return {\n    userId,\n    batchId: batch.batchId,\n    localWriteTimeMs: batch.localWriteTime.toMillis(),\n    baseMutations: serializedBaseMutations,\n    mutations: serializedMutations\n  };\n}\n/** Decodes a DbMutationBatch into a MutationBatch */\nfunction fromDbMutationBatch(localSerializer, dbBatch) {\n  const baseMutations = (dbBatch.baseMutations || []).map(m => fromMutation(localSerializer.remoteSerializer, m));\n  // Squash old transform mutations into existing patch or set mutations.\n  // The replacement of representing `transforms` with `update_transforms`\n  // on the SDK means that old `transform` mutations stored in IndexedDB need\n  // to be updated to `update_transforms`.\n  // TODO(b/174608374): Remove this code once we perform a schema migration.\n  for (let i = 0; i < dbBatch.mutations.length - 1; ++i) {\n    const currentMutation = dbBatch.mutations[i];\n    const hasTransform = i + 1 < dbBatch.mutations.length && dbBatch.mutations[i + 1].transform !== undefined;\n    if (hasTransform) {\n      const transformMutation = dbBatch.mutations[i + 1];\n      currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;\n      dbBatch.mutations.splice(i + 1, 1);\n      ++i;\n    }\n  }\n  const mutations = dbBatch.mutations.map(m => fromMutation(localSerializer.remoteSerializer, m));\n  const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n  return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);\n}\n/** Decodes a DbTarget into TargetData */\nfunction fromDbTarget(dbTarget) {\n  const version = fromDbTimestamp(dbTarget.readTime);\n  const lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== undefined ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();\n  let target;\n  if (isDocumentQuery(dbTarget.query)) {\n    target = fromDocumentsTarget(dbTarget.query);\n  } else {\n    target = fromQueryTarget(dbTarget.query);\n  }\n  return new TargetData(target, dbTarget.targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, dbTarget.lastListenSequenceNumber, version, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));\n}\n/** Encodes TargetData into a DbTarget for storage locally. */\nfunction toDbTarget(localSerializer, targetData) {\n  const dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\n  const dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);\n  let queryProto;\n  if (targetIsDocumentTarget(targetData.target)) {\n    queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);\n  } else {\n    queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target).queryTarget;\n  }\n  // We can't store the resumeToken as a ByteString in IndexedDb, so we\n  // convert it to a base64 string for storage.\n  const resumeToken = targetData.resumeToken.toBase64();\n  // lastListenSequenceNumber is always 0 until we do real GC.\n  return {\n    targetId: targetData.targetId,\n    canonicalId: canonifyTarget(targetData.target),\n    readTime: dbTimestamp,\n    resumeToken,\n    lastListenSequenceNumber: targetData.sequenceNumber,\n    lastLimboFreeSnapshotVersion: dbLastLimboFreeTimestamp,\n    query: queryProto\n  };\n}\n/**\n * A helper function for figuring out what kind of query has been stored.\n */\nfunction isDocumentQuery(dbQuery) {\n  return dbQuery.documents !== undefined;\n}\n/** Encodes a DbBundle to a BundleMetadata object. */\nfunction fromDbBundle(dbBundle) {\n  return {\n    id: dbBundle.bundleId,\n    createTime: fromDbTimestamp(dbBundle.createTime),\n    version: dbBundle.version\n  };\n}\n/** Encodes a BundleMetadata to a DbBundle. */\nfunction toDbBundle(metadata) {\n  return {\n    bundleId: metadata.id,\n    createTime: toDbTimestamp(fromVersion(metadata.createTime)),\n    version: metadata.version\n  };\n}\n/** Encodes a DbNamedQuery to a NamedQuery. */\nfunction fromDbNamedQuery(dbNamedQuery) {\n  return {\n    name: dbNamedQuery.name,\n    query: fromBundledQuery(dbNamedQuery.bundledQuery),\n    readTime: fromDbTimestamp(dbNamedQuery.readTime)\n  };\n}\n/** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */\nfunction toDbNamedQuery(query) {\n  return {\n    name: query.name,\n    readTime: toDbTimestamp(fromVersion(query.readTime)),\n    bundledQuery: query.bundledQuery\n  };\n}\n/**\n * Encodes a `BundledQuery` from bundle proto to a Query object.\n *\n * This reconstructs the original query used to build the bundle being loaded,\n * including features exists only in SDKs (for example: limit-to-last).\n */\nfunction fromBundledQuery(bundledQuery) {\n  const query = convertQueryTargetToQuery({\n    parent: bundledQuery.parent,\n    structuredQuery: bundledQuery.structuredQuery\n  });\n  if (bundledQuery.limitType === 'LAST') {\n    return queryWithLimit(query, query.limit, \"L\" /* LimitType.Last */);\n  }\n  return query;\n}\n/** Encodes a NamedQuery proto object to a NamedQuery model object. */\nfunction fromProtoNamedQuery(namedQuery) {\n  return {\n    name: namedQuery.name,\n    query: fromBundledQuery(namedQuery.bundledQuery),\n    readTime: fromVersion(namedQuery.readTime)\n  };\n}\n/** Decodes a BundleMetadata proto into a BundleMetadata object. */\nfunction fromBundleMetadata(metadata) {\n  return {\n    id: metadata.id,\n    version: metadata.version,\n    createTime: fromVersion(metadata.createTime)\n  };\n}\n/** Encodes a DbDocumentOverlay object to an Overlay model object. */\nfunction fromDbDocumentOverlay(localSerializer, dbDocumentOverlay) {\n  return new Overlay(dbDocumentOverlay.largestBatchId, fromMutation(localSerializer.remoteSerializer, dbDocumentOverlay.overlayMutation));\n}\n/** Decodes an Overlay model object into a DbDocumentOverlay object. */\nfunction toDbDocumentOverlay(localSerializer, userId, overlay) {\n  const [_, collectionPath, documentId] = toDbDocumentOverlayKey(userId, overlay.mutation.key);\n  return {\n    userId,\n    collectionPath,\n    documentId,\n    collectionGroup: overlay.mutation.key.getCollectionGroup(),\n    largestBatchId: overlay.largestBatchId,\n    overlayMutation: toMutation(localSerializer.remoteSerializer, overlay.mutation)\n  };\n}\n/**\n * Returns the DbDocumentOverlayKey corresponding to the given user and\n * document key.\n */\nfunction toDbDocumentOverlayKey(userId, docKey) {\n  const docId = docKey.path.lastSegment();\n  const collectionPath = encodeResourcePath(docKey.path.popLast());\n  return [userId, collectionPath, docId];\n}\nfunction toDbIndexConfiguration(index) {\n  return {\n    indexId: index.indexId,\n    collectionGroup: index.collectionGroup,\n    fields: index.fields.map(s => [s.fieldPath.canonicalString(), s.kind])\n  };\n}\nfunction fromDbIndexConfiguration(index, state) {\n  const decodedState = state ? new IndexState(state.sequenceNumber, new IndexOffset(fromDbTimestamp(state.readTime), new DocumentKey(decodeResourcePath(state.documentKey)), state.largestBatchId)) : IndexState.empty();\n  const decodedSegments = index.fields.map(([fieldPath, kind]) => new IndexSegment(FieldPath$1.fromServerFormat(fieldPath), kind));\n  return new FieldIndex(index.indexId, index.collectionGroup, decodedSegments, decodedState);\n}\nfunction toDbIndexState(indexId, uid, sequenceNumber, offset) {\n  return {\n    indexId,\n    uid,\n    sequenceNumber,\n    readTime: toDbTimestamp(offset.readTime),\n    documentKey: encodeResourcePath(offset.documentKey.path),\n    largestBatchId: offset.largestBatchId\n  };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IndexedDbBundleCache {\n  getBundleMetadata(transaction, bundleId) {\n    return bundlesStore(transaction).get(bundleId).next(bundle => {\n      if (bundle) {\n        return fromDbBundle(bundle);\n      }\n      return undefined;\n    });\n  }\n  saveBundleMetadata(transaction, bundleMetadata) {\n    return bundlesStore(transaction).put(toDbBundle(bundleMetadata));\n  }\n  getNamedQuery(transaction, queryName) {\n    return namedQueriesStore(transaction).get(queryName).next(query => {\n      if (query) {\n        return fromDbNamedQuery(query);\n      }\n      return undefined;\n    });\n  }\n  saveNamedQuery(transaction, query) {\n    return namedQueriesStore(transaction).put(toDbNamedQuery(query));\n  }\n}\n/**\n * Helper to get a typed SimpleDbStore for the bundles object store.\n */\nfunction bundlesStore(txn) {\n  return getStore(txn, DbBundleStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the namedQueries object store.\n */\nfunction namedQueriesStore(txn) {\n  return getStore(txn, DbNamedQueryStore);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of DocumentOverlayCache using IndexedDb.\n */\nclass IndexedDbDocumentOverlayCache {\n  /**\n   * @param serializer - The document serializer.\n   * @param userId - The userId for which we are accessing overlays.\n   */\n  constructor(serializer, userId) {\n    this.serializer = serializer;\n    this.userId = userId;\n  }\n  static forUser(serializer, user) {\n    const userId = user.uid || '';\n    return new IndexedDbDocumentOverlayCache(serializer, userId);\n  }\n  getOverlay(transaction, key) {\n    return documentOverlayStore(transaction).get(toDbDocumentOverlayKey(this.userId, key)).next(dbOverlay => {\n      if (dbOverlay) {\n        return fromDbDocumentOverlay(this.serializer, dbOverlay);\n      }\n      return null;\n    });\n  }\n  getOverlays(transaction, keys) {\n    const result = newOverlayMap();\n    return PersistencePromise.forEach(keys, key => {\n      return this.getOverlay(transaction, key).next(overlay => {\n        if (overlay !== null) {\n          result.set(key, overlay);\n        }\n      });\n    }).next(() => result);\n  }\n  saveOverlays(transaction, largestBatchId, overlays) {\n    const promises = [];\n    overlays.forEach((_, mutation) => {\n      const overlay = new Overlay(largestBatchId, mutation);\n      promises.push(this.saveOverlay(transaction, overlay));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  removeOverlaysForBatchId(transaction, documentKeys, batchId) {\n    const collectionPaths = new Set();\n    // Get the set of unique collection paths.\n    documentKeys.forEach(key => collectionPaths.add(encodeResourcePath(key.getCollectionPath())));\n    const promises = [];\n    collectionPaths.forEach(collectionPath => {\n      const range = IDBKeyRange.bound([this.userId, collectionPath, batchId], [this.userId, collectionPath, batchId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n      promises.push(documentOverlayStore(transaction).deleteAll(DbDocumentOverlayCollectionPathOverlayIndex, range));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getOverlaysForCollection(transaction, collection, sinceBatchId) {\n    const result = newOverlayMap();\n    const collectionPath = encodeResourcePath(collection);\n    // We want batch IDs larger than `sinceBatchId`, and so the lower bound\n    // is not inclusive.\n    const range = IDBKeyRange.bound([this.userId, collectionPath, sinceBatchId], [this.userId, collectionPath, Number.POSITIVE_INFINITY], /*lowerOpen=*/true);\n    return documentOverlayStore(transaction).loadAll(DbDocumentOverlayCollectionPathOverlayIndex, range).next(dbOverlays => {\n      for (const dbOverlay of dbOverlays) {\n        const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\n        result.set(overlay.getKey(), overlay);\n      }\n      return result;\n    });\n  }\n  getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\n    const result = newOverlayMap();\n    let currentBatchId = undefined;\n    // We want batch IDs larger than `sinceBatchId`, and so the lower bound\n    // is not inclusive.\n    const range = IDBKeyRange.bound([this.userId, collectionGroup, sinceBatchId], [this.userId, collectionGroup, Number.POSITIVE_INFINITY], /*lowerOpen=*/true);\n    return documentOverlayStore(transaction).iterate({\n      index: DbDocumentOverlayCollectionGroupOverlayIndex,\n      range\n    }, (_, dbOverlay, control) => {\n      // We do not want to return partial batch overlays, even if the size\n      // of the result set exceeds the given `count` argument. Therefore, we\n      // continue to aggregate results even after the result size exceeds\n      // `count` if there are more overlays from the `currentBatchId`.\n      const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\n      if (result.size() < count || overlay.largestBatchId === currentBatchId) {\n        result.set(overlay.getKey(), overlay);\n        currentBatchId = overlay.largestBatchId;\n      } else {\n        control.done();\n      }\n    }).next(() => result);\n  }\n  saveOverlay(transaction, overlay) {\n    return documentOverlayStore(transaction).put(toDbDocumentOverlay(this.serializer, this.userId, overlay));\n  }\n}\n/**\n * Helper to get a typed SimpleDbStore for the document overlay object store.\n */\nfunction documentOverlayStore(txn) {\n  return getStore(txn, DbDocumentOverlayStore);\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IndexedDbGlobalsCache {\n  globalsStore(txn) {\n    return getStore(txn, DbGlobalsStore);\n  }\n  getSessionToken(txn) {\n    const globals = this.globalsStore(txn);\n    return globals.get('sessionToken').next(global => {\n      const value = global === null || global === void 0 ? void 0 : global.value;\n      return value ? ByteString.fromUint8Array(value) : ByteString.EMPTY_BYTE_STRING;\n    });\n  }\n  setSessionToken(txn, sessionToken) {\n    const globals = this.globalsStore(txn);\n    return globals.put({\n      name: 'sessionToken',\n      value: sessionToken.toUint8Array()\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Note: This code is copied from the backend. Code that is not used by\n// Firestore was removed.\nconst INDEX_TYPE_NULL = 5;\nconst INDEX_TYPE_BOOLEAN = 10;\nconst INDEX_TYPE_NAN = 13;\nconst INDEX_TYPE_NUMBER = 15;\nconst INDEX_TYPE_TIMESTAMP = 20;\nconst INDEX_TYPE_STRING = 25;\nconst INDEX_TYPE_BLOB = 30;\nconst INDEX_TYPE_REFERENCE = 37;\nconst INDEX_TYPE_GEOPOINT = 45;\nconst INDEX_TYPE_ARRAY = 50;\nconst INDEX_TYPE_VECTOR = 53;\nconst INDEX_TYPE_MAP = 55;\nconst INDEX_TYPE_REFERENCE_SEGMENT = 60;\n// A terminator that indicates that a truncatable value was not truncated.\n// This must be smaller than all other type labels.\nconst NOT_TRUNCATED = 2;\n/** Firestore index value writer.  */\nclass FirestoreIndexValueWriter {\n  constructor() {}\n  // The write methods below short-circuit writing terminators for values\n  // containing a (terminating) truncated value.\n  //\n  // As an example, consider the resulting encoding for:\n  //\n  // [\"bar\", [2, \"foo\"]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TERM, TERM, TERM)\n  // [\"bar\", [2, truncated(\"foo\")]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TRUNC)\n  // [\"bar\", truncated([\"foo\"])] -> (STRING, \"bar\", TERM, ARRAY. STRING, \"foo\", TERM, TRUNC)\n  /** Writes an index value.  */\n  writeIndexValue(value, encoder) {\n    this.writeIndexValueAux(value, encoder);\n    // Write separator to split index values\n    // (see go/firestore-storage-format#encodings).\n    encoder.writeInfinity();\n  }\n  writeIndexValueAux(indexValue, encoder) {\n    if ('nullValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_NULL);\n    } else if ('booleanValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_BOOLEAN);\n      encoder.writeNumber(indexValue.booleanValue ? 1 : 0);\n    } else if ('integerValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n      encoder.writeNumber(normalizeNumber(indexValue.integerValue));\n    } else if ('doubleValue' in indexValue) {\n      const n = normalizeNumber(indexValue.doubleValue);\n      if (isNaN(n)) {\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_NAN);\n      } else {\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n        if (isNegativeZero(n)) {\n          // -0.0, 0 and 0.0 are all considered the same\n          encoder.writeNumber(0.0);\n        } else {\n          encoder.writeNumber(n);\n        }\n      }\n    } else if ('timestampValue' in indexValue) {\n      let timestamp = indexValue.timestampValue;\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_TIMESTAMP);\n      if (typeof timestamp === 'string') {\n        timestamp = normalizeTimestamp(timestamp);\n      }\n      encoder.writeString(`${timestamp.seconds || ''}`);\n      encoder.writeNumber(timestamp.nanos || 0);\n    } else if ('stringValue' in indexValue) {\n      this.writeIndexString(indexValue.stringValue, encoder);\n      this.writeTruncationMarker(encoder);\n    } else if ('bytesValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_BLOB);\n      encoder.writeBytes(normalizeByteString(indexValue.bytesValue));\n      this.writeTruncationMarker(encoder);\n    } else if ('referenceValue' in indexValue) {\n      this.writeIndexEntityRef(indexValue.referenceValue, encoder);\n    } else if ('geoPointValue' in indexValue) {\n      const geoPoint = indexValue.geoPointValue;\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_GEOPOINT);\n      encoder.writeNumber(geoPoint.latitude || 0);\n      encoder.writeNumber(geoPoint.longitude || 0);\n    } else if ('mapValue' in indexValue) {\n      if (isMaxValue(indexValue)) {\n        this.writeValueTypeLabel(encoder, Number.MAX_SAFE_INTEGER);\n      } else if (isVectorValue(indexValue)) {\n        this.writeIndexVector(indexValue.mapValue, encoder);\n      } else {\n        this.writeIndexMap(indexValue.mapValue, encoder);\n        this.writeTruncationMarker(encoder);\n      }\n    } else if ('arrayValue' in indexValue) {\n      this.writeIndexArray(indexValue.arrayValue, encoder);\n      this.writeTruncationMarker(encoder);\n    } else {\n      fail();\n    }\n  }\n  writeIndexString(stringIndexValue, encoder) {\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_STRING);\n    this.writeUnlabeledIndexString(stringIndexValue, encoder);\n  }\n  writeUnlabeledIndexString(stringIndexValue, encoder) {\n    encoder.writeString(stringIndexValue);\n  }\n  writeIndexMap(mapIndexValue, encoder) {\n    const map = mapIndexValue.fields || {};\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_MAP);\n    for (const key of Object.keys(map)) {\n      this.writeIndexString(key, encoder);\n      this.writeIndexValueAux(map[key], encoder);\n    }\n  }\n  writeIndexVector(mapIndexValue, encoder) {\n    var _a, _b;\n    const map = mapIndexValue.fields || {};\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_VECTOR);\n    // Vectors sort first by length\n    const key = VECTOR_MAP_VECTORS_KEY;\n    const length = ((_b = (_a = map[key].arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.length) || 0;\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n    encoder.writeNumber(normalizeNumber(length));\n    // Vectors then sort by position value\n    this.writeIndexString(key, encoder);\n    this.writeIndexValueAux(map[key], encoder);\n  }\n  writeIndexArray(arrayIndexValue, encoder) {\n    const values = arrayIndexValue.values || [];\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_ARRAY);\n    for (const element of values) {\n      this.writeIndexValueAux(element, encoder);\n    }\n  }\n  writeIndexEntityRef(referenceValue, encoder) {\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE);\n    const path = DocumentKey.fromName(referenceValue).path;\n    path.forEach(segment => {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE_SEGMENT);\n      this.writeUnlabeledIndexString(segment, encoder);\n    });\n  }\n  writeValueTypeLabel(encoder, typeOrder) {\n    encoder.writeNumber(typeOrder);\n  }\n  writeTruncationMarker(encoder) {\n    // While the SDK does not implement truncation, the truncation marker is\n    // used to terminate all variable length values (which are strings, bytes,\n    // references, arrays and maps).\n    encoder.writeNumber(NOT_TRUNCATED);\n  }\n}\nFirestoreIndexValueWriter.INSTANCE = new FirestoreIndexValueWriter();\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law | agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** These constants are taken from the backend. */\nconst MIN_SURROGATE = '\\uD800';\nconst MAX_SURROGATE = '\\uDBFF';\nconst ESCAPE1 = 0x00;\nconst NULL_BYTE = 0xff; // Combined with ESCAPE1\nconst SEPARATOR = 0x01; // Combined with ESCAPE1\nconst ESCAPE2 = 0xff;\nconst INFINITY = 0xff; // Combined with ESCAPE2\nconst FF_BYTE = 0x00; // Combined with ESCAPE2\nconst LONG_SIZE = 64;\nconst BYTE_SIZE = 8;\n/**\n * The default size of the buffer. This is arbitrary, but likely larger than\n * most index values so that less copies of the underlying buffer will be made.\n * For large values, a single copy will made to double the buffer length.\n */\nconst DEFAULT_BUFFER_SIZE = 1024;\n/** Converts a JavaScript number to a byte array (using big endian encoding). */\nfunction doubleToLongBits(value) {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value, /* littleEndian= */false);\n  return new Uint8Array(dv.buffer);\n}\n/**\n * Counts the number of zeros in a byte.\n *\n * Visible for testing.\n */\nfunction numberOfLeadingZerosInByte(x) {\n  if (x === 0) {\n    return 8;\n  }\n  let zeros = 0;\n  if (x >> 4 === 0) {\n    // Test if the first four bits are zero.\n    zeros += 4;\n    x = x << 4;\n  }\n  if (x >> 6 === 0) {\n    // Test if the first two (or next two) bits are zero.\n    zeros += 2;\n    x = x << 2;\n  }\n  if (x >> 7 === 0) {\n    // Test if the remaining bit is zero.\n    zeros += 1;\n  }\n  return zeros;\n}\n/** Counts the number of leading zeros in the given byte array. */\nfunction numberOfLeadingZeros(bytes) {\n  let leadingZeros = 0;\n  for (let i = 0; i < 8; ++i) {\n    const zeros = numberOfLeadingZerosInByte(bytes[i] & 0xff);\n    leadingZeros += zeros;\n    if (zeros !== 8) {\n      break;\n    }\n  }\n  return leadingZeros;\n}\n/**\n * Returns the number of bytes required to store \"value\". Leading zero bytes\n * are skipped.\n */\nfunction unsignedNumLength(value) {\n  // This is just the number of bytes for the unsigned representation of the number.\n  const numBits = LONG_SIZE - numberOfLeadingZeros(value);\n  return Math.ceil(numBits / BYTE_SIZE);\n}\n/**\n * OrderedCodeWriter is a minimal-allocation implementation of the writing\n * behavior defined by the backend.\n *\n * The code is ported from its Java counterpart.\n */\nclass OrderedCodeWriter {\n  constructor() {\n    this.buffer = new Uint8Array(DEFAULT_BUFFER_SIZE);\n    this.position = 0;\n  }\n  writeBytesAscending(value) {\n    const it = value[Symbol.iterator]();\n    let byte = it.next();\n    while (!byte.done) {\n      this.writeByteAscending(byte.value);\n      byte = it.next();\n    }\n    this.writeSeparatorAscending();\n  }\n  writeBytesDescending(value) {\n    const it = value[Symbol.iterator]();\n    let byte = it.next();\n    while (!byte.done) {\n      this.writeByteDescending(byte.value);\n      byte = it.next();\n    }\n    this.writeSeparatorDescending();\n  }\n  /** Writes utf8 bytes into this byte sequence, ascending. */\n  writeUtf8Ascending(sequence) {\n    for (const c of sequence) {\n      const charCode = c.charCodeAt(0);\n      if (charCode < 0x80) {\n        this.writeByteAscending(charCode);\n      } else if (charCode < 0x800) {\n        this.writeByteAscending(0x0f << 6 | charCode >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & charCode);\n      } else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\n        this.writeByteAscending(0x0f << 5 | charCode >>> 12);\n        this.writeByteAscending(0x80 | 0x3f & charCode >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & charCode);\n      } else {\n        const codePoint = c.codePointAt(0);\n        this.writeByteAscending(0x0f << 4 | codePoint >>> 18);\n        this.writeByteAscending(0x80 | 0x3f & codePoint >>> 12);\n        this.writeByteAscending(0x80 | 0x3f & codePoint >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & codePoint);\n      }\n    }\n    this.writeSeparatorAscending();\n  }\n  /** Writes utf8 bytes into this byte sequence, descending */\n  writeUtf8Descending(sequence) {\n    for (const c of sequence) {\n      const charCode = c.charCodeAt(0);\n      if (charCode < 0x80) {\n        this.writeByteDescending(charCode);\n      } else if (charCode < 0x800) {\n        this.writeByteDescending(0x0f << 6 | charCode >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & charCode);\n      } else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\n        this.writeByteDescending(0x0f << 5 | charCode >>> 12);\n        this.writeByteDescending(0x80 | 0x3f & charCode >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & charCode);\n      } else {\n        const codePoint = c.codePointAt(0);\n        this.writeByteDescending(0x0f << 4 | codePoint >>> 18);\n        this.writeByteDescending(0x80 | 0x3f & codePoint >>> 12);\n        this.writeByteDescending(0x80 | 0x3f & codePoint >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & codePoint);\n      }\n    }\n    this.writeSeparatorDescending();\n  }\n  writeNumberAscending(val) {\n    // Values are encoded with a single byte length prefix, followed by the\n    // actual value in big-endian format with leading 0 bytes dropped.\n    const value = this.toOrderedBits(val);\n    const len = unsignedNumLength(value);\n    this.ensureAvailable(1 + len);\n    this.buffer[this.position++] = len & 0xff; // Write the length\n    for (let i = value.length - len; i < value.length; ++i) {\n      this.buffer[this.position++] = value[i] & 0xff;\n    }\n  }\n  writeNumberDescending(val) {\n    // Values are encoded with a single byte length prefix, followed by the\n    // inverted value in big-endian format with leading 0 bytes dropped.\n    const value = this.toOrderedBits(val);\n    const len = unsignedNumLength(value);\n    this.ensureAvailable(1 + len);\n    this.buffer[this.position++] = ~(len & 0xff); // Write the length\n    for (let i = value.length - len; i < value.length; ++i) {\n      this.buffer[this.position++] = ~(value[i] & 0xff);\n    }\n  }\n  /**\n   * Writes the \"infinity\" byte sequence that sorts after all other byte\n   * sequences written in ascending order.\n   */\n  writeInfinityAscending() {\n    this.writeEscapedByteAscending(ESCAPE2);\n    this.writeEscapedByteAscending(INFINITY);\n  }\n  /**\n   * Writes the \"infinity\" byte sequence that sorts before all other byte\n   * sequences written in descending order.\n   */\n  writeInfinityDescending() {\n    this.writeEscapedByteDescending(ESCAPE2);\n    this.writeEscapedByteDescending(INFINITY);\n  }\n  /**\n   * Resets the buffer such that it is the same as when it was newly\n   * constructed.\n   */\n  reset() {\n    this.position = 0;\n  }\n  seed(encodedBytes) {\n    this.ensureAvailable(encodedBytes.length);\n    this.buffer.set(encodedBytes, this.position);\n    this.position += encodedBytes.length;\n  }\n  /** Makes a copy of the encoded bytes in this buffer.  */\n  encodedBytes() {\n    return this.buffer.slice(0, this.position);\n  }\n  /**\n   * Encodes `val` into an encoding so that the order matches the IEEE 754\n   * floating-point comparison results with the following exceptions:\n   *   -0.0 < 0.0\n   *   all non-NaN < NaN\n   *   NaN = NaN\n   */\n  toOrderedBits(val) {\n    const value = doubleToLongBits(val);\n    // Check if the first bit is set. We use a bit mask since value[0] is\n    // encoded as a number from 0 to 255.\n    const isNegative = (value[0] & 0x80) !== 0;\n    // Revert the two complement to get natural ordering\n    value[0] ^= isNegative ? 0xff : 0x80;\n    for (let i = 1; i < value.length; ++i) {\n      value[i] ^= isNegative ? 0xff : 0x00;\n    }\n    return value;\n  }\n  /** Writes a single byte ascending to the buffer. */\n  writeByteAscending(b) {\n    const masked = b & 0xff;\n    if (masked === ESCAPE1) {\n      this.writeEscapedByteAscending(ESCAPE1);\n      this.writeEscapedByteAscending(NULL_BYTE);\n    } else if (masked === ESCAPE2) {\n      this.writeEscapedByteAscending(ESCAPE2);\n      this.writeEscapedByteAscending(FF_BYTE);\n    } else {\n      this.writeEscapedByteAscending(masked);\n    }\n  }\n  /** Writes a single byte descending to the buffer.  */\n  writeByteDescending(b) {\n    const masked = b & 0xff;\n    if (masked === ESCAPE1) {\n      this.writeEscapedByteDescending(ESCAPE1);\n      this.writeEscapedByteDescending(NULL_BYTE);\n    } else if (masked === ESCAPE2) {\n      this.writeEscapedByteDescending(ESCAPE2);\n      this.writeEscapedByteDescending(FF_BYTE);\n    } else {\n      this.writeEscapedByteDescending(b);\n    }\n  }\n  writeSeparatorAscending() {\n    this.writeEscapedByteAscending(ESCAPE1);\n    this.writeEscapedByteAscending(SEPARATOR);\n  }\n  writeSeparatorDescending() {\n    this.writeEscapedByteDescending(ESCAPE1);\n    this.writeEscapedByteDescending(SEPARATOR);\n  }\n  writeEscapedByteAscending(b) {\n    this.ensureAvailable(1);\n    this.buffer[this.position++] = b;\n  }\n  writeEscapedByteDescending(b) {\n    this.ensureAvailable(1);\n    this.buffer[this.position++] = ~b;\n  }\n  ensureAvailable(bytes) {\n    const minCapacity = bytes + this.position;\n    if (minCapacity <= this.buffer.length) {\n      return;\n    }\n    // Try doubling.\n    let newLength = this.buffer.length * 2;\n    // Still not big enough? Just allocate the right size.\n    if (newLength < minCapacity) {\n      newLength = minCapacity;\n    }\n    // Create the new buffer.\n    const newBuffer = new Uint8Array(newLength);\n    newBuffer.set(this.buffer); // copy old data\n    this.buffer = newBuffer;\n  }\n}\nclass AscendingIndexByteEncoder {\n  constructor(orderedCode) {\n    this.orderedCode = orderedCode;\n  }\n  writeBytes(value) {\n    this.orderedCode.writeBytesAscending(value);\n  }\n  writeString(value) {\n    this.orderedCode.writeUtf8Ascending(value);\n  }\n  writeNumber(value) {\n    this.orderedCode.writeNumberAscending(value);\n  }\n  writeInfinity() {\n    this.orderedCode.writeInfinityAscending();\n  }\n}\nclass DescendingIndexByteEncoder {\n  constructor(orderedCode) {\n    this.orderedCode = orderedCode;\n  }\n  writeBytes(value) {\n    this.orderedCode.writeBytesDescending(value);\n  }\n  writeString(value) {\n    this.orderedCode.writeUtf8Descending(value);\n  }\n  writeNumber(value) {\n    this.orderedCode.writeNumberDescending(value);\n  }\n  writeInfinity() {\n    this.orderedCode.writeInfinityDescending();\n  }\n}\n/**\n * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the\n * actual encoding.\n */\nclass IndexByteEncoder {\n  constructor() {\n    this.orderedCode = new OrderedCodeWriter();\n    this.ascending = new AscendingIndexByteEncoder(this.orderedCode);\n    this.descending = new DescendingIndexByteEncoder(this.orderedCode);\n  }\n  seed(encodedBytes) {\n    this.orderedCode.seed(encodedBytes);\n  }\n  forKind(kind) {\n    return kind === 0 /* IndexKind.ASCENDING */ ? this.ascending : this.descending;\n  }\n  encodedBytes() {\n    return this.orderedCode.encodedBytes();\n  }\n  reset() {\n    this.orderedCode.reset();\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Represents an index entry saved by the SDK in persisted storage. */\nclass IndexEntry {\n  constructor(indexId, documentKey, arrayValue, directionalValue) {\n    this.indexId = indexId;\n    this.documentKey = documentKey;\n    this.arrayValue = arrayValue;\n    this.directionalValue = directionalValue;\n  }\n  /**\n   * Returns an IndexEntry entry that sorts immediately after the current\n   * directional value.\n   */\n  successor() {\n    const currentLength = this.directionalValue.length;\n    const newLength = currentLength === 0 || this.directionalValue[currentLength - 1] === 255 ? currentLength + 1 : currentLength;\n    const successor = new Uint8Array(newLength);\n    successor.set(this.directionalValue, 0);\n    if (newLength !== currentLength) {\n      successor.set([0], this.directionalValue.length);\n    } else {\n      ++successor[successor.length - 1];\n    }\n    return new IndexEntry(this.indexId, this.documentKey, this.arrayValue, successor);\n  }\n}\nfunction indexEntryComparator(left, right) {\n  let cmp = left.indexId - right.indexId;\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = compareByteArrays(left.arrayValue, right.arrayValue);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = compareByteArrays(left.directionalValue, right.directionalValue);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return DocumentKey.comparator(left.documentKey, right.documentKey);\n}\nfunction compareByteArrays(left, right) {\n  for (let i = 0; i < left.length && i < right.length; ++i) {\n    const compare = left[i] - right[i];\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n  return left.length - right.length;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light query planner for Firestore.\n *\n * This class matches a `FieldIndex` against a Firestore Query `Target`. It\n * determines whether a given index can be used to serve the specified target.\n *\n * The following table showcases some possible index configurations:\n *\n * Query                                               | Index\n * -----------------------------------------------------------------------------\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC\n * where('a', '==', 'a').where('b', '==', 'b')         | b DESC\n * where('a', '>=', 'a').orderBy('a')                  | a ASC\n * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS\n */\nclass TargetIndexMatcher {\n  constructor(target) {\n    // The inequality filters of the target (if it exists).\n    // Note: The sort on FieldFilters is not required. Using SortedSet here just to utilize the custom\n    // comparator.\n    this.inequalityFilters = new SortedSet((lhs, rhs) => FieldPath$1.comparator(lhs.field, rhs.field));\n    this.collectionId = target.collectionGroup != null ? target.collectionGroup : target.path.lastSegment();\n    this.orderBys = target.orderBy;\n    this.equalityFilters = [];\n    for (const filter of target.filters) {\n      const fieldFilter = filter;\n      if (fieldFilter.isInequality()) {\n        this.inequalityFilters = this.inequalityFilters.add(fieldFilter);\n      } else {\n        this.equalityFilters.push(fieldFilter);\n      }\n    }\n  }\n  get hasMultipleInequality() {\n    return this.inequalityFilters.size > 1;\n  }\n  /**\n   * Returns whether the index can be used to serve the TargetIndexMatcher's\n   * target.\n   *\n   * An index is considered capable of serving the target when:\n   * - The target uses all index segments for its filters and orderBy clauses.\n   *   The target can have additional filter and orderBy clauses, but not\n   *   fewer.\n   * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also\n   *   have a corresponding `CONTAINS` segment.\n   * - All directional index segments can be mapped to the target as a series of\n   *   equality filters, a single inequality filter and a series of orderBy\n   *   clauses.\n   * - The segments that represent the equality filters may appear out of order.\n   * - The optional segment for the inequality filter must appear after all\n   *   equality segments.\n   * - The segments that represent that orderBy clause of the target must appear\n   *   in order after all equality and inequality segments. Single orderBy\n   *   clauses cannot be skipped, but a continuous orderBy suffix may be\n   *   omitted.\n   */\n  servedByIndex(index) {\n    hardAssert(index.collectionGroup === this.collectionId);\n    if (this.hasMultipleInequality) {\n      // Only single inequality is supported for now.\n      // TODO(Add support for multiple inequality query): b/298441043\n      return false;\n    }\n    // If there is an array element, find a matching filter.\n    const arraySegment = fieldIndexGetArraySegment(index);\n    if (arraySegment !== undefined && !this.hasMatchingEqualityFilter(arraySegment)) {\n      return false;\n    }\n    const segments = fieldIndexGetDirectionalSegments(index);\n    let equalitySegments = new Set();\n    let segmentIndex = 0;\n    let orderBysIndex = 0;\n    // Process all equalities first. Equalities can appear out of order.\n    for (; segmentIndex < segments.length; ++segmentIndex) {\n      // We attempt to greedily match all segments to equality filters. If a\n      // filter matches an index segment, we can mark the segment as used.\n      if (this.hasMatchingEqualityFilter(segments[segmentIndex])) {\n        equalitySegments = equalitySegments.add(segments[segmentIndex].fieldPath.canonicalString());\n      } else {\n        // If we cannot find a matching filter, we need to verify whether the\n        // remaining segments map to the target's inequality and its orderBy\n        // clauses.\n        break;\n      }\n    }\n    // If we already have processed all segments, all segments are used to serve\n    // the equality filters and we do not need to map any segments to the\n    // target's inequality and orderBy clauses.\n    if (segmentIndex === segments.length) {\n      return true;\n    }\n    if (this.inequalityFilters.size > 0) {\n      // Only a single inequality is currently supported. Get the only entry in the set.\n      const inequalityFilter = this.inequalityFilters.getIterator().getNext();\n      // If there is an inequality filter and the field was not in one of the\n      // equality filters above, the next segment must match both the filter\n      // and the first orderBy clause.\n      if (!equalitySegments.has(inequalityFilter.field.canonicalString())) {\n        const segment = segments[segmentIndex];\n        if (!this.matchesFilter(inequalityFilter, segment) || !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\n          return false;\n        }\n      }\n      ++segmentIndex;\n    }\n    // All remaining segments need to represent the prefix of the target's\n    // orderBy.\n    for (; segmentIndex < segments.length; ++segmentIndex) {\n      const segment = segments[segmentIndex];\n      if (orderBysIndex >= this.orderBys.length || !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns a full matched field index for this target. Currently multiple\n   * inequality query is not supported so function returns null.\n   */\n  buildTargetIndex() {\n    if (this.hasMultipleInequality) {\n      return null;\n    }\n    // We want to make sure only one segment created for one field. For example,\n    // in case like a == 3 and a > 2, Index {a ASCENDING} will only be created\n    // once.\n    let uniqueFields = new SortedSet(FieldPath$1.comparator);\n    const segments = [];\n    for (const filter of this.equalityFilters) {\n      if (filter.field.isKeyField()) {\n        continue;\n      }\n      const isArrayOperator = filter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || filter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n      if (isArrayOperator) {\n        segments.push(new IndexSegment(filter.field, 2 /* IndexKind.CONTAINS */));\n      } else {\n        if (uniqueFields.has(filter.field)) {\n          continue;\n        }\n        uniqueFields = uniqueFields.add(filter.field);\n        segments.push(new IndexSegment(filter.field, 0 /* IndexKind.ASCENDING */));\n      }\n    }\n    // Note: We do not explicitly check `this.inequalityFilter` but rather rely\n    // on the target defining an appropriate \"order by\" to ensure that the\n    // required index segment is added. The query engine would reject a query\n    // with an inequality filter that lacks the required order-by clause.\n    for (const orderBy of this.orderBys) {\n      // Stop adding more segments if we see a order-by on key. Typically this\n      // is the default implicit order-by which is covered in the index_entry\n      // table as a separate column. If it is not the default order-by, the\n      // generated index will be missing some segments optimized for order-bys,\n      // which is probably fine.\n      if (orderBy.field.isKeyField()) {\n        continue;\n      }\n      if (uniqueFields.has(orderBy.field)) {\n        continue;\n      }\n      uniqueFields = uniqueFields.add(orderBy.field);\n      segments.push(new IndexSegment(orderBy.field, orderBy.dir === \"asc\" /* Direction.ASCENDING */ ? 0 /* IndexKind.ASCENDING */ : 1 /* IndexKind.DESCENDING */));\n    }\n    return new FieldIndex(FieldIndex.UNKNOWN_ID, this.collectionId, segments, IndexState.empty());\n  }\n  hasMatchingEqualityFilter(segment) {\n    for (const filter of this.equalityFilters) {\n      if (this.matchesFilter(filter, segment)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  matchesFilter(filter, segment) {\n    if (filter === undefined || !filter.field.isEqual(segment.fieldPath)) {\n      return false;\n    }\n    const isArrayOperator = filter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || filter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n    return segment.kind === 2 /* IndexKind.CONTAINS */ === isArrayOperator;\n  }\n  matchesOrderBy(orderBy, segment) {\n    if (!orderBy.field.isEqual(segment.fieldPath)) {\n      return false;\n    }\n    return segment.kind === 0 /* IndexKind.ASCENDING */ && orderBy.dir === \"asc\" /* Direction.ASCENDING */ || segment.kind === 1 /* IndexKind.DESCENDING */ && orderBy.dir === \"desc\" /* Direction.DESCENDING */;\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides utility functions that help with boolean logic transformations needed for handling\n * complex filters used in queries.\n */\n/**\n * The `in` filter is only a syntactic sugar over a disjunction of equalities. For instance: `a in\n * [1,2,3]` is in fact `a==1 || a==2 || a==3`. This method expands any `in` filter in the given\n * input into a disjunction of equality filters and returns the expanded filter.\n */\nfunction computeInExpansion(filter) {\n  var _a, _b;\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    if (filter instanceof InFilter) {\n      const expandedFilters = ((_b = (_a = filter.value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(value => FieldFilter.create(filter.field, \"==\" /* Operator.EQUAL */, value))) || [];\n      return CompositeFilter.create(expandedFilters, \"or\" /* CompositeOperator.OR */);\n    } else {\n      // We have reached other kinds of field filters.\n      return filter;\n    }\n  }\n  // We have a composite filter.\n  const expandedFilters = filter.filters.map(subfilter => computeInExpansion(subfilter));\n  return CompositeFilter.create(expandedFilters, filter.op);\n}\n/**\n * Given a composite filter, returns the list of terms in its disjunctive normal form.\n *\n * <p>Each element in the return value is one term of the resulting DNF. For instance: For the\n * input: (A || B) && C, the DNF form is: (A && C) || (B && C), and the return value is a list\n * with two elements: a composite filter that performs (A && C), and a composite filter that\n * performs (B && C).\n *\n * @param filter the composite filter to calculate DNF transform for.\n * @return the terms in the DNF transform.\n */\nfunction getDnfTerms(filter) {\n  if (filter.getFilters().length === 0) {\n    return [];\n  }\n  const result = computeDistributedNormalForm(computeInExpansion(filter));\n  hardAssert(isDisjunctiveNormalForm(result));\n  if (isSingleFieldFilter(result) || isFlatConjunction(result)) {\n    return [result];\n  }\n  return result.getFilters();\n}\n/** Returns true if the given filter is a single field filter. e.g. (a == 10). */\nfunction isSingleFieldFilter(filter) {\n  return filter instanceof FieldFilter;\n}\n/**\n * Returns true if the given filter is the conjunction of one or more field filters. e.g. (a == 10\n * && b == 20)\n */\nfunction isFlatConjunction(filter) {\n  return filter instanceof CompositeFilter && compositeFilterIsFlatConjunction(filter);\n}\n/**\n * Returns whether or not the given filter is in disjunctive normal form (DNF).\n *\n * <p>In boolean logic, a disjunctive normal form (DNF) is a canonical normal form of a logical\n * formula consisting of a disjunction of conjunctions; it can also be described as an OR of ANDs.\n *\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Disjunctive_normal_form\n */\nfunction isDisjunctiveNormalForm(filter) {\n  return isSingleFieldFilter(filter) || isFlatConjunction(filter) || isDisjunctionOfFieldFiltersAndFlatConjunctions(filter);\n}\n/**\n * Returns true if the given filter is the disjunction of one or more \"flat conjunctions\" and\n * field filters. e.g. (a == 10) || (b==20 && c==30)\n */\nfunction isDisjunctionOfFieldFiltersAndFlatConjunctions(filter) {\n  if (filter instanceof CompositeFilter) {\n    if (compositeFilterIsDisjunction(filter)) {\n      for (const subFilter of filter.getFilters()) {\n        if (!isSingleFieldFilter(subFilter) && !isFlatConjunction(subFilter)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction computeDistributedNormalForm(filter) {\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    return filter;\n  }\n  if (filter.filters.length === 1) {\n    return computeDistributedNormalForm(filter.filters[0]);\n  }\n  // Compute DNF for each of the subfilters first\n  const result = filter.filters.map(subfilter => computeDistributedNormalForm(subfilter));\n  let newFilter = CompositeFilter.create(result, filter.op);\n  newFilter = applyAssociation(newFilter);\n  if (isDisjunctiveNormalForm(newFilter)) {\n    return newFilter;\n  }\n  hardAssert(newFilter instanceof CompositeFilter);\n  hardAssert(compositeFilterIsConjunction(newFilter));\n  hardAssert(newFilter.filters.length > 1);\n  return newFilter.filters.reduce((runningResult, filter) => applyDistribution(runningResult, filter));\n}\nfunction applyDistribution(lhs, rhs) {\n  hardAssert(lhs instanceof FieldFilter || lhs instanceof CompositeFilter);\n  hardAssert(rhs instanceof FieldFilter || rhs instanceof CompositeFilter);\n  let result;\n  if (lhs instanceof FieldFilter) {\n    if (rhs instanceof FieldFilter) {\n      // FieldFilter FieldFilter\n      result = applyDistributionFieldFilters(lhs, rhs);\n    } else {\n      // FieldFilter CompositeFilter\n      result = applyDistributionFieldAndCompositeFilters(lhs, rhs);\n    }\n  } else {\n    if (rhs instanceof FieldFilter) {\n      // CompositeFilter FieldFilter\n      result = applyDistributionFieldAndCompositeFilters(rhs, lhs);\n    } else {\n      // CompositeFilter CompositeFilter\n      result = applyDistributionCompositeFilters(lhs, rhs);\n    }\n  }\n  return applyAssociation(result);\n}\nfunction applyDistributionFieldFilters(lhs, rhs) {\n  // Conjunction distribution for two field filters is the conjunction of them.\n  return CompositeFilter.create([lhs, rhs], \"and\" /* CompositeOperator.AND */);\n}\nfunction applyDistributionCompositeFilters(lhs, rhs) {\n  hardAssert(lhs.filters.length > 0 && rhs.filters.length > 0);\n  // There are four cases:\n  // (A & B) & (C & D) --> (A & B & C & D)\n  // (A & B) & (C | D) --> (A & B & C) | (A & B & D)\n  // (A | B) & (C & D) --> (C & D & A) | (C & D & B)\n  // (A | B) & (C | D) --> (A & C) | (A & D) | (B & C) | (B & D)\n  // Case 1 is a merge.\n  if (compositeFilterIsConjunction(lhs) && compositeFilterIsConjunction(rhs)) {\n    return compositeFilterWithAddedFilters(lhs, rhs.getFilters());\n  }\n  // Case 2,3,4 all have at least one side (lhs or rhs) that is a disjunction. In all three cases\n  // we should take each element of the disjunction and distribute it over the other side, and\n  // return the disjunction of the distribution results.\n  const disjunctionSide = compositeFilterIsDisjunction(lhs) ? lhs : rhs;\n  const otherSide = compositeFilterIsDisjunction(lhs) ? rhs : lhs;\n  const results = disjunctionSide.filters.map(subfilter => applyDistribution(subfilter, otherSide));\n  return CompositeFilter.create(results, \"or\" /* CompositeOperator.OR */);\n}\nfunction applyDistributionFieldAndCompositeFilters(fieldFilter, compositeFilter) {\n  // There are two cases:\n  // A & (B & C) --> (A & B & C)\n  // A & (B | C) --> (A & B) | (A & C)\n  if (compositeFilterIsConjunction(compositeFilter)) {\n    // Case 1\n    return compositeFilterWithAddedFilters(compositeFilter, fieldFilter.getFilters());\n  } else {\n    // Case 2\n    const newFilters = compositeFilter.filters.map(subfilter => applyDistribution(fieldFilter, subfilter));\n    return CompositeFilter.create(newFilters, \"or\" /* CompositeOperator.OR */);\n  }\n}\n/**\n * Applies the associativity property to the given filter and returns the resulting filter.\n *\n * <ul>\n *   <li>A | (B | C) == (A | B) | C == (A | B | C)\n *   <li>A & (B & C) == (A & B) & C == (A & B & C)\n * </ul>\n *\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Associative_property#Propositional_logic\n */\nfunction applyAssociation(filter) {\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    return filter;\n  }\n  const filters = filter.getFilters();\n  // If the composite filter only contains 1 filter, apply associativity to it.\n  if (filters.length === 1) {\n    return applyAssociation(filters[0]);\n  }\n  // Associativity applied to a flat composite filter results is itself.\n  if (compositeFilterIsFlat(filter)) {\n    return filter;\n  }\n  // First apply associativity to all subfilters. This will in turn recursively apply\n  // associativity to all nested composite filters and field filters.\n  const updatedFilters = filters.map(subfilter => applyAssociation(subfilter));\n  // For composite subfilters that perform the same kind of logical operation as `compositeFilter`\n  // take out their filters and add them to `compositeFilter`. For example:\n  // compositeFilter = (A | (B | C | D))\n  // compositeSubfilter = (B | C | D)\n  // Result: (A | B | C | D)\n  // Note that the `compositeSubfilter` has been eliminated, and its filters (B, C, D) have been\n  // added to the top-level \"compositeFilter\".\n  const newSubfilters = [];\n  updatedFilters.forEach(subfilter => {\n    if (subfilter instanceof FieldFilter) {\n      newSubfilters.push(subfilter);\n    } else if (subfilter instanceof CompositeFilter) {\n      if (subfilter.op === filter.op) {\n        // compositeFilter: (A | (B | C))\n        // compositeSubfilter: (B | C)\n        // Result: (A | B | C)\n        newSubfilters.push(...subfilter.filters);\n      } else {\n        // compositeFilter: (A | (B & C))\n        // compositeSubfilter: (B & C)\n        // Result: (A | (B & C))\n        newSubfilters.push(subfilter);\n      }\n    }\n  });\n  if (newSubfilters.length === 1) {\n    return newSubfilters[0];\n  }\n  return CompositeFilter.create(newSubfilters, filter.op);\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory implementation of IndexManager.\n */\nclass MemoryIndexManager {\n  constructor() {\n    this.collectionParentIndex = new MemoryCollectionParentIndex();\n  }\n  addToCollectionParentIndex(transaction, collectionPath) {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n  getCollectionParents(transaction, collectionId) {\n    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));\n  }\n  addFieldIndex(transaction, index) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  deleteFieldIndex(transaction, index) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  deleteAllFieldIndexes(transaction) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  createTargetIndexes(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  getDocumentsMatchingTarget(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(null);\n  }\n  getIndexType(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(0 /* IndexType.NONE */);\n  }\n  getFieldIndexes(transaction, collectionGroup) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve([]);\n  }\n  getNextCollectionGroupToUpdate(transaction) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(null);\n  }\n  getMinOffset(transaction, target) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  updateCollectionGroup(transaction, collectionGroup, offset) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  updateIndexEntries(transaction, documents) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n}\n/**\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\n * in indexeddb_schema.ts\n */\nclass MemoryCollectionParentIndex {\n  constructor() {\n    this.index = {};\n  }\n  // Returns false if the entry already existed.\n  add(collectionPath) {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n  has(collectionPath) {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n  getEntries(collectionId) {\n    const parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$f = 'IndexedDbIndexManager';\nconst EMPTY_VALUE = new Uint8Array(0);\n/**\n * A persisted implementation of IndexManager.\n *\n * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index\n * data as it supports multi-tab access.\n */\nclass IndexedDbIndexManager {\n  constructor(user, databaseId) {\n    this.databaseId = databaseId;\n    /**\n     * An in-memory copy of the index entries we've already written since the SDK\n     * launched. Used to avoid re-writing the same entry repeatedly.\n     *\n     * This is *NOT* a complete cache of what's in persistence and so can never be\n     * used to satisfy reads.\n     */\n    this.collectionParentsCache = new MemoryCollectionParentIndex();\n    /**\n     * Maps from a target to its equivalent list of sub-targets. Each sub-target\n     * contains only one term from the target's disjunctive normal form (DNF).\n     */\n    this.targetToDnfSubTargets = new ObjectMap(t => canonifyTarget(t), (l, r) => targetEquals(l, r));\n    this.uid = user.uid || '';\n  }\n  /**\n   * Adds a new entry to the collection parent index.\n   *\n   * Repeated calls for the same collectionPath should be avoided within a\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\n   * has been committed.\n   */\n  addToCollectionParentIndex(transaction, collectionPath) {\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      const collectionId = collectionPath.lastSegment();\n      const parentPath = collectionPath.popLast();\n      transaction.addOnCommittedListener(() => {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        this.collectionParentsCache.add(collectionPath);\n      });\n      const collectionParent = {\n        collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n    return PersistencePromise.resolve();\n  }\n  getCollectionParents(transaction, collectionId) {\n    const parentPaths = [];\n    const range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''], /*lowerOpen=*/false, /*upperOpen=*/true);\n    return collectionParentsStore(transaction).loadAll(range).next(entries => {\n      for (const entry of entries) {\n        // This collectionId guard shouldn't be necessary (and isn't as long\n        // as we're running in a real browser), but there's a bug in\n        // indexeddbshim that breaks our range in our tests running in node:\n        // https://github.com/axemclion/IndexedDBShim/issues/334\n        if (entry.collectionId !== collectionId) {\n          break;\n        }\n        parentPaths.push(decodeResourcePath(entry.parent));\n      }\n      return parentPaths;\n    });\n  }\n  addFieldIndex(transaction, index) {\n    // TODO(indexing): Verify that the auto-incrementing index ID works in\n    // Safari & Firefox.\n    const indexes = indexConfigurationStore(transaction);\n    const dbIndex = toDbIndexConfiguration(index);\n    delete dbIndex.indexId; // `indexId` is auto-populated by IndexedDb\n    const result = indexes.add(dbIndex);\n    if (index.indexState) {\n      const states = indexStateStore(transaction);\n      return result.next(indexId => {\n        states.put(toDbIndexState(indexId, this.uid, index.indexState.sequenceNumber, index.indexState.offset));\n      });\n    } else {\n      return result.next();\n    }\n  }\n  deleteFieldIndex(transaction, index) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    const entries = indexEntriesStore(transaction);\n    return indexes.delete(index.indexId).next(() => states.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], /*lowerOpen=*/false, /*upperOpen=*/true))).next(() => entries.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], /*lowerOpen=*/false, /*upperOpen=*/true)));\n  }\n  deleteAllFieldIndexes(transaction) {\n    const indexes = indexConfigurationStore(transaction);\n    const entries = indexEntriesStore(transaction);\n    const states = indexStateStore(transaction);\n    return indexes.deleteAll().next(() => entries.deleteAll()).next(() => states.deleteAll());\n  }\n  createTargetIndexes(transaction, target) {\n    return PersistencePromise.forEach(this.getSubTargets(target), subTarget => {\n      return this.getIndexType(transaction, subTarget).next(type => {\n        if (type === 0 /* IndexType.NONE */ || type === 1 /* IndexType.PARTIAL */) {\n          const targetIndexMatcher = new TargetIndexMatcher(subTarget);\n          const fieldIndex = targetIndexMatcher.buildTargetIndex();\n          if (fieldIndex != null) {\n            return this.addFieldIndex(transaction, fieldIndex);\n          }\n        }\n      });\n    });\n  }\n  getDocumentsMatchingTarget(transaction, target) {\n    const indexEntries = indexEntriesStore(transaction);\n    let canServeTarget = true;\n    const indexes = new Map();\n    return PersistencePromise.forEach(this.getSubTargets(target), subTarget => {\n      return this.getFieldIndex(transaction, subTarget).next(index => {\n        canServeTarget && (canServeTarget = !!index);\n        indexes.set(subTarget, index);\n      });\n    }).next(() => {\n      if (!canServeTarget) {\n        return PersistencePromise.resolve(null);\n      } else {\n        let existingKeys = documentKeySet();\n        const result = [];\n        return PersistencePromise.forEach(indexes, (index, subTarget) => {\n          logDebug(LOG_TAG$f, `Using index ${fieldIndexToString(index)} to execute ${canonifyTarget(target)}`);\n          const arrayValues = targetGetArrayValues(subTarget, index);\n          const notInValues = targetGetNotInValues(subTarget, index);\n          const lowerBound = targetGetLowerBound(subTarget, index);\n          const upperBound = targetGetUpperBound(subTarget, index);\n          const lowerBoundEncoded = this.encodeBound(index, subTarget, lowerBound);\n          const upperBoundEncoded = this.encodeBound(index, subTarget, upperBound);\n          const notInEncoded = this.encodeValues(index, subTarget, notInValues);\n          const indexRanges = this.generateIndexRanges(index.indexId, arrayValues, lowerBoundEncoded, lowerBound.inclusive, upperBoundEncoded, upperBound.inclusive, notInEncoded);\n          return PersistencePromise.forEach(indexRanges, indexRange => {\n            return indexEntries.loadFirst(indexRange, target.limit).next(entries => {\n              entries.forEach(entry => {\n                const documentKey = DocumentKey.fromSegments(entry.documentKey);\n                if (!existingKeys.has(documentKey)) {\n                  existingKeys = existingKeys.add(documentKey);\n                  result.push(documentKey);\n                }\n              });\n            });\n          });\n        }).next(() => result);\n      }\n    });\n  }\n  getSubTargets(target) {\n    let subTargets = this.targetToDnfSubTargets.get(target);\n    if (subTargets) {\n      return subTargets;\n    }\n    if (target.filters.length === 0) {\n      subTargets = [target];\n    } else {\n      // There is an implicit AND operation between all the filters stored in the target\n      const dnf = getDnfTerms(CompositeFilter.create(target.filters, \"and\" /* CompositeOperator.AND */));\n      subTargets = dnf.map(term => newTarget(target.path, target.collectionGroup, target.orderBy, term.getFilters(), target.limit, target.startAt, target.endAt));\n    }\n    this.targetToDnfSubTargets.set(target, subTargets);\n    return subTargets;\n  }\n  /**\n   * Constructs a key range query on `DbIndexEntryStore` that unions all\n   * bounds.\n   */\n  generateIndexRanges(indexId, arrayValues, lowerBounds, lowerBoundInclusive, upperBounds, upperBoundInclusive, notInValues) {\n    // The number of total index scans we union together. This is similar to a\n    // distributed normal form, but adapted for array values. We create a single\n    // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter\n    // combined with the values from the query bounds.\n    const totalScans = (arrayValues != null ? arrayValues.length : 1) * Math.max(lowerBounds.length, upperBounds.length);\n    const scansPerArrayElement = totalScans / (arrayValues != null ? arrayValues.length : 1);\n    const indexRanges = [];\n    for (let i = 0; i < totalScans; ++i) {\n      const arrayValue = arrayValues ? this.encodeSingleElement(arrayValues[i / scansPerArrayElement]) : EMPTY_VALUE;\n      const lowerBound = this.generateLowerBound(indexId, arrayValue, lowerBounds[i % scansPerArrayElement], lowerBoundInclusive);\n      const upperBound = this.generateUpperBound(indexId, arrayValue, upperBounds[i % scansPerArrayElement], upperBoundInclusive);\n      const notInBound = notInValues.map(notIn => this.generateLowerBound(indexId, arrayValue, notIn, /* inclusive= */true));\n      indexRanges.push(...this.createRange(lowerBound, upperBound, notInBound));\n    }\n    return indexRanges;\n  }\n  /** Generates the lower bound for `arrayValue` and `directionalValue`. */\n  generateLowerBound(indexId, arrayValue, directionalValue, inclusive) {\n    const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\n    return inclusive ? entry : entry.successor();\n  }\n  /** Generates the upper bound for `arrayValue` and `directionalValue`. */\n  generateUpperBound(indexId, arrayValue, directionalValue, inclusive) {\n    const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\n    return inclusive ? entry.successor() : entry;\n  }\n  getFieldIndex(transaction, target) {\n    const targetIndexMatcher = new TargetIndexMatcher(target);\n    const collectionGroup = target.collectionGroup != null ? target.collectionGroup : target.path.lastSegment();\n    return this.getFieldIndexes(transaction, collectionGroup).next(indexes => {\n      // Return the index with the most number of segments.\n      let index = null;\n      for (const candidate of indexes) {\n        const matches = targetIndexMatcher.servedByIndex(candidate);\n        if (matches && (!index || candidate.fields.length > index.fields.length)) {\n          index = candidate;\n        }\n      }\n      return index;\n    });\n  }\n  getIndexType(transaction, target) {\n    let indexType = 2 /* IndexType.FULL */;\n    const subTargets = this.getSubTargets(target);\n    return PersistencePromise.forEach(subTargets, target => {\n      return this.getFieldIndex(transaction, target).next(index => {\n        if (!index) {\n          indexType = 0 /* IndexType.NONE */;\n        } else if (indexType !== 0 /* IndexType.NONE */ && index.fields.length < targetGetSegmentCount(target)) {\n          indexType = 1 /* IndexType.PARTIAL */;\n        }\n      });\n    }).next(() => {\n      // OR queries have more than one sub-target (one sub-target per DNF term). We currently consider\n      // OR queries that have a `limit` to have a partial index. For such queries we perform sorting\n      // and apply the limit in memory as a post-processing step.\n      if (targetHasLimit(target) && subTargets.length > 1 && indexType === 2 /* IndexType.FULL */) {\n        return 1 /* IndexType.PARTIAL */;\n      }\n      return indexType;\n    });\n  }\n  /**\n   * Returns the byte encoded form of the directional values in the field index.\n   * Returns `null` if the document does not have all fields specified in the\n   * index.\n   */\n  encodeDirectionalElements(fieldIndex, document) {\n    const encoder = new IndexByteEncoder();\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n      const field = document.data.field(segment.fieldPath);\n      if (field == null) {\n        return null;\n      }\n      const directionalEncoder = encoder.forKind(segment.kind);\n      FirestoreIndexValueWriter.INSTANCE.writeIndexValue(field, directionalEncoder);\n    }\n    return encoder.encodedBytes();\n  }\n  /** Encodes a single value to the ascending index format. */\n  encodeSingleElement(value) {\n    const encoder = new IndexByteEncoder();\n    FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, encoder.forKind(0 /* IndexKind.ASCENDING */));\n    return encoder.encodedBytes();\n  }\n  /**\n   * Returns an encoded form of the document key that sorts based on the key\n   * ordering of the field index.\n   */\n  encodeDirectionalKey(fieldIndex, documentKey) {\n    const encoder = new IndexByteEncoder();\n    FirestoreIndexValueWriter.INSTANCE.writeIndexValue(refValue(this.databaseId, documentKey), encoder.forKind(fieldIndexGetKeyOrder(fieldIndex)));\n    return encoder.encodedBytes();\n  }\n  /**\n   * Encodes the given field values according to the specification in `target`.\n   * For IN queries, a list of possible values is returned.\n   */\n  encodeValues(fieldIndex, target, values) {\n    if (values === null) {\n      return [];\n    }\n    let encoders = [];\n    encoders.push(new IndexByteEncoder());\n    let valueIdx = 0;\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n      const value = values[valueIdx++];\n      for (const encoder of encoders) {\n        if (this.isInFilter(target, segment.fieldPath) && isArray(value)) {\n          encoders = this.expandIndexValues(encoders, segment, value);\n        } else {\n          const directionalEncoder = encoder.forKind(segment.kind);\n          FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, directionalEncoder);\n        }\n      }\n    }\n    return this.getEncodedBytes(encoders);\n  }\n  /**\n   * Encodes the given bounds according to the specification in `target`. For IN\n   * queries, a list of possible values is returned.\n   */\n  encodeBound(fieldIndex, target, bound) {\n    return this.encodeValues(fieldIndex, target, bound.position);\n  }\n  /** Returns the byte representation for the provided encoders. */\n  getEncodedBytes(encoders) {\n    const result = [];\n    for (let i = 0; i < encoders.length; ++i) {\n      result[i] = encoders[i].encodedBytes();\n    }\n    return result;\n  }\n  /**\n   * Creates a separate encoder for each element of an array.\n   *\n   * The method appends each value to all existing encoders (e.g. filter(\"a\",\n   * \"==\", \"a1\").filter(\"b\", \"in\", [\"b1\", \"b2\"]) becomes [\"a1,b1\", \"a1,b2\"]). A\n   * list of new encoders is returned.\n   */\n  expandIndexValues(encoders, segment, value) {\n    const prefixes = [...encoders];\n    const results = [];\n    for (const arrayElement of value.arrayValue.values || []) {\n      for (const prefix of prefixes) {\n        const clonedEncoder = new IndexByteEncoder();\n        clonedEncoder.seed(prefix.encodedBytes());\n        FirestoreIndexValueWriter.INSTANCE.writeIndexValue(arrayElement, clonedEncoder.forKind(segment.kind));\n        results.push(clonedEncoder);\n      }\n    }\n    return results;\n  }\n  isInFilter(target, fieldPath) {\n    return !!target.filters.find(f => f instanceof FieldFilter && f.field.isEqual(fieldPath) && (f.op === \"in\" /* Operator.IN */ || f.op === \"not-in\" /* Operator.NOT_IN */));\n  }\n  getFieldIndexes(transaction, collectionGroup) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    return (collectionGroup ? indexes.loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup)) : indexes.loadAll()).next(indexConfigs => {\n      const result = [];\n      return PersistencePromise.forEach(indexConfigs, indexConfig => {\n        return states.get([indexConfig.indexId, this.uid]).next(indexState => {\n          result.push(fromDbIndexConfiguration(indexConfig, indexState));\n        });\n      }).next(() => result);\n    });\n  }\n  getNextCollectionGroupToUpdate(transaction) {\n    return this.getFieldIndexes(transaction).next(indexes => {\n      if (indexes.length === 0) {\n        return null;\n      }\n      indexes.sort((l, r) => {\n        const cmp = l.indexState.sequenceNumber - r.indexState.sequenceNumber;\n        return cmp !== 0 ? cmp : primitiveComparator(l.collectionGroup, r.collectionGroup);\n      });\n      return indexes[0].collectionGroup;\n    });\n  }\n  updateCollectionGroup(transaction, collectionGroup, offset) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    return this.getNextSequenceNumber(transaction).next(nextSequenceNumber => indexes.loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup)).next(configs => PersistencePromise.forEach(configs, config => states.put(toDbIndexState(config.indexId, this.uid, nextSequenceNumber, offset)))));\n  }\n  updateIndexEntries(transaction, documents) {\n    // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as\n    // it could be used across different IndexedDB transactions. As any cached\n    // data might be invalidated by other multi-tab clients, we can only trust\n    // data within a single IndexedDB transaction. We therefore add a cache\n    // here.\n    const memoizedIndexes = new Map();\n    return PersistencePromise.forEach(documents, (key, doc) => {\n      const memoizedCollectionIndexes = memoizedIndexes.get(key.collectionGroup);\n      const fieldIndexes = memoizedCollectionIndexes ? PersistencePromise.resolve(memoizedCollectionIndexes) : this.getFieldIndexes(transaction, key.collectionGroup);\n      return fieldIndexes.next(fieldIndexes => {\n        memoizedIndexes.set(key.collectionGroup, fieldIndexes);\n        return PersistencePromise.forEach(fieldIndexes, fieldIndex => {\n          return this.getExistingIndexEntries(transaction, key, fieldIndex).next(existingEntries => {\n            const newEntries = this.computeIndexEntries(doc, fieldIndex);\n            if (!existingEntries.isEqual(newEntries)) {\n              return this.updateEntries(transaction, doc, fieldIndex, existingEntries, newEntries);\n            }\n            return PersistencePromise.resolve();\n          });\n        });\n      });\n    });\n  }\n  addIndexEntry(transaction, document, fieldIndex, indexEntry) {\n    const indexEntries = indexEntriesStore(transaction);\n    return indexEntries.put({\n      indexId: indexEntry.indexId,\n      uid: this.uid,\n      arrayValue: indexEntry.arrayValue,\n      directionalValue: indexEntry.directionalValue,\n      orderedDocumentKey: this.encodeDirectionalKey(fieldIndex, document.key),\n      documentKey: document.key.path.toArray()\n    });\n  }\n  deleteIndexEntry(transaction, document, fieldIndex, indexEntry) {\n    const indexEntries = indexEntriesStore(transaction);\n    return indexEntries.delete([indexEntry.indexId, this.uid, indexEntry.arrayValue, indexEntry.directionalValue, this.encodeDirectionalKey(fieldIndex, document.key), document.key.path.toArray()]);\n  }\n  getExistingIndexEntries(transaction, documentKey, fieldIndex) {\n    const indexEntries = indexEntriesStore(transaction);\n    let results = new SortedSet(indexEntryComparator);\n    return indexEntries.iterate({\n      index: DbIndexEntryDocumentKeyIndex,\n      range: IDBKeyRange.only([fieldIndex.indexId, this.uid, this.encodeDirectionalKey(fieldIndex, documentKey)])\n    }, (_, entry) => {\n      results = results.add(new IndexEntry(fieldIndex.indexId, documentKey, entry.arrayValue, entry.directionalValue));\n    }).next(() => results);\n  }\n  /** Creates the index entries for the given document. */\n  computeIndexEntries(document, fieldIndex) {\n    let results = new SortedSet(indexEntryComparator);\n    const directionalValue = this.encodeDirectionalElements(fieldIndex, document);\n    if (directionalValue == null) {\n      return results;\n    }\n    const arraySegment = fieldIndexGetArraySegment(fieldIndex);\n    if (arraySegment != null) {\n      const value = document.data.field(arraySegment.fieldPath);\n      if (isArray(value)) {\n        for (const arrayValue of value.arrayValue.values || []) {\n          results = results.add(new IndexEntry(fieldIndex.indexId, document.key, this.encodeSingleElement(arrayValue), directionalValue));\n        }\n      }\n    } else {\n      results = results.add(new IndexEntry(fieldIndex.indexId, document.key, EMPTY_VALUE, directionalValue));\n    }\n    return results;\n  }\n  /**\n   * Updates the index entries for the provided document by deleting entries\n   * that are no longer referenced in `newEntries` and adding all newly added\n   * entries.\n   */\n  updateEntries(transaction, document, fieldIndex, existingEntries, newEntries) {\n    logDebug(LOG_TAG$f, \"Updating index entries for document '%s'\", document.key);\n    const promises = [];\n    diffSortedSets(existingEntries, newEntries, indexEntryComparator, /* onAdd= */entry => {\n      promises.push(this.addIndexEntry(transaction, document, fieldIndex, entry));\n    }, /* onRemove= */entry => {\n      promises.push(this.deleteIndexEntry(transaction, document, fieldIndex, entry));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getNextSequenceNumber(transaction) {\n    let nextSequenceNumber = 1;\n    const states = indexStateStore(transaction);\n    return states.iterate({\n      index: DbIndexStateSequenceNumberIndex,\n      reverse: true,\n      range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])\n    }, (_, state, controller) => {\n      controller.done();\n      nextSequenceNumber = state.sequenceNumber + 1;\n    }).next(() => nextSequenceNumber);\n  }\n  /**\n   * Returns a new set of IDB ranges that splits the existing range and excludes\n   * any values that match the `notInValue` from these ranges. As an example,\n   * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.\n   */\n  createRange(lower, upper, notInValues) {\n    // The notIn values need to be sorted and unique so that we can return a\n    // sorted set of non-overlapping ranges.\n    notInValues = notInValues.sort((l, r) => indexEntryComparator(l, r)).filter((el, i, values) => !i || indexEntryComparator(el, values[i - 1]) !== 0);\n    const bounds = [];\n    bounds.push(lower);\n    for (const notInValue of notInValues) {\n      const cmpToLower = indexEntryComparator(notInValue, lower);\n      const cmpToUpper = indexEntryComparator(notInValue, upper);\n      if (cmpToLower === 0) {\n        // `notInValue` is the lower bound. We therefore need to raise the bound\n        // to the next value.\n        bounds[0] = lower.successor();\n      } else if (cmpToLower > 0 && cmpToUpper < 0) {\n        // `notInValue` is in the middle of the range\n        bounds.push(notInValue);\n        bounds.push(notInValue.successor());\n      } else if (cmpToUpper > 0) {\n        // `notInValue` (and all following values) are out of the range\n        break;\n      }\n    }\n    bounds.push(upper);\n    const ranges = [];\n    for (let i = 0; i < bounds.length; i += 2) {\n      // If we encounter two bounds that will create an unmatchable key range,\n      // then we return an empty set of key ranges.\n      if (this.isRangeMatchable(bounds[i], bounds[i + 1])) {\n        return [];\n      }\n      const lowerBound = [bounds[i].indexId, this.uid, bounds[i].arrayValue, bounds[i].directionalValue, EMPTY_VALUE, []];\n      const upperBound = [bounds[i + 1].indexId, this.uid, bounds[i + 1].arrayValue, bounds[i + 1].directionalValue, EMPTY_VALUE, []];\n      ranges.push(IDBKeyRange.bound(lowerBound, upperBound));\n    }\n    return ranges;\n  }\n  isRangeMatchable(lowerBound, upperBound) {\n    // If lower bound is greater than the upper bound, then the key\n    // range can never be matched.\n    return indexEntryComparator(lowerBound, upperBound) > 0;\n  }\n  getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\n    return this.getFieldIndexes(transaction, collectionGroup).next(getMinOffsetFromFieldIndexes);\n  }\n  getMinOffset(transaction, target) {\n    return PersistencePromise.mapArray(this.getSubTargets(target), subTarget => this.getFieldIndex(transaction, subTarget).next(index => index ? index : fail())).next(getMinOffsetFromFieldIndexes);\n  }\n}\n/**\n * Helper to get a typed SimpleDbStore for the collectionParents\n * document store.\n */\nfunction collectionParentsStore(txn) {\n  return getStore(txn, DbCollectionParentStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the index entry object store.\n */\nfunction indexEntriesStore(txn) {\n  return getStore(txn, DbIndexEntryStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the index configuration object store.\n */\nfunction indexConfigurationStore(txn) {\n  return getStore(txn, DbIndexConfigurationStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the index state object store.\n */\nfunction indexStateStore(txn) {\n  return getStore(txn, DbIndexStateStore);\n}\nfunction getMinOffsetFromFieldIndexes(fieldIndexes) {\n  hardAssert(fieldIndexes.length !== 0);\n  let minOffset = fieldIndexes[0].indexState.offset;\n  let maxBatchId = minOffset.largestBatchId;\n  for (let i = 1; i < fieldIndexes.length; i++) {\n    const newOffset = fieldIndexes[i].indexState.offset;\n    if (indexOffsetComparator(newOffset, minOffset) < 0) {\n      minOffset = newOffset;\n    }\n    if (maxBatchId < newOffset.largestBatchId) {\n      maxBatchId = newOffset.largestBatchId;\n    }\n  }\n  return new IndexOffset(minOffset.readTime, minOffset.documentKey, maxBatchId);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Delete a mutation batch and the associated document mutations.\n * @returns A PersistencePromise of the document mutations that were removed.\n */\nfunction removeMutationBatch(txn, userId, batch) {\n  const mutationStore = txn.store(DbMutationBatchStore);\n  const indexTxn = txn.store(DbDocumentMutationStore);\n  const promises = [];\n  const range = IDBKeyRange.only(batch.batchId);\n  let numDeleted = 0;\n  const removePromise = mutationStore.iterate({\n    range\n  }, (key, value, control) => {\n    numDeleted++;\n    return control.delete();\n  });\n  promises.push(removePromise.next(() => {\n    hardAssert(numDeleted === 1);\n  }));\n  const removedDocuments = [];\n  for (const mutation of batch.mutations) {\n    const indexKey = newDbDocumentMutationKey(userId, mutation.key.path, batch.batchId);\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n  return PersistencePromise.waitFor(promises).next(() => removedDocuments);\n}\n/**\n * Returns an approximate size for the given document.\n */\nfunction dbDocumentSize(doc) {\n  if (!doc) {\n    return 0;\n  }\n  let value;\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail();\n  }\n  return JSON.stringify(value).length;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A mutation queue for a specific user, backed by IndexedDB. */\nclass IndexedDbMutationQueue {\n  constructor(\n  /**\n   * The normalized userId (e.g. null UID => \"\" userId) used to store /\n   * retrieve mutations.\n   */\n  userId, serializer, indexManager, referenceDelegate) {\n    this.userId = userId;\n    this.serializer = serializer;\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\n     * Caches the document keys for pending mutation batches. If the mutation\n     * has been removed from IndexedDb, the cached value may continue to\n     * be used to retrieve the batch's document keys. To remove a cached value\n     * locally, `removeCachedMutationKeys()` should be invoked either directly\n     * or through `removeMutationBatches()`.\n     *\n     * With multi-tab, when the primary client acknowledges or rejects a mutation,\n     * this cache is used by secondary clients to invalidate the local\n     * view of the documents that were previously affected by the mutation.\n     */\n    // PORTING NOTE: Multi-tab only.\n    this.documentKeysByBatchId = {};\n  }\n  /**\n   * Creates a new mutation queue for the given user.\n   * @param user - The user for which to create a mutation queue.\n   * @param serializer - The serializer to use when persisting to IndexedDb.\n   */\n  static forUser(user, serializer, indexManager, referenceDelegate) {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '');\n    const userId = user.isAuthenticated() ? user.uid : '';\n    return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);\n  }\n  checkEmpty(transaction) {\n    let empty = true;\n    const range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range\n    }, (key, value, control) => {\n      empty = false;\n      control.done();\n    }).next(() => empty);\n  }\n  addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\n    const documentStore = documentMutationsStore(transaction);\n    const mutationStore = mutationsStore(transaction);\n    // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return mutationStore.add({}).next(batchId => {\n      hardAssert(typeof batchId === 'number');\n      const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n      const dbBatch = toDbMutationBatch(this.serializer, this.userId, batch);\n      const promises = [];\n      let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\n      for (const mutation of mutations) {\n        const indexKey = newDbDocumentMutationKey(this.userId, mutation.key.path, batchId);\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(documentStore.put(indexKey, DbDocumentMutationPlaceholder));\n      }\n      collectionParents.forEach(parent => {\n        promises.push(this.indexManager.addToCollectionParentIndex(transaction, parent));\n      });\n      transaction.addOnCommittedListener(() => {\n        this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n      return PersistencePromise.waitFor(promises).next(() => batch);\n    });\n  }\n  lookupMutationBatch(transaction, batchId) {\n    return mutationsStore(transaction).get(batchId).next(dbBatch => {\n      if (dbBatch) {\n        hardAssert(dbBatch.userId === this.userId);\n        return fromDbMutationBatch(this.serializer, dbBatch);\n      }\n      return null;\n    });\n  }\n  /**\n   * Returns the document keys for the mutation batch with the given batchId.\n   * For primary clients, this method returns `null` after\n   * `removeMutationBatches()` has been called. Secondary clients return a\n   * cached result until `removeCachedMutationKeys()` is invoked.\n   */\n  // PORTING NOTE: Multi-tab only.\n  lookupMutationKeys(transaction, batchId) {\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(batch => {\n        if (batch) {\n          const keys = batch.keys();\n          this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n  getNextMutationBatchAfterBatchId(transaction, batchId) {\n    const nextBatchId = batchId + 1;\n    const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    let foundBatch = null;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range\n    }, (key, dbBatch, control) => {\n      if (dbBatch.userId === this.userId) {\n        hardAssert(dbBatch.batchId >= nextBatchId);\n        foundBatch = fromDbMutationBatch(this.serializer, dbBatch);\n      }\n      control.done();\n    }).next(() => foundBatch);\n  }\n  getHighestUnacknowledgedBatchId(transaction) {\n    const range = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);\n    let batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range,\n      reverse: true\n    }, (key, dbBatch, control) => {\n      batchId = dbBatch.batchId;\n      control.done();\n    }).next(() => batchId);\n  }\n  getAllMutationBatches(transaction) {\n    const range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).loadAll(DbMutationBatchUserMutationsIndex, range).next(dbBatches => dbBatches.map(dbBatch => fromDbMutationBatch(this.serializer, dbBatch)));\n  }\n  getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\n    // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n    const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n    const results = [];\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, (indexKey, _, control) => {\n      const [userID, encodedPath, batchId] = indexKey;\n      // Only consider rows matching exactly the specific key of\n      // interest. Note that because we order by path first, and we\n      // order terminators before path separators, we'll encounter all\n      // the index rows for documentKey contiguously. In particular, all\n      // the rows for documentKey will occur before any rows for\n      // documents nested in a subcollection beneath documentKey so we\n      // can stop as soon as we hit any such row.\n      const path = decodeResourcePath(encodedPath);\n      if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n        control.done();\n        return;\n      }\n      // Look up the mutation batch in the store.\n      return mutationsStore(transaction).get(batchId).next(mutation => {\n        if (!mutation) {\n          throw fail();\n        }\n        hardAssert(mutation.userId === this.userId);\n        results.push(fromDbMutationBatch(this.serializer, mutation));\n      });\n    }).next(() => results);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    const promises = [];\n    documentKeys.forEach(documentKey => {\n      const indexStart = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\n      const range = IDBKeyRange.lowerBound(indexStart);\n      const promise = documentMutationsStore(transaction).iterate({\n        range\n      }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchID] = indexKey;\n        // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      });\n      promises.push(promise);\n    });\n    return PersistencePromise.waitFor(promises).next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n  getAllMutationBatchesAffectingQuery(transaction, query) {\n    const queryPath = query.path;\n    const immediateChildrenLength = queryPath.length + 1;\n    // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n    const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, queryPath);\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n    // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, (indexKey, _, control) => {\n      const [userID, encodedPath, batchID] = indexKey;\n      const path = decodeResourcePath(encodedPath);\n      if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\n        control.done();\n        return;\n      }\n      // Rows with document keys more than one segment longer than the\n      // query path can't be matches. For example, a query on 'rooms'\n      // can't match the document /rooms/abc/messages/xyx.\n      // TODO(mcg): we'll need a different scanner when we implement\n      // ancestor queries.\n      if (path.length !== immediateChildrenLength) {\n        return;\n      }\n      uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n    }).next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n  lookupMutationBatches(transaction, batchIDs) {\n    const results = [];\n    const promises = [];\n    // TODO(rockwood): Implement this using iterate.\n    batchIDs.forEach(batchId => {\n      promises.push(mutationsStore(transaction).get(batchId).next(mutation => {\n        if (mutation === null) {\n          throw fail();\n        }\n        hardAssert(mutation.userId === this.userId);\n        results.push(fromDbMutationBatch(this.serializer, mutation));\n      }));\n    });\n    return PersistencePromise.waitFor(promises).next(() => results);\n  }\n  removeMutationBatch(transaction, batch) {\n    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(removedDocuments => {\n      transaction.addOnCommittedListener(() => {\n        this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(removedDocuments, key => {\n        return this.referenceDelegate.markPotentiallyOrphaned(transaction, key);\n      });\n    });\n  }\n  /**\n   * Clears the cached keys for a mutation batch. This method should be\n   * called by secondary clients after they process mutation updates.\n   *\n   * Note that this method does not have to be called from primary clients as\n   * the corresponding cache entries are cleared when an acknowledged or\n   * rejected batch is removed from the mutation queue.\n   */\n  // PORTING NOTE: Multi-tab only\n  removeCachedMutationKeys(batchId) {\n    delete this.documentKeysByBatchId[batchId];\n  }\n  performConsistencyCheck(txn) {\n    return this.checkEmpty(txn).next(empty => {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      }\n      // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n      const startRange = IDBKeyRange.lowerBound(newDbDocumentMutationPrefixForUser(this.userId));\n      const danglingMutationReferences = [];\n      return documentMutationsStore(txn).iterate({\n        range: startRange\n      }, (key, _, control) => {\n        const userID = key[0];\n        if (userID !== this.userId) {\n          control.done();\n          return;\n        } else {\n          const path = decodeResourcePath(key[1]);\n          danglingMutationReferences.push(path);\n        }\n      }).next(() => {\n        hardAssert(danglingMutationReferences.length === 0);\n      });\n    });\n  }\n  containsKey(txn, key) {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }\n  // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n  /** Returns the mutation queue's metadata from IndexedDb. */\n  getMutationQueueMetadata(transaction) {\n    return mutationQueuesStore(transaction).get(this.userId).next(metadata => {\n      return metadata || {\n        userId: this.userId,\n        lastAcknowledgedBatchId: BATCHID_UNKNOWN,\n        lastStreamToken: ''\n      };\n    });\n  }\n}\n/**\n * @returns true if the mutation queue for the given user contains a pending\n *         mutation for the given key.\n */\nfunction mutationQueueContainsKey(txn, userId, key) {\n  const indexKey = newDbDocumentMutationPrefixForPath(userId, key.path);\n  const encodedPath = indexKey[1];\n  const startRange = IDBKeyRange.lowerBound(indexKey);\n  let containsKey = false;\n  return documentMutationsStore(txn).iterate({\n    range: startRange,\n    keysOnly: true\n  }, (key, value, control) => {\n    const [userID, keyPath, /*batchID*/_] = key;\n    if (userID === userId && keyPath === encodedPath) {\n      containsKey = true;\n    }\n    control.done();\n  }).next(() => containsKey);\n}\n/** Returns true if any mutation queue contains the given document. */\nfunction mutationQueuesContainKey(txn, docKey) {\n  let found = false;\n  return mutationQueuesStore(txn).iterateSerial(userId => {\n    return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\n      if (containsKey) {\n        found = true;\n      }\n      return PersistencePromise.resolve(!containsKey);\n    });\n  }).next(() => found);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutations object store.\n */\nfunction mutationsStore(txn) {\n  return getStore(txn, DbMutationBatchStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction documentMutationsStore(txn) {\n  return getStore(txn, DbDocumentMutationStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\n */\nfunction mutationQueuesStore(txn) {\n  return getStore(txn, DbMutationQueueStore);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n/**\n * Generates monotonically increasing target IDs for sending targets to the\n * watch stream.\n *\n * The client constructs two generators, one for the target cache, and one for\n * for the sync engine (to generate limbo documents targets). These\n * generators produce non-overlapping IDs (by using even and odd IDs\n * respectively).\n *\n * By separating the target ID space, the query cache can generate target IDs\n * that persist across client restarts, while sync engine can independently\n * generate in-memory target IDs that are transient and can be reused after a\n * restart.\n */\nclass TargetIdGenerator {\n  constructor(lastId) {\n    this.lastId = lastId;\n  }\n  next() {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n  static forTargetCache() {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n  static forSyncEngine() {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass IndexedDbTargetCache {\n  constructor(referenceDelegate, serializer) {\n    this.referenceDelegate = referenceDelegate;\n    this.serializer = serializer;\n  }\n  // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n  allocateTargetId(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return this.saveMetadata(transaction, metadata).next(() => metadata.highestTargetId);\n    });\n  }\n  getLastRemoteSnapshotVersion(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));\n    });\n  }\n  getHighestSequenceNumber(transaction) {\n    return this.retrieveMetadata(transaction).next(targetGlobal => targetGlobal.highestListenSequenceNumber);\n  }\n  setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n  addTargetData(transaction, targetData) {\n    return this.saveTargetData(transaction, targetData).next(() => {\n      return this.retrieveMetadata(transaction).next(metadata => {\n        metadata.targetCount += 1;\n        this.updateMetadataFromTargetData(targetData, metadata);\n        return this.saveMetadata(transaction, metadata);\n      });\n    });\n  }\n  updateTargetData(transaction, targetData) {\n    return this.saveTargetData(transaction, targetData);\n  }\n  removeTargetData(transaction, targetData) {\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(() => targetsStore(transaction).delete(targetData.targetId)).next(() => this.retrieveMetadata(transaction)).next(metadata => {\n      hardAssert(metadata.targetCount > 0);\n      metadata.targetCount -= 1;\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n  /**\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\n   * Returns the number of targets removed.\n   */\n  removeTargets(txn, upperBound, activeTargetIds) {\n    let count = 0;\n    const promises = [];\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        count++;\n        promises.push(this.removeTargetData(txn, targetData));\n      }\n    }).next(() => PersistencePromise.waitFor(promises)).next(() => count);\n  }\n  /**\n   * Call provided function with each `TargetData` that we have cached.\n   */\n  forEachTarget(txn, f) {\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      f(targetData);\n    });\n  }\n  retrieveMetadata(transaction) {\n    return globalTargetStore(transaction).get(DbTargetGlobalKey).next(metadata => {\n      hardAssert(metadata !== null);\n      return metadata;\n    });\n  }\n  saveMetadata(transaction, metadata) {\n    return globalTargetStore(transaction).put(DbTargetGlobalKey, metadata);\n  }\n  saveTargetData(transaction, targetData) {\n    return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));\n  }\n  /**\n   * In-place updates the provided metadata to account for values in the given\n   * TargetData. Saving is done separately. Returns true if there were any\n   * changes to the metadata.\n   */\n  updateMetadataFromTargetData(targetData, metadata) {\n    let updated = false;\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n    return updated;\n  }\n  getTargetCount(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => metadata.targetCount);\n  }\n  getTargetData(transaction, target) {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    const canonicalId = canonifyTarget(target);\n    const range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n    let result = null;\n    return targetsStore(transaction).iterate({\n      range,\n      index: DbTargetQueryTargetsIndexName\n    }, (key, value, control) => {\n      const found = fromDbTarget(value);\n      // After finding a potential match, check that the target is\n      // actually equal to the requested target.\n      if (targetEquals(target, found.target)) {\n        result = found;\n        control.done();\n      }\n    }).next(() => result);\n  }\n  addMatchingKeys(txn, keys, targetId) {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const promises = [];\n    const store = documentTargetStore(txn);\n    keys.forEach(key => {\n      const path = encodeResourcePath(key.path);\n      promises.push(store.put({\n        targetId,\n        path\n      }));\n      promises.push(this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  removeMatchingKeys(txn, keys, targetId) {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, key => {\n      const path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([store.delete([targetId, path]), this.referenceDelegate.removeReference(txn, targetId, key)]);\n    });\n  }\n  removeMatchingKeysForTargetId(txn, targetId) {\n    const store = documentTargetStore(txn);\n    const range = IDBKeyRange.bound([targetId], [targetId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n    return store.delete(range);\n  }\n  getMatchingKeysForTargetId(txn, targetId) {\n    const range = IDBKeyRange.bound([targetId], [targetId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n    const store = documentTargetStore(txn);\n    let result = documentKeySet();\n    return store.iterate({\n      range,\n      keysOnly: true\n    }, (key, _, control) => {\n      const path = decodeResourcePath(key[1]);\n      const docKey = new DocumentKey(path);\n      result = result.add(docKey);\n    }).next(() => result);\n  }\n  containsKey(txn, key) {\n    const path = encodeResourcePath(key.path);\n    const range = IDBKeyRange.bound([path], [immediateSuccessor(path)], /*lowerOpen=*/false, /*upperOpen=*/true);\n    let count = 0;\n    return documentTargetStore(txn).iterate({\n      index: DbTargetDocumentDocumentTargetsIndex,\n      keysOnly: true,\n      range\n    }, ([targetId, path], _, control) => {\n      // Having a sentinel row for a document does not count as containing that document;\n      // For the target cache, containing the document means the document is part of some\n      // target.\n      if (targetId !== 0) {\n        count++;\n        control.done();\n      }\n    }).next(() => count > 0);\n  }\n  /**\n   * Looks up a TargetData entry by target ID.\n   *\n   * @param targetId - The target ID of the TargetData entry to look up.\n   * @returns The cached TargetData entry, or null if the cache has no entry for\n   * the target.\n   */\n  // PORTING NOTE: Multi-tab only.\n  getTargetDataForTarget(transaction, targetId) {\n    return targetsStore(transaction).get(targetId).next(found => {\n      if (found) {\n        return fromDbTarget(found);\n      } else {\n        return null;\n      }\n    });\n  }\n}\n/**\n * Helper to get a typed SimpleDbStore for the queries object store.\n */\nfunction targetsStore(txn) {\n  return getStore(txn, DbTargetStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the target globals object store.\n */\nfunction globalTargetStore(txn) {\n  return getStore(txn, DbTargetGlobalStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the document target object store.\n */\nfunction documentTargetStore(txn) {\n  return getStore(txn, DbTargetDocumentStore);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst GC_DID_NOT_RUN = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\nconst LRU_COLLECTION_DISABLED = -1;\nconst LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\nclass LruParams {\n  static withCacheSize(cacheSize) {\n    return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\n  }\n  constructor(\n  // When we attempt to collect, we will only do so if the cache size is greater than this\n  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n  cacheSizeCollectionThreshold,\n  // The percentage of sequence numbers that we will attempt to collect\n  percentileToCollect,\n  // A cap on the total number of sequence numbers that will be collected. This prevents\n  // us from collecting a huge number of sequence numbers if the cache has grown very large.\n  maximumSequenceNumbersToCollect) {\n    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;\n    this.percentileToCollect = percentileToCollect;\n    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;\n  }\n}\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10;\nLruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\nLruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\nLruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$e = 'LruGarbageCollector';\nconst LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\nfunction bufferEntryComparator([aSequence, aIndex], [bSequence, bIndex]) {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n/**\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\n * lowest n values passed to `addElement`, and finally reports the largest of\n * them in `maxValue`.\n */\nclass RollingSequenceNumberBuffer {\n  constructor(maxElements) {\n    this.maxElements = maxElements;\n    this.buffer = new SortedSet(bufferEntryComparator);\n    this.previousIndex = 0;\n  }\n  nextIndex() {\n    return ++this.previousIndex;\n  }\n  addElement(sequenceNumber) {\n    const entry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last();\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n  get maxValue() {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()[0];\n  }\n}\n/**\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\n * whether or not GC is enabled, as well as which delay to use before the next run.\n */\nclass LruScheduler {\n  constructor(garbageCollector, asyncQueue, localStore) {\n    this.garbageCollector = garbageCollector;\n    this.asyncQueue = asyncQueue;\n    this.localStore = localStore;\n    this.gcTask = null;\n  }\n  start() {\n    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LRU_COLLECTION_DISABLED) {\n      this.scheduleGC(INITIAL_GC_DELAY_MS);\n    }\n  }\n  stop() {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n  get started() {\n    return this.gcTask !== null;\n  }\n  scheduleGC(delay) {\n    logDebug(LOG_TAG$e, `Garbage collection scheduled in ${delay}ms`);\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\" /* TimerId.LruGarbageCollection */, delay, async () => {\n      this.gcTask = null;\n      try {\n        await this.localStore.collectGarbage(this.garbageCollector);\n      } catch (e) {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG$e, 'Ignoring IndexedDB error during garbage collection: ', e);\n        } else {\n          await ignoreIfPrimaryLeaseLoss(e);\n        }\n      }\n      await this.scheduleGC(REGULAR_GC_DELAY_MS);\n    });\n  }\n}\n/**\n * Implements the steps for LRU garbage collection.\n */\nclass LruGarbageCollectorImpl {\n  constructor(delegate, params) {\n    this.delegate = delegate;\n    this.params = params;\n  }\n  calculateTargetCount(txn, percentile) {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor(percentile / 100.0 * targetCount);\n    });\n  }\n  nthSequenceNumber(txn, n) {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate.forEachTarget(txn, target => buffer.addElement(target.sequenceNumber)).next(() => {\n      return this.delegate.forEachOrphanedDocumentSequenceNumber(txn, sequenceNumber => buffer.addElement(sequenceNumber));\n    }).next(() => buffer.maxValue);\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n  collect(txn, activeTargetIds) {\n    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug('LruGarbageCollector', `Garbage collection skipped; Cache size ${cacheSize} ` + `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`);\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n  getCacheSize(txn) {\n    return this.delegate.getCacheSize(txn);\n  }\n  runGarbageCollection(txn, activeTargetIds) {\n    let upperBoundSequenceNumber;\n    let sequenceNumbersToCollect, targetsRemoved;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(sequenceNumbers => {\n      // Cap at the configured max\n      if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n        logDebug('LruGarbageCollector', 'Capping sequence numbers to collect down ' + `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` + `from ${sequenceNumbers}`);\n        sequenceNumbersToCollect = this.params.maximumSequenceNumbersToCollect;\n      } else {\n        sequenceNumbersToCollect = sequenceNumbers;\n      }\n      countedTargetsTs = Date.now();\n      return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n    }).next(upperBound => {\n      upperBoundSequenceNumber = upperBound;\n      foundUpperBoundTs = Date.now();\n      return this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);\n    }).next(numTargetsRemoved => {\n      targetsRemoved = numTargetsRemoved;\n      removedTargetsTs = Date.now();\n      return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n    }).next(documentsRemoved => {\n      removedDocumentsTs = Date.now();\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        const desc = 'LRU Garbage Collection\\n' + `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` + `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` + `${foundUpperBoundTs - countedTargetsTs}ms\\n` + `\\tRemoved ${targetsRemoved} targets in ` + `${removedTargetsTs - foundUpperBoundTs}ms\\n` + `\\tRemoved ${documentsRemoved} documents in ` + `${removedDocumentsTs - removedTargetsTs}ms\\n` + `Total Duration: ${removedDocumentsTs - startTs}ms`;\n        logDebug('LruGarbageCollector', desc);\n      }\n      return PersistencePromise.resolve({\n        didRun: true,\n        sequenceNumbersCollected: sequenceNumbersToCollect,\n        targetsRemoved,\n        documentsRemoved\n      });\n    });\n  }\n}\nfunction newLruGarbageCollector(delegate, params) {\n  return new LruGarbageCollectorImpl(delegate, params);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Provides LRU functionality for IndexedDB persistence. */\nclass IndexedDbLruDelegateImpl {\n  constructor(db, params) {\n    this.db = db;\n    this.garbageCollector = newLruGarbageCollector(this, params);\n  }\n  getSequenceNumberCount(txn) {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\n  }\n  orphanedDocumentCount(txn) {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n  forEachTarget(txn, f) {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  }\n  forEachOrphanedDocumentSequenceNumber(txn, f) {\n    return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => f(sequenceNumber));\n  }\n  addReference(txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  }\n  removeReference(txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\n  }\n  markPotentiallyOrphaned(txn, key) {\n    return writeSentinelKey(txn, key);\n  }\n  /**\n   * Returns true if anything would prevent this document from being garbage\n   * collected, given that the document in question is not present in any\n   * targets and has a sequence number less than or equal to the upper bound for\n   * the collection run.\n   */\n  isPinned(txn, docKey) {\n    return mutationQueuesContainKey(txn, docKey);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    const documentCache = this.db.getRemoteDocumentCache();\n    const changeBuffer = documentCache.newChangeBuffer();\n    const promises = [];\n    let documentCount = 0;\n    const iteration = this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => {\n      if (sequenceNumber <= upperBound) {\n        const p = this.isPinned(txn, docKey).next(isPinned => {\n          if (!isPinned) {\n            documentCount++;\n            // Our size accounting requires us to read all documents before\n            // removing them.\n            return changeBuffer.getEntry(txn, docKey).next(() => {\n              changeBuffer.removeEntry(docKey, SnapshotVersion.min());\n              return documentTargetStore(txn).delete(sentinelKey$1(docKey));\n            });\n          }\n        });\n        promises.push(p);\n      }\n    });\n    return iteration.next(() => PersistencePromise.waitFor(promises)).next(() => changeBuffer.apply(txn)).next(() => documentCount);\n  }\n  removeTarget(txn, targetData) {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  }\n  updateLimboDocument(txn, key) {\n    return writeSentinelKey(txn, key);\n  }\n  /**\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\n   * means not a part of any target, so the only entry in the target-document index for\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\n   * number for the last time the document was accessed.\n   */\n  forEachOrphanedDocument(txn, f) {\n    const store = documentTargetStore(txn);\n    let nextToReport = ListenSequence.INVALID;\n    let nextPath;\n    return store.iterate({\n      index: DbTargetDocumentDocumentTargetsIndex\n    }, ([targetId, docKey], {\n      path,\n      sequenceNumber\n    }) => {\n      if (targetId === 0) {\n        // if nextToReport is valid, report it, this is a new key so the\n        // last one must not be a member of any targets.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        }\n        // set nextToReport to be this sequence number. It's the next one we\n        // might report, if we don't find any targets for this document.\n        // Note that the sequence number must be defined when the targetId\n        // is 0.\n        nextToReport = sequenceNumber;\n        nextPath = path;\n      } else {\n        // set nextToReport to be invalid, we know we don't need to report\n        // this one since we found a target for it.\n        nextToReport = ListenSequence.INVALID;\n      }\n    }).next(() => {\n      // Since we report sequence numbers after getting to the next key, we\n      // need to check if the last key we iterated over was an orphaned\n      // document and report it.\n      if (nextToReport !== ListenSequence.INVALID) {\n        f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n      }\n    });\n  }\n  getCacheSize(txn) {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  }\n}\nfunction sentinelKey$1(key) {\n  return [0, encodeResourcePath(key.path)];\n}\n/**\n * @returns A value suitable for writing a sentinel row in the target-document\n * store.\n */\nfunction sentinelRow(key, sequenceNumber) {\n  return {\n    targetId: 0,\n    path: encodeResourcePath(key.path),\n    sequenceNumber\n  };\n}\nfunction writeSentinelKey(txn, key) {\n  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\n * It can be used to batch up a set of changes to be written to the cache, but\n * additionally supports reading entries back with the `getEntry()` method,\n * falling back to the underlying RemoteDocumentCache if no entry is\n * buffered.\n *\n * Entries added to the cache *must* be read first. This is to facilitate\n * calculating the size delta of the pending changes.\n *\n * PORTING NOTE: This class was implemented then removed from other platforms.\n * If byte-counting ends up being needed on the other platforms, consider\n * porting this class as part of that implementation work.\n */\nclass RemoteDocumentChangeBuffer {\n  constructor() {\n    // A mapping of document key to the new cache entry that should be written.\n    this.changes = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n    this.changesApplied = false;\n  }\n  /**\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\n   *\n   * You can only modify documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  addEntry(document) {\n    this.assertNotApplied();\n    this.changes.set(document.key, document);\n  }\n  /**\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\n   *\n   * You can only remove documents that have already been retrieved via\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\n   */\n  removeEntry(key, readTime) {\n    this.assertNotApplied();\n    this.changes.set(key, MutableDocument.newInvalidDocument(key).setReadTime(readTime));\n  }\n  /**\n   * Looks up an entry in the cache. The buffered changes will first be checked,\n   * and if no buffered change applies, this will forward to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction - The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKey - The key of the entry to look up.\n   * @returns The cached document or an invalid document if we have nothing\n   * cached.\n   */\n  getEntry(transaction, documentKey) {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n  /**\n   * Looks up several entries in the cache, forwarding to\n   * `RemoteDocumentCache.getEntry()`.\n   *\n   * @param transaction - The transaction in which to perform any persistence\n   *     operations.\n   * @param documentKeys - The keys of the entries to look up.\n   * @returns A map of cached documents, indexed by key. If an entry cannot be\n   *     found, the corresponding key will be mapped to an invalid document.\n   */\n  getEntries(transaction, documentKeys) {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n  /**\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\n   * the provided transaction.\n   */\n  apply(transaction) {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n  /** Helper to assert this.changes is not null  */\n  assertNotApplied() {}\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\n * `newIndexedDbRemoteDocumentCache()`.\n */\nclass IndexedDbRemoteDocumentCacheImpl {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  setIndexManager(indexManager) {\n    this.indexManager = indexManager;\n  }\n  /**\n   * Adds the supplied entries to the cache.\n   *\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  addEntry(transaction, key, doc) {\n    const documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(doc);\n  }\n  /**\n   * Removes a document from the cache.\n   *\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\n   */\n  removeEntry(transaction, documentKey, readTime) {\n    const store = remoteDocumentsStore(transaction);\n    return store.delete(dbReadTimeKey(documentKey, readTime));\n  }\n  /**\n   * Updates the current cache size.\n   *\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\n   * cache's metadata.\n   */\n  updateMetadata(transaction, sizeDelta) {\n    return this.getMetadata(transaction).next(metadata => {\n      metadata.byteSize += sizeDelta;\n      return this.setMetadata(transaction, metadata);\n    });\n  }\n  getEntry(transaction, documentKey) {\n    let doc = MutableDocument.newInvalidDocument(documentKey);\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range: IDBKeyRange.only(dbKey(documentKey))\n    }, (_, dbRemoteDoc) => {\n      doc = this.maybeDecodeDocument(documentKey, dbRemoteDoc);\n    }).next(() => doc);\n  }\n  /**\n   * Looks up an entry in the cache.\n   *\n   * @param documentKey - The key of the entry to look up.\n   * @returns The cached document entry and its size.\n   */\n  getSizedEntry(transaction, documentKey) {\n    let result = {\n      size: 0,\n      document: MutableDocument.newInvalidDocument(documentKey)\n    };\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range: IDBKeyRange.only(dbKey(documentKey))\n    }, (_, dbRemoteDoc) => {\n      result = {\n        document: this.maybeDecodeDocument(documentKey, dbRemoteDoc),\n        size: dbDocumentSize(dbRemoteDoc)\n      };\n    }).next(() => result);\n  }\n  getEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\n      const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\n      results = results.insert(key, doc);\n    }).next(() => results);\n  }\n  /**\n   * Looks up several entries in the cache.\n   *\n   * @param documentKeys - The set of keys entries to look up.\n   * @returns A map of documents indexed by key and a map of sizes indexed by\n   *     key (zero if the document does not exist).\n   */\n  getSizedEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    let sizeMap = new SortedMap(DocumentKey.comparator);\n    return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\n      const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\n      results = results.insert(key, doc);\n      sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));\n    }).next(() => {\n      return {\n        documents: results,\n        sizeMap\n      };\n    });\n  }\n  forEachDbEntry(transaction, documentKeys, callback) {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n    let sortedKeys = new SortedSet(dbKeyComparator);\n    documentKeys.forEach(e => sortedKeys = sortedKeys.add(e));\n    const range = IDBKeyRange.bound(dbKey(sortedKeys.first()), dbKey(sortedKeys.last()));\n    const keyIter = sortedKeys.getIterator();\n    let nextKey = keyIter.getNext();\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range\n    }, (_, dbRemoteDoc, control) => {\n      const potentialKey = DocumentKey.fromSegments([...dbRemoteDoc.prefixPath, dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId]);\n      // Go through keys not found in cache.\n      while (nextKey && dbKeyComparator(nextKey, potentialKey) < 0) {\n        callback(nextKey, null);\n        nextKey = keyIter.getNext();\n      }\n      if (nextKey && nextKey.isEqual(potentialKey)) {\n        // Key found in cache.\n        callback(nextKey, dbRemoteDoc);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      }\n      // Skip to the next key (if there is one).\n      if (nextKey) {\n        control.skip(dbKey(nextKey));\n      } else {\n        control.done();\n      }\n    }).next(() => {\n      // The rest of the keys are not in the cache. One case where `iterate`\n      // above won't go through them is when the cache is empty.\n      while (nextKey) {\n        callback(nextKey, null);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      }\n    });\n  }\n  getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs, context) {\n    const collection = query.path;\n    const startKey = [collection.popLast().toArray(), collection.lastSegment(), toDbTimestampKey(offset.readTime), offset.documentKey.path.isEmpty() ? '' : offset.documentKey.path.lastSegment()];\n    const endKey = [collection.popLast().toArray(), collection.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], ''];\n    return remoteDocumentsStore(transaction).loadAll(IDBKeyRange.bound(startKey, endKey, true)).next(dbRemoteDocs => {\n      context === null || context === void 0 ? void 0 : context.incrementDocumentReadCount(dbRemoteDocs.length);\n      let results = mutableDocumentMap();\n      for (const dbRemoteDoc of dbRemoteDocs) {\n        const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\n        if (document.isFoundDocument() && (queryMatches(query, document) || mutatedDocs.has(document.key))) {\n          // Either the document matches the given query, or it is mutated.\n          results = results.insert(document.key, document);\n        }\n      }\n      return results;\n    });\n  }\n  getAllFromCollectionGroup(transaction, collectionGroup, offset, limit) {\n    let results = mutableDocumentMap();\n    const startKey = dbCollectionGroupKey(collectionGroup, offset);\n    const endKey = dbCollectionGroupKey(collectionGroup, IndexOffset.max());\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentCollectionGroupIndex,\n      range: IDBKeyRange.bound(startKey, endKey, true)\n    }, (_, dbRemoteDoc, control) => {\n      const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\n      results = results.insert(document.key, document);\n      if (results.size === limit) {\n        control.done();\n      }\n    }).next(() => results);\n  }\n  newChangeBuffer(options) {\n    return new IndexedDbRemoteDocumentChangeBuffer(this, !!options && options.trackRemovals);\n  }\n  getSize(txn) {\n    return this.getMetadata(txn).next(metadata => metadata.byteSize);\n  }\n  getMetadata(txn) {\n    return documentGlobalStore(txn).get(DbRemoteDocumentGlobalKey).next(metadata => {\n      hardAssert(!!metadata);\n      return metadata;\n    });\n  }\n  setMetadata(txn, metadata) {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobalKey, metadata);\n  }\n  /**\n   * Decodes `dbRemoteDoc` and returns the document (or an invalid document if\n   * the document corresponds to the format used for sentinel deletes).\n   */\n  maybeDecodeDocument(documentKey, dbRemoteDoc) {\n    if (dbRemoteDoc) {\n      const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n      // Whether the document is a sentinel removal and should only be used in the\n      // `getNewDocumentChanges()`\n      const isSentinelRemoval = doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min());\n      if (!isSentinelRemoval) {\n        return doc;\n      }\n    }\n    return MutableDocument.newInvalidDocument(documentKey);\n  }\n}\n/** Creates a new IndexedDbRemoteDocumentCache. */\nfunction newIndexedDbRemoteDocumentCache(serializer) {\n  return new IndexedDbRemoteDocumentCacheImpl(serializer);\n}\n/**\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\n *\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\n * when we apply the changes.\n */\nclass IndexedDbRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  /**\n   * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.\n   * @param trackRemovals - Whether to create sentinel deletes that can be tracked by\n   * `getNewDocumentChanges()`.\n   */\n  constructor(documentCache, trackRemovals) {\n    super();\n    this.documentCache = documentCache;\n    this.trackRemovals = trackRemovals;\n    // A map of document sizes and read times prior to applying the changes in\n    // this buffer.\n    this.documentStates = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n  }\n  applyChanges(transaction) {\n    const promises = [];\n    let sizeDelta = 0;\n    let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\n    this.changes.forEach((key, documentChange) => {\n      const previousDoc = this.documentStates.get(key);\n      promises.push(this.documentCache.removeEntry(transaction, key, previousDoc.readTime));\n      if (documentChange.isValidDocument()) {\n        const doc = toDbRemoteDocument(this.documentCache.serializer, documentChange);\n        collectionParents = collectionParents.add(key.path.popLast());\n        const size = dbDocumentSize(doc);\n        sizeDelta += size - previousDoc.size;\n        promises.push(this.documentCache.addEntry(transaction, key, doc));\n      } else {\n        sizeDelta -= previousDoc.size;\n        if (this.trackRemovals) {\n          // In order to track removals, we store a \"sentinel delete\" in the\n          // RemoteDocumentCache. This entry is represented by a NoDocument\n          // with a version of 0 and ignored by `maybeDecodeDocument()` but\n          // preserved in `getNewDocumentChanges()`.\n          const deletedDoc = toDbRemoteDocument(this.documentCache.serializer, documentChange.convertToNoDocument(SnapshotVersion.min()));\n          promises.push(this.documentCache.addEntry(transaction, key, deletedDoc));\n        }\n      }\n    });\n    collectionParents.forEach(parent => {\n      promises.push(this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));\n    });\n    promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n    return PersistencePromise.waitFor(promises);\n  }\n  getFromCache(transaction, documentKey) {\n    // Record the size of everything we load from the cache so we can compute a delta later.\n    return this.documentCache.getSizedEntry(transaction, documentKey).next(getResult => {\n      this.documentStates.set(documentKey, {\n        size: getResult.size,\n        readTime: getResult.document.readTime\n      });\n      return getResult.document;\n    });\n  }\n  getAllFromCache(transaction, documentKeys) {\n    // Record the size of everything we load from the cache so we can compute\n    // a delta later.\n    return this.documentCache.getSizedEntries(transaction, documentKeys).next(({\n      documents,\n      sizeMap\n    }) => {\n      // Note: `getAllFromCache` returns two maps instead of a single map from\n      // keys to `DocumentSizeEntry`s. This is to allow returning the\n      // `MutableDocumentMap` directly, without a conversion.\n      sizeMap.forEach((documentKey, size) => {\n        this.documentStates.set(documentKey, {\n          size,\n          readTime: documents.get(documentKey).readTime\n        });\n      });\n      return documents;\n    });\n  }\n}\nfunction documentGlobalStore(txn) {\n  return getStore(txn, DbRemoteDocumentGlobalStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\n */\nfunction remoteDocumentsStore(txn) {\n  return getStore(txn, DbRemoteDocumentStore);\n}\n/**\n * Returns a key that can be used for document lookups on the\n * `DbRemoteDocumentDocumentKeyIndex` index.\n */\nfunction dbKey(documentKey) {\n  const path = documentKey.path.toArray();\n  return [/* prefix path */path.slice(0, path.length - 2), /* collection id */path[path.length - 2], /* document id */path[path.length - 1]];\n}\n/**\n * Returns a key that can be used for document lookups via the primary key of\n * the DbRemoteDocument object store.\n */\nfunction dbReadTimeKey(documentKey, readTime) {\n  const path = documentKey.path.toArray();\n  return [/* prefix path */path.slice(0, path.length - 2), /* collection id */path[path.length - 2], toDbTimestampKey(readTime), /* document id */path[path.length - 1]];\n}\n/**\n * Returns a key that can be used for document lookups on the\n * `DbRemoteDocumentDocumentCollectionGroupIndex` index.\n */\nfunction dbCollectionGroupKey(collectionGroup, offset) {\n  const path = offset.documentKey.path.toArray();\n  return [/* collection id */collectionGroup, toDbTimestampKey(offset.readTime), /* prefix path */path.slice(0, path.length - 2), /* document id */path.length > 0 ? path[path.length - 1] : ''];\n}\n/**\n * Comparator that compares document keys according to the primary key sorting\n * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id\n * and then document ID).\n *\n * Visible for testing.\n */\nfunction dbKeyComparator(l, r) {\n  const left = l.path.toArray();\n  const right = r.path.toArray();\n  // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74\n  let cmp = 0;\n  for (let i = 0; i < left.length - 2 && i < right.length - 2; ++i) {\n    cmp = primitiveComparator(left[i], right[i]);\n    if (cmp) {\n      return cmp;\n    }\n  }\n  cmp = primitiveComparator(left.length, right.length);\n  if (cmp) {\n    return cmp;\n  }\n  cmp = primitiveComparator(left[left.length - 2], right[right.length - 2]);\n  if (cmp) {\n    return cmp;\n  }\n  return primitiveComparator(left[left.length - 1], right[right.length - 1]);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Schema Version for the Web client:\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\n *     Document Cache\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\n *     longer required because migration 3 unconditionally clears it.\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\n *     to limbo resolution. Addresses\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\n * 4.  Multi-Tab Support.\n * 5.  Removal of held write acks.\n * 6.  Create document global for tracking document cache size.\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\n * 8.  Add collection-parent index for Collection Group queries.\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\n *     an auto-incrementing ID. This is required for Index-Free queries.\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\n * 11. Add bundles and named_queries for bundle support.\n * 12. Add document overlays.\n * 13. Rewrite the keys of the remote document cache to allow for efficient\n *     document lookup via `getAll()`.\n * 14. Add overlays.\n * 15. Add indexing support.\n * 16. Parse timestamp strings before creating index entries.\n */\nconst SCHEMA_VERSION = 17;\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a local view (overlay) of a document, and the fields that are\n * locally mutated.\n */\nclass OverlayedDocument {\n  constructor(overlayedDocument,\n  /**\n   * The fields that are locally mutated by patch mutations.\n   *\n   * If the overlayed\tdocument is from set or delete mutations, this is `null`.\n   * If there is no overlay (mutation) for the document, this is an empty `FieldMask`.\n   */\n  mutatedFields) {\n    this.overlayedDocument = overlayedDocument;\n    this.mutatedFields = mutatedFields;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A readonly view of the local state of all documents we're tracking (i.e. we\n * have a cached version in remoteDocumentCache or local mutations for the\n * document). The view is computed by applying the mutations in the\n * MutationQueue to the RemoteDocumentCache.\n */\nclass LocalDocumentsView {\n  constructor(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager) {\n    this.remoteDocumentCache = remoteDocumentCache;\n    this.mutationQueue = mutationQueue;\n    this.documentOverlayCache = documentOverlayCache;\n    this.indexManager = indexManager;\n  }\n  /**\n   * Get the local view of the document identified by `key`.\n   *\n   * @returns Local view of the document or null if we don't have any cached\n   * state for it.\n   */\n  getDocument(transaction, key) {\n    let overlay = null;\n    return this.documentOverlayCache.getOverlay(transaction, key).next(value => {\n      overlay = value;\n      return this.remoteDocumentCache.getEntry(transaction, key);\n    }).next(document => {\n      if (overlay !== null) {\n        mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\n      }\n      return document;\n    });\n  }\n  /**\n   * Gets the local view of the documents identified by `keys`.\n   *\n   * If we don't have cached state for a document in `keys`, a NoDocument will\n   * be stored for that key in the resulting set.\n   */\n  getDocuments(transaction, keys) {\n    return this.remoteDocumentCache.getEntries(transaction, keys).next(docs => this.getLocalViewOfDocuments(transaction, docs, documentKeySet()).next(() => docs));\n  }\n  /**\n   * Similar to `getDocuments`, but creates the local view from the given\n   * `baseDocs` without retrieving documents from the local store.\n   *\n   * @param transaction - The transaction this operation is scoped to.\n   * @param docs - The documents to apply local mutations to get the local views.\n   * @param existenceStateChanged - The set of document keys whose existence state\n   *   is changed. This is useful to determine if some documents overlay needs\n   *   to be recalculated.\n   */\n  getLocalViewOfDocuments(transaction, docs, existenceStateChanged = documentKeySet()) {\n    const overlays = newOverlayMap();\n    return this.populateOverlays(transaction, overlays, docs).next(() => {\n      return this.computeViews(transaction, docs, overlays, existenceStateChanged).next(computeViewsResult => {\n        let result = documentMap();\n        computeViewsResult.forEach((documentKey, overlayedDocument) => {\n          result = result.insert(documentKey, overlayedDocument.overlayedDocument);\n        });\n        return result;\n      });\n    });\n  }\n  /**\n   * Gets the overlayed documents for the given document map, which will include\n   * the local view of those documents and a `FieldMask` indicating which fields\n   * are mutated locally, `null` if overlay is a Set or Delete mutation.\n   */\n  getOverlayedDocuments(transaction, docs) {\n    const overlays = newOverlayMap();\n    return this.populateOverlays(transaction, overlays, docs).next(() => this.computeViews(transaction, docs, overlays, documentKeySet()));\n  }\n  /**\n   * Fetches the overlays for {@code docs} and adds them to provided overlay map\n   * if the map does not already contain an entry for the given document key.\n   */\n  populateOverlays(transaction, overlays, docs) {\n    const missingOverlays = [];\n    docs.forEach(key => {\n      if (!overlays.has(key)) {\n        missingOverlays.push(key);\n      }\n    });\n    return this.documentOverlayCache.getOverlays(transaction, missingOverlays).next(result => {\n      result.forEach((key, val) => {\n        overlays.set(key, val);\n      });\n    });\n  }\n  /**\n   * Computes the local view for the given documents.\n   *\n   * @param docs - The documents to compute views for. It also has the base\n   *   version of the documents.\n   * @param overlays - The overlays that need to be applied to the given base\n   *   version of the documents.\n   * @param existenceStateChanged - A set of documents whose existence states\n   *   might have changed. This is used to determine if we need to re-calculate\n   *   overlays from mutation queues.\n   * @return A map represents the local documents view.\n   */\n  computeViews(transaction, docs, overlays, existenceStateChanged) {\n    let recalculateDocuments = mutableDocumentMap();\n    const mutatedFields = newDocumentKeyMap();\n    const results = newOverlayedDocumentMap();\n    docs.forEach((_, doc) => {\n      const overlay = overlays.get(doc.key);\n      // Recalculate an overlay if the document's existence state changed due to\n      // a remote event *and* the overlay is a PatchMutation. This is because\n      // document existence state can change if some patch mutation's\n      // preconditions are met.\n      // NOTE: we recalculate when `overlay` is undefined as well, because there\n      // might be a patch mutation whose precondition does not match before the\n      // change (hence overlay is undefined), but would now match.\n      if (existenceStateChanged.has(doc.key) && (overlay === undefined || overlay.mutation instanceof PatchMutation)) {\n        recalculateDocuments = recalculateDocuments.insert(doc.key, doc);\n      } else if (overlay !== undefined) {\n        mutatedFields.set(doc.key, overlay.mutation.getFieldMask());\n        mutationApplyToLocalView(overlay.mutation, doc, overlay.mutation.getFieldMask(), Timestamp.now());\n      } else {\n        // no overlay exists\n        // Using EMPTY to indicate there is no overlay for the document.\n        mutatedFields.set(doc.key, FieldMask.empty());\n      }\n    });\n    return this.recalculateAndSaveOverlays(transaction, recalculateDocuments).next(recalculatedFields => {\n      recalculatedFields.forEach((documentKey, mask) => mutatedFields.set(documentKey, mask));\n      docs.forEach((documentKey, document) => {\n        var _a;\n        return results.set(documentKey, new OverlayedDocument(document, (_a = mutatedFields.get(documentKey)) !== null && _a !== void 0 ? _a : null));\n      });\n      return results;\n    });\n  }\n  recalculateAndSaveOverlays(transaction, docs) {\n    const masks = newDocumentKeyMap();\n    // A reverse lookup map from batch id to the documents within that batch.\n    let documentsByBatchId = new SortedMap((key1, key2) => key1 - key2);\n    let processed = documentKeySet();\n    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, docs).next(batches => {\n      for (const batch of batches) {\n        batch.keys().forEach(key => {\n          const baseDoc = docs.get(key);\n          if (baseDoc === null) {\n            return;\n          }\n          let mask = masks.get(key) || FieldMask.empty();\n          mask = batch.applyToLocalView(baseDoc, mask);\n          masks.set(key, mask);\n          const newSet = (documentsByBatchId.get(batch.batchId) || documentKeySet()).add(key);\n          documentsByBatchId = documentsByBatchId.insert(batch.batchId, newSet);\n        });\n      }\n    }).next(() => {\n      const promises = [];\n      // Iterate in descending order of batch IDs, and skip documents that are\n      // already saved.\n      const iter = documentsByBatchId.getReverseIterator();\n      while (iter.hasNext()) {\n        const entry = iter.getNext();\n        const batchId = entry.key;\n        const keys = entry.value;\n        const overlays = newMutationMap();\n        keys.forEach(key => {\n          if (!processed.has(key)) {\n            const overlayMutation = calculateOverlayMutation(docs.get(key), masks.get(key));\n            if (overlayMutation !== null) {\n              overlays.set(key, overlayMutation);\n            }\n            processed = processed.add(key);\n          }\n        });\n        promises.push(this.documentOverlayCache.saveOverlays(transaction, batchId, overlays));\n      }\n      return PersistencePromise.waitFor(promises);\n    }).next(() => masks);\n  }\n  /**\n   * Recalculates overlays by reading the documents from remote document cache\n   * first, and saves them after they are calculated.\n   */\n  recalculateAndSaveOverlaysForDocumentKeys(transaction, documentKeys) {\n    return this.remoteDocumentCache.getEntries(transaction, documentKeys).next(docs => this.recalculateAndSaveOverlays(transaction, docs));\n  }\n  /**\n   * Performs a query against the local view of all documents.\n   *\n   * @param transaction - The persistence transaction.\n   * @param query - The query to match documents against.\n   * @param offset - Read time and key to start scanning by (exclusive).\n   * @param context - A optional tracker to keep a record of important details\n   *   during database local query execution.\n   */\n  getDocumentsMatchingQuery(transaction, query, offset, context) {\n    if (isDocumentQuery$1(query)) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (isCollectionGroupQuery(query)) {\n      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, offset, context);\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(transaction, query, offset, context);\n    }\n  }\n  /**\n   * Given a collection group, returns the next documents that follow the provided offset, along\n   * with an updated batch ID.\n   *\n   * <p>The documents returned by this method are ordered by remote version from the provided\n   * offset. If there are no more remote documents after the provided offset, documents with\n   * mutations in order of batch id from the offset are returned. Since all documents in a batch are\n   * returned together, the total number of documents returned can exceed {@code count}.\n   *\n   * @param transaction\n   * @param collectionGroup The collection group for the documents.\n   * @param offset The offset to index into.\n   * @param count The number of documents to return\n   * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.\n   */\n  getNextDocuments(transaction, collectionGroup, offset, count) {\n    return this.remoteDocumentCache.getAllFromCollectionGroup(transaction, collectionGroup, offset, count).next(originalDocs => {\n      const overlaysPromise = count - originalDocs.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(transaction, collectionGroup, offset.largestBatchId, count - originalDocs.size) : PersistencePromise.resolve(newOverlayMap());\n      // The callsite will use the largest batch ID together with the latest read time to create\n      // a new index offset. Since we only process batch IDs if all remote documents have been read,\n      // no overlay will increase the overall read time. This is why we only need to special case\n      // the batch id.\n      let largestBatchId = INITIAL_LARGEST_BATCH_ID;\n      let modifiedDocs = originalDocs;\n      return overlaysPromise.next(overlays => {\n        return PersistencePromise.forEach(overlays, (key, overlay) => {\n          if (largestBatchId < overlay.largestBatchId) {\n            largestBatchId = overlay.largestBatchId;\n          }\n          if (originalDocs.get(key)) {\n            return PersistencePromise.resolve();\n          }\n          return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n            modifiedDocs = modifiedDocs.insert(key, doc);\n          });\n        }).next(() => this.populateOverlays(transaction, overlays, originalDocs)).next(() => this.computeViews(transaction, modifiedDocs, overlays, documentKeySet())).next(localDocs => ({\n          batchId: largestBatchId,\n          changes: convertOverlayedDocumentMapToDocumentMap(localDocs)\n        }));\n      });\n    });\n  }\n  getDocumentsMatchingDocumentQuery(transaction, docPath) {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(document => {\n      let result = documentMap();\n      if (document.isFoundDocument()) {\n        result = result.insert(document.key, document);\n      }\n      return result;\n    });\n  }\n  getDocumentsMatchingCollectionGroupQuery(transaction, query, offset, context) {\n    const collectionId = query.collectionGroup;\n    let results = documentMap();\n    return this.indexManager.getCollectionParents(transaction, collectionId).next(parents => {\n      // Perform a collection query against each parent that contains the\n      // collectionId and aggregate the results.\n      return PersistencePromise.forEach(parents, parent => {\n        const collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));\n        return this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, offset, context).next(r => {\n          r.forEach((key, doc) => {\n            results = results.insert(key, doc);\n          });\n        });\n      }).next(() => results);\n    });\n  }\n  getDocumentsMatchingCollectionQuery(transaction, query, offset, context) {\n    // Query the remote documents and overlay mutations.\n    let overlays;\n    return this.documentOverlayCache.getOverlaysForCollection(transaction, query.path, offset.largestBatchId).next(result => {\n      overlays = result;\n      return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query, offset, overlays, context);\n    }).next(remoteDocuments => {\n      // As documents might match the query because of their overlay we need to\n      // include documents for all overlays in the initial document set.\n      overlays.forEach((_, overlay) => {\n        const key = overlay.getKey();\n        if (remoteDocuments.get(key) === null) {\n          remoteDocuments = remoteDocuments.insert(key, MutableDocument.newInvalidDocument(key));\n        }\n      });\n      // Apply the overlays and match against the query.\n      let results = documentMap();\n      remoteDocuments.forEach((key, document) => {\n        const overlay = overlays.get(key);\n        if (overlay !== undefined) {\n          mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\n        }\n        // Finally, insert the documents that still match the query\n        if (queryMatches(query, document)) {\n          results = results.insert(key, document);\n        }\n      });\n      return results;\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MemoryBundleCache {\n  constructor(serializer) {\n    this.serializer = serializer;\n    this.bundles = new Map();\n    this.namedQueries = new Map();\n  }\n  getBundleMetadata(transaction, bundleId) {\n    return PersistencePromise.resolve(this.bundles.get(bundleId));\n  }\n  saveBundleMetadata(transaction, bundleMetadata) {\n    this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));\n    return PersistencePromise.resolve();\n  }\n  getNamedQuery(transaction, queryName) {\n    return PersistencePromise.resolve(this.namedQueries.get(queryName));\n  }\n  saveNamedQuery(transaction, query) {\n    this.namedQueries.set(query.name, fromProtoNamedQuery(query));\n    return PersistencePromise.resolve();\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory implementation of DocumentOverlayCache.\n */\nclass MemoryDocumentOverlayCache {\n  constructor() {\n    // A map sorted by DocumentKey, whose value is a pair of the largest batch id\n    // for the overlay and the overlay itself.\n    this.overlays = new SortedMap(DocumentKey.comparator);\n    this.overlayByBatchId = new Map();\n  }\n  getOverlay(transaction, key) {\n    return PersistencePromise.resolve(this.overlays.get(key));\n  }\n  getOverlays(transaction, keys) {\n    const result = newOverlayMap();\n    return PersistencePromise.forEach(keys, key => {\n      return this.getOverlay(transaction, key).next(overlay => {\n        if (overlay !== null) {\n          result.set(key, overlay);\n        }\n      });\n    }).next(() => result);\n  }\n  saveOverlays(transaction, largestBatchId, overlays) {\n    overlays.forEach((_, mutation) => {\n      this.saveOverlay(transaction, largestBatchId, mutation);\n    });\n    return PersistencePromise.resolve();\n  }\n  removeOverlaysForBatchId(transaction, documentKeys, batchId) {\n    const keys = this.overlayByBatchId.get(batchId);\n    if (keys !== undefined) {\n      keys.forEach(key => this.overlays = this.overlays.remove(key));\n      this.overlayByBatchId.delete(batchId);\n    }\n    return PersistencePromise.resolve();\n  }\n  getOverlaysForCollection(transaction, collection, sinceBatchId) {\n    const result = newOverlayMap();\n    const immediateChildrenPathLength = collection.length + 1;\n    const prefix = new DocumentKey(collection.child(''));\n    const iter = this.overlays.getIteratorFrom(prefix);\n    while (iter.hasNext()) {\n      const entry = iter.getNext();\n      const overlay = entry.value;\n      const key = overlay.getKey();\n      if (!collection.isPrefixOf(key.path)) {\n        break;\n      }\n      // Documents from sub-collections\n      if (key.path.length !== immediateChildrenPathLength) {\n        continue;\n      }\n      if (overlay.largestBatchId > sinceBatchId) {\n        result.set(overlay.getKey(), overlay);\n      }\n    }\n    return PersistencePromise.resolve(result);\n  }\n  getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\n    let batchIdToOverlays = new SortedMap((key1, key2) => key1 - key2);\n    const iter = this.overlays.getIterator();\n    while (iter.hasNext()) {\n      const entry = iter.getNext();\n      const overlay = entry.value;\n      const key = overlay.getKey();\n      if (key.getCollectionGroup() !== collectionGroup) {\n        continue;\n      }\n      if (overlay.largestBatchId > sinceBatchId) {\n        let overlaysForBatchId = batchIdToOverlays.get(overlay.largestBatchId);\n        if (overlaysForBatchId === null) {\n          overlaysForBatchId = newOverlayMap();\n          batchIdToOverlays = batchIdToOverlays.insert(overlay.largestBatchId, overlaysForBatchId);\n        }\n        overlaysForBatchId.set(overlay.getKey(), overlay);\n      }\n    }\n    const result = newOverlayMap();\n    const batchIter = batchIdToOverlays.getIterator();\n    while (batchIter.hasNext()) {\n      const entry = batchIter.getNext();\n      const overlays = entry.value;\n      overlays.forEach((key, overlay) => result.set(key, overlay));\n      if (result.size() >= count) {\n        break;\n      }\n    }\n    return PersistencePromise.resolve(result);\n  }\n  saveOverlay(transaction, largestBatchId, mutation) {\n    // Remove the association of the overlay to its batch id.\n    const existing = this.overlays.get(mutation.key);\n    if (existing !== null) {\n      const newSet = this.overlayByBatchId.get(existing.largestBatchId).delete(mutation.key);\n      this.overlayByBatchId.set(existing.largestBatchId, newSet);\n    }\n    this.overlays = this.overlays.insert(mutation.key, new Overlay(largestBatchId, mutation));\n    // Create the association of this overlay to the given largestBatchId.\n    let batch = this.overlayByBatchId.get(largestBatchId);\n    if (batch === undefined) {\n      batch = documentKeySet();\n      this.overlayByBatchId.set(largestBatchId, batch);\n    }\n    this.overlayByBatchId.set(largestBatchId, batch.add(mutation.key));\n  }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MemoryGlobalsCache {\n  constructor() {\n    this.sessionToken = ByteString.EMPTY_BYTE_STRING;\n  }\n  getSessionToken(transaction) {\n    return PersistencePromise.resolve(this.sessionToken);\n  }\n  setSessionToken(transaction, sessionToken) {\n    this.sessionToken = sessionToken;\n    return PersistencePromise.resolve();\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A collection of references to a document from some kind of numbered entity\n * (either a target ID or batch ID). As references are added to or removed from\n * the set corresponding events are emitted to a registered garbage collector.\n *\n * Each reference is represented by a DocumentReference object. Each of them\n * contains enough information to uniquely identify the reference. They are all\n * stored primarily in a set sorted by key. A document is considered garbage if\n * there's no references in that set (this can be efficiently checked thanks to\n * sorting by key).\n *\n * ReferenceSet also keeps a secondary set that contains references sorted by\n * IDs. This one is used to efficiently implement removal of all references by\n * some target ID.\n */\nclass ReferenceSet {\n  constructor() {\n    // A set of outstanding references to a document sorted by key.\n    this.refsByKey = new SortedSet(DocReference.compareByKey);\n    // A set of outstanding references to a document sorted by target id.\n    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n  }\n  /** Returns true if the reference set contains no references. */\n  isEmpty() {\n    return this.refsByKey.isEmpty();\n  }\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key, id) {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys, id) {\n    keys.forEach(key => this.addReference(key, id));\n  }\n  /**\n   * Removes a reference to the given document key for the given\n   * ID.\n   */\n  removeReference(key, id) {\n    this.removeRef(new DocReference(key, id));\n  }\n  removeReferences(keys, id) {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n  /**\n   * Clears all references with a given ID. Calls removeRef() for each key\n   * removed.\n   */\n  removeReferencesForId(id) {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n  removeAllReferences() {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n  removeRef(ref) {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n  referencesForId(id) {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n  containsKey(key) {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\nclass DocReference {\n  constructor(key, targetOrBatchId) {\n    this.key = key;\n    this.targetOrBatchId = targetOrBatchId;\n  }\n  /** Compare by key then by ID */\n  static compareByKey(left, right) {\n    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);\n  }\n  /** Compare by ID then by key */\n  static compareByTargetId(left, right) {\n    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MemoryMutationQueue {\n  constructor(indexManager, referenceDelegate) {\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\n     * The set of all mutations that have been sent but not yet been applied to\n     * the backend.\n     */\n    this.mutationQueue = [];\n    /** Next value to use when assigning sequential IDs to each mutation batch. */\n    this.nextBatchId = 1;\n    /** An ordered mapping between documents and the mutations batch IDs. */\n    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n  }\n  checkEmpty(transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n  addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n    if (this.mutationQueue.length > 0) {\n      this.mutationQueue[this.mutationQueue.length - 1];\n    }\n    const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n    this.mutationQueue.push(batch);\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());\n    }\n    return PersistencePromise.resolve(batch);\n  }\n  lookupMutationBatch(transaction, batchId) {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n  getNextMutationBatchAfterBatchId(transaction, batchId) {\n    const nextBatchId = batchId + 1;\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);\n  }\n  getHighestUnacknowledgedBatchId() {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);\n  }\n  getAllMutationBatches(transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n  getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      result.push(batch);\n    });\n    return PersistencePromise.resolve(result);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n  getAllMutationBatchesAffectingQuery(transaction, query) {\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n    const start = new DocReference(new DocumentKey(startPath), 0);\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n  findMutationBatches(batchIDs) {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n  removeMutationBatch(transaction, batch) {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(batchIndex === 0);\n    this.mutationQueue.shift();\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, mutation => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n  removeCachedMutationKeys(batchId) {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n  containsKey(txn, key) {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n  performConsistencyCheck(txn) {\n    if (this.mutationQueue.length === 0) ;\n    return PersistencePromise.resolve();\n  }\n  /**\n   * Finds the index of the given batchId in the mutation queue and asserts that\n   * the resulting index is within the bounds of the queue.\n   *\n   * @param batchId - The batchId to search for\n   * @param action - A description of what the caller is doing, phrased in passive\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\n   */\n  indexOfExistingBatchId(batchId, action) {\n    const index = this.indexOfBatchId(batchId);\n    return index;\n  }\n  /**\n   * Finds the index of the given batchId in the mutation queue. This operation\n   * is O(1).\n   *\n   * @returns The computed index of the batch with the given batchId, based on\n   * the state of the queue. Note this index can be negative if the requested\n   * batchId has already been removed from the queue or past the end of the\n   * queue if the batchId is larger than the last added batch.\n   */\n  indexOfBatchId(batchId) {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n  /**\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\n   * other functions that uses this code easier to read and more efficient.\n   */\n  findMutationBatch(batchId) {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n    const batch = this.mutationQueue[index];\n    return batch;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction documentEntryMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\n/**\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\n * `newMemoryRemoteDocumentCache()`.\n */\nclass MemoryRemoteDocumentCacheImpl {\n  /**\n   * @param sizer - Used to assess the size of a document. For eager GC, this is\n   * expected to just return 0 to avoid unnecessarily doing the work of\n   * calculating the size.\n   */\n  constructor(sizer) {\n    this.sizer = sizer;\n    /** Underlying cache of documents and their read times. */\n    this.docs = documentEntryMap();\n    /** Size of all cached documents. */\n    this.size = 0;\n  }\n  setIndexManager(indexManager) {\n    this.indexManager = indexManager;\n  }\n  /**\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\n   *\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  addEntry(transaction, doc) {\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n    this.docs = this.docs.insert(key, {\n      document: doc.mutableCopy(),\n      size: currentSize\n    });\n    this.size += currentSize - previousSize;\n    return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());\n  }\n  /**\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\n   *\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\n   * returned by `newChangeBuffer()`.\n   */\n  removeEntry(documentKey) {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n  getEntry(transaction, documentKey) {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.document.mutableCopy() : MutableDocument.newInvalidDocument(documentKey));\n  }\n  getEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.document.mutableCopy() : MutableDocument.newInvalidDocument(documentKey));\n    });\n    return PersistencePromise.resolve(results);\n  }\n  getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs) {\n    let results = mutableDocumentMap();\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const collectionPath = query.path;\n    const prefix = new DocumentKey(collectionPath.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: {\n          document\n        }\n      } = iterator.getNext();\n      if (!collectionPath.isPrefixOf(key.path)) {\n        break;\n      }\n      if (key.path.length > collectionPath.length + 1) {\n        // Exclude entries from subcollections.\n        continue;\n      }\n      if (indexOffsetComparator(newIndexOffsetFromDocument(document), offset) <= 0) {\n        // The document sorts before the offset.\n        continue;\n      }\n      if (!mutatedDocs.has(document.key) && !queryMatches(query, document)) {\n        // The document cannot possibly match the query.\n        continue;\n      }\n      results = results.insert(document.key, document.mutableCopy());\n    }\n    return PersistencePromise.resolve(results);\n  }\n  getAllFromCollectionGroup(transaction, collectionGroup, offset, limit) {\n    // This method should only be called from the IndexBackfiller if persistence\n    // is enabled.\n    fail();\n  }\n  forEachDocumentKey(transaction, f) {\n    return PersistencePromise.forEach(this.docs, key => f(key));\n  }\n  newChangeBuffer(options) {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentChangeBuffer(this);\n  }\n  getSize(txn) {\n    return PersistencePromise.resolve(this.size);\n  }\n}\n/**\n * Creates a new memory-only RemoteDocumentCache.\n *\n * @param sizer - Used to assess the size of a document. For eager GC, this is\n * expected to just return 0 to avoid unnecessarily doing the work of\n * calculating the size.\n */\nfunction newMemoryRemoteDocumentCache(sizer) {\n  return new MemoryRemoteDocumentCacheImpl(sizer);\n}\n/**\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\n */\nclass MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  constructor(documentCache) {\n    super();\n    this.documentCache = documentCache;\n  }\n  applyChanges(transaction) {\n    const promises = [];\n    this.changes.forEach((key, doc) => {\n      if (doc.isValidDocument()) {\n        promises.push(this.documentCache.addEntry(transaction, doc));\n      } else {\n        this.documentCache.removeEntry(key);\n      }\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getFromCache(transaction, documentKey) {\n    return this.documentCache.getEntry(transaction, documentKey);\n  }\n  getAllFromCache(transaction, documentKeys) {\n    return this.documentCache.getEntries(transaction, documentKeys);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MemoryTargetCache {\n  constructor(persistence) {\n    this.persistence = persistence;\n    /**\n     * Maps a target to the data about that target\n     */\n    this.targets = new ObjectMap(t => canonifyTarget(t), targetEquals);\n    /** The last received snapshot version. */\n    this.lastRemoteSnapshotVersion = SnapshotVersion.min();\n    /** The highest numbered target ID encountered. */\n    this.highestTargetId = 0;\n    /** The highest sequence number encountered. */\n    this.highestSequenceNumber = 0;\n    /**\n     * A ordered bidirectional mapping between documents and the remote target\n     * IDs.\n     */\n    this.references = new ReferenceSet();\n    this.targetCount = 0;\n    this.targetIdGenerator = TargetIdGenerator.forTargetCache();\n  }\n  forEachTarget(txn, f) {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n  getLastRemoteSnapshotVersion(transaction) {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n  getHighestSequenceNumber(transaction) {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n  allocateTargetId(transaction) {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n  setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n  saveTargetData(targetData) {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n  addTargetData(transaction, targetData) {\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n  updateTargetData(transaction, targetData) {\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n  removeTargetData(transaction, targetData) {\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n  removeTargets(transaction, upperBound, activeTargetIds) {\n    let count = 0;\n    const removals = [];\n    this.targets.forEach((key, targetData) => {\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        this.targets.delete(key);\n        removals.push(this.removeMatchingKeysForTargetId(transaction, targetData.targetId));\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n  getTargetCount(transaction) {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n  getTargetData(transaction, target) {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n  addMatchingKeys(txn, keys, targetId) {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n  removeMatchingKeys(txn, keys, targetId) {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n  removeMatchingKeysForTargetId(txn, targetId) {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n  getMatchingKeysForTargetId(txn, targetId) {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n  containsKey(txn, key) {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$d = 'MemoryPersistence';\n/**\n * A memory-backed instance of Persistence. Data is stored only in RAM and\n * not persisted across sessions.\n */\nclass MemoryPersistence {\n  /**\n   * The constructor accepts a factory for creating a reference delegate. This\n   * allows both the delegate and this instance to have strong references to\n   * each other without having nullable fields that would then need to be\n   * checked or asserted on every access.\n   */\n  constructor(referenceDelegateFactory, serializer) {\n    this.mutationQueues = {};\n    this.overlays = {};\n    this.listenSequence = new ListenSequence(0);\n    this._started = false;\n    this._started = true;\n    this.globalsCache = new MemoryGlobalsCache();\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = doc => this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = newMemoryRemoteDocumentCache(sizer);\n    this.serializer = new LocalSerializer(serializer);\n    this.bundleCache = new MemoryBundleCache(this.serializer);\n  }\n  start() {\n    return Promise.resolve();\n  }\n  shutdown() {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n  get started() {\n    return this._started;\n  }\n  setDatabaseDeletedListener() {\n    // No op.\n  }\n  setNetworkEnabled() {\n    // No op.\n  }\n  getIndexManager(user) {\n    // We do not currently support indices for memory persistence, so we can\n    // return the same shared instance of the memory index manager.\n    return this.indexManager;\n  }\n  getDocumentOverlayCache(user) {\n    let overlay = this.overlays[user.toKey()];\n    if (!overlay) {\n      overlay = new MemoryDocumentOverlayCache();\n      this.overlays[user.toKey()] = overlay;\n    }\n    return overlay;\n  }\n  getMutationQueue(user, indexManager) {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(indexManager, this.referenceDelegate);\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n  getGlobalsCache() {\n    return this.globalsCache;\n  }\n  getTargetCache() {\n    return this.targetCache;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getBundleCache() {\n    return this.bundleCache;\n  }\n  runTransaction(action, mode, transactionOperation) {\n    logDebug(LOG_TAG$d, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn).next(result => {\n      return this.referenceDelegate.onTransactionCommitted(txn).next(() => result);\n    }).toPromise().then(result => {\n      txn.raiseOnCommittedEvent();\n      return result;\n    });\n  }\n  mutationQueuesContainKey(transaction, key) {\n    return PersistencePromise.or(Object.values(this.mutationQueues).map(queue => () => queue.containsKey(transaction, key)));\n  }\n}\n/**\n * Memory persistence is not actually transactional, but future implementations\n * may have transaction-scoped state.\n */\nclass MemoryTransaction extends PersistenceTransaction {\n  constructor(currentSequenceNumber) {\n    super();\n    this.currentSequenceNumber = currentSequenceNumber;\n  }\n}\nclass MemoryEagerDelegate {\n  constructor(persistence) {\n    this.persistence = persistence;\n    /** Tracks all documents that are active in Query views. */\n    this.localViewReferences = new ReferenceSet();\n    /** The list of documents that are potentially GCed after each transaction. */\n    this._orphanedDocuments = null;\n  }\n  static factory(persistence) {\n    return new MemoryEagerDelegate(persistence);\n  }\n  get orphanedDocuments() {\n    if (!this._orphanedDocuments) {\n      throw fail();\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n  addReference(txn, targetId, key) {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key.toString());\n    return PersistencePromise.resolve();\n  }\n  removeReference(txn, targetId, key) {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n  markPotentiallyOrphaned(txn, key) {\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n  removeTarget(txn, targetData) {\n    const orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);\n    orphaned.forEach(key => this.orphanedDocuments.add(key.toString()));\n    const cache = this.persistence.getTargetCache();\n    return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(keys => {\n      keys.forEach(key => this.orphanedDocuments.add(key.toString()));\n    }).next(() => cache.removeTargetData(txn, targetData));\n  }\n  onTransactionStarted() {\n    this._orphanedDocuments = new Set();\n  }\n  onTransactionCommitted(txn) {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(this.orphanedDocuments, path => {\n      const key = DocumentKey.fromPath(path);\n      return this.isReferenced(txn, key).next(isReferenced => {\n        if (!isReferenced) {\n          changeBuffer.removeEntry(key, SnapshotVersion.min());\n        }\n      });\n    }).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n  updateLimboDocument(txn, key) {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key.toString());\n      } else {\n        this.orphanedDocuments.add(key.toString());\n      }\n    });\n  }\n  documentSize(doc) {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n  isReferenced(txn, key) {\n    return PersistencePromise.or([() => PersistencePromise.resolve(this.localViewReferences.containsKey(key)), () => this.persistence.getTargetCache().containsKey(txn, key), () => this.persistence.mutationQueuesContainKey(txn, key)]);\n  }\n}\nclass MemoryLruDelegate {\n  constructor(persistence, lruParams) {\n    this.persistence = persistence;\n    this.orphanedSequenceNumbers = new ObjectMap(k => encodeResourcePath(k.path), (l, r) => l.isEqual(r));\n    this.garbageCollector = newLruGarbageCollector(this, lruParams);\n  }\n  static factory(persistence, lruParams) {\n    return new MemoryLruDelegate(persistence, lruParams);\n  }\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted() {}\n  onTransactionCommitted(txn) {\n    return PersistencePromise.resolve();\n  }\n  forEachTarget(txn, f) {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n  getSequenceNumberCount(txn) {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\n  }\n  orphanedDocumentCount(txn) {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n  forEachOrphanedDocumentSequenceNumber(txn, f) {\n    return PersistencePromise.forEach(this.orphanedSequenceNumbers, (key, sequenceNumber) => {\n      // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n      // being too recent.\n      return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n        if (!isPinned) {\n          return f(sequenceNumber);\n        } else {\n          return PersistencePromise.resolve();\n        }\n      });\n    });\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.persistence.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key, SnapshotVersion.min());\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n  markPotentiallyOrphaned(txn, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  removeTarget(txn, targetData) {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n  addReference(txn, targetId, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  removeReference(txn, targetId, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  updateLimboDocument(txn, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  documentSize(document) {\n    let documentSize = document.key.toString().length;\n    if (document.isFoundDocument()) {\n      documentSize += estimateByteSize(document.data.value);\n    }\n    return documentSize;\n  }\n  isPinned(txn, key, upperBound) {\n    return PersistencePromise.or([() => this.persistence.mutationQueuesContainKey(txn, key), () => this.persistence.getTargetCache().containsKey(txn, key), () => {\n      const orphanedAt = this.orphanedSequenceNumbers.get(key);\n      return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);\n    }]);\n  }\n  getCacheSize(txn) {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Performs database creation and schema upgrades. */\nclass SchemaConverter {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  /**\n   * Performs database creation and schema upgrades.\n   *\n   * Note that in production, this method is only ever used to upgrade the schema\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\n   * and local feature development.\n   */\n  createOrUpgrade(db, txn, fromVersion, toVersion) {\n    const simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createLegacyRemoteDocumentCache(db);\n    }\n    // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n    let p = PersistencePromise.resolve();\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n      p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\n    }\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(() => upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction));\n      }\n      p = p.next(() => {\n        createClientMetadataStore(db);\n      });\n    }\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\n    }\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(() => {\n        createDocumentGlobalStore(db);\n        return this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\n    }\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(() => this.createCollectionParentIndex(db, simpleDbTransaction));\n    }\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(() => {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        // Note: Schema version 9 used to create a read time index for the\n        // RemoteDocumentCache. This is now done with schema version 13.\n      });\n    }\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\n    }\n    if (fromVersion < 11 && toVersion >= 11) {\n      p = p.next(() => {\n        createBundlesStore(db);\n        createNamedQueriesStore(db);\n      });\n    }\n    if (fromVersion < 12 && toVersion >= 12) {\n      p = p.next(() => {\n        createDocumentOverlayStore(db);\n      });\n    }\n    if (fromVersion < 13 && toVersion >= 13) {\n      p = p.next(() => createRemoteDocumentCache(db)).next(() => this.rewriteRemoteDocumentCache(db, simpleDbTransaction)).next(() => db.deleteObjectStore(DbRemoteDocumentStore$1));\n    }\n    if (fromVersion < 14 && toVersion >= 14) {\n      p = p.next(() => this.runOverlayMigration(db, simpleDbTransaction));\n    }\n    if (fromVersion < 15 && toVersion >= 15) {\n      p = p.next(() => createFieldIndex(db));\n    }\n    if (fromVersion < 16 && toVersion >= 16) {\n      // Clear the object stores to remove possibly corrupted index entries\n      p = p.next(() => {\n        const indexStateStore = txn.objectStore(DbIndexStateStore);\n        indexStateStore.clear();\n      }).next(() => {\n        const indexEntryStore = txn.objectStore(DbIndexEntryStore);\n        indexEntryStore.clear();\n      });\n    }\n    if (fromVersion < 17 && toVersion >= 17) {\n      p = p.next(() => {\n        createGlobalsStore(db);\n      });\n    }\n    return p;\n  }\n  addDocumentGlobal(txn) {\n    let byteSize = 0;\n    return txn.store(DbRemoteDocumentStore$1).iterate((_, doc) => {\n      byteSize += dbDocumentSize(doc);\n    }).next(() => {\n      const metadata = {\n        byteSize\n      };\n      return txn.store(DbRemoteDocumentGlobalStore).put(DbRemoteDocumentGlobalKey, metadata);\n    });\n  }\n  removeAcknowledgedMutations(txn) {\n    const queuesStore = txn.store(DbMutationQueueStore);\n    const mutationsStore = txn.store(DbMutationBatchStore);\n    return queuesStore.loadAll().next(queues => {\n      return PersistencePromise.forEach(queues, queue => {\n        const range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);\n        return mutationsStore.loadAll(DbMutationBatchUserMutationsIndex, range).next(dbBatches => {\n          return PersistencePromise.forEach(dbBatches, dbBatch => {\n            hardAssert(dbBatch.userId === queue.userId);\n            const batch = fromDbMutationBatch(this.serializer, dbBatch);\n            return removeMutationBatch(txn, queue.userId, batch).next(() => {});\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\n   * with a sequence number. Missing rows are given the most recently used sequence number.\n   */\n  ensureSequenceNumbers(txn) {\n    const documentTargetStore = txn.store(DbTargetDocumentStore);\n    const documentsStore = txn.store(DbRemoteDocumentStore$1);\n    const globalTargetStore = txn.store(DbTargetGlobalStore);\n    return globalTargetStore.get(DbTargetGlobalKey).next(metadata => {\n      const writeSentinelKey = path => {\n        return documentTargetStore.put({\n          targetId: 0,\n          path: encodeResourcePath(path),\n          sequenceNumber: metadata.highestListenSequenceNumber\n        });\n      };\n      const promises = [];\n      return documentsStore.iterate((key, doc) => {\n        const path = new ResourcePath(key);\n        const docSentinelKey = sentinelKey(path);\n        promises.push(documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\n          if (!maybeSentinel) {\n            return writeSentinelKey(path);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        }));\n      }).next(() => PersistencePromise.waitFor(promises));\n    });\n  }\n  createCollectionParentIndex(db, txn) {\n    // Create the index.\n    db.createObjectStore(DbCollectionParentStore, {\n      keyPath: DbCollectionParentKeyPath\n    });\n    const collectionParentsStore = txn.store(DbCollectionParentStore);\n    // Helper to add an index entry iff we haven't already written it.\n    const cache = new MemoryCollectionParentIndex();\n    const addEntry = collectionPath => {\n      if (cache.add(collectionPath)) {\n        const collectionId = collectionPath.lastSegment();\n        const parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    };\n    // Index existing remote documents.\n    return txn.store(DbRemoteDocumentStore$1).iterate({\n      keysOnly: true\n    }, (pathSegments, _) => {\n      const path = new ResourcePath(pathSegments);\n      return addEntry(path.popLast());\n    }).next(() => {\n      // Index existing mutations.\n      return txn.store(DbDocumentMutationStore).iterate({\n        keysOnly: true\n      }, ([userID, encodedPath, batchId], _) => {\n        const path = decodeResourcePath(encodedPath);\n        return addEntry(path.popLast());\n      });\n    });\n  }\n  rewriteCanonicalIds(txn) {\n    const targetStore = txn.store(DbTargetStore);\n    return targetStore.iterate((key, originalDbTarget) => {\n      const originalTargetData = fromDbTarget(originalDbTarget);\n      const updatedDbTarget = toDbTarget(this.serializer, originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  }\n  rewriteRemoteDocumentCache(db, transaction) {\n    const legacyRemoteDocumentStore = transaction.store(DbRemoteDocumentStore$1);\n    const writes = [];\n    return legacyRemoteDocumentStore.iterate((_, legacyDocument) => {\n      const remoteDocumentStore = transaction.store(DbRemoteDocumentStore);\n      const path = extractKey(legacyDocument).path.toArray();\n      const dbRemoteDocument = {\n        prefixPath: path.slice(0, path.length - 2),\n        collectionGroup: path[path.length - 2],\n        documentId: path[path.length - 1],\n        readTime: legacyDocument.readTime || [0, 0],\n        unknownDocument: legacyDocument.unknownDocument,\n        noDocument: legacyDocument.noDocument,\n        document: legacyDocument.document,\n        hasCommittedMutations: !!legacyDocument.hasCommittedMutations\n      };\n      writes.push(remoteDocumentStore.put(dbRemoteDocument));\n    }).next(() => PersistencePromise.waitFor(writes));\n  }\n  runOverlayMigration(db, transaction) {\n    const mutationsStore = transaction.store(DbMutationBatchStore);\n    const remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\n    const memoryPersistence = new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer.remoteSerializer);\n    return mutationsStore.loadAll().next(dbBatches => {\n      const userToDocumentSet = new Map();\n      dbBatches.forEach(dbBatch => {\n        var _a;\n        let documentSet = (_a = userToDocumentSet.get(dbBatch.userId)) !== null && _a !== void 0 ? _a : documentKeySet();\n        const batch = fromDbMutationBatch(this.serializer, dbBatch);\n        batch.keys().forEach(key => documentSet = documentSet.add(key));\n        userToDocumentSet.set(dbBatch.userId, documentSet);\n      });\n      return PersistencePromise.forEach(userToDocumentSet, (allDocumentKeysForUser, userId) => {\n        const user = new User(userId);\n        const documentOverlayCache = IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\n        // NOTE: The index manager and the reference delegate are\n        // irrelevant for the purpose of recalculating and saving\n        // overlays. We can therefore simply use the memory\n        // implementation.\n        const indexManager = memoryPersistence.getIndexManager(user);\n        const mutationQueue = IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, memoryPersistence.referenceDelegate);\n        const localDocumentsView = new LocalDocumentsView(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager);\n        return localDocumentsView.recalculateAndSaveOverlaysForDocumentKeys(new IndexedDbTransaction(transaction, ListenSequence.INVALID), allDocumentKeysForUser).next();\n      });\n    });\n  }\n}\nfunction sentinelKey(path) {\n  return [0, encodeResourcePath(path)];\n}\nfunction createPrimaryClientStore(db) {\n  db.createObjectStore(DbPrimaryClientStore);\n}\nfunction createMutationQueue(db) {\n  db.createObjectStore(DbMutationQueueStore, {\n    keyPath: DbMutationQueueKeyPath\n  });\n  const mutationBatchesStore = db.createObjectStore(DbMutationBatchStore, {\n    keyPath: DbMutationBatchKeyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbDocumentMutationStore);\n}\n/**\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\n * and rewrites all data.\n */\nfunction upgradeMutationBatchSchemaAndMigrateData(db, txn) {\n  const v1MutationsStore = txn.store(DbMutationBatchStore);\n  return v1MutationsStore.loadAll().next(existingMutations => {\n    db.deleteObjectStore(DbMutationBatchStore);\n    const mutationsStore = db.createObjectStore(DbMutationBatchStore, {\n      keyPath: DbMutationBatchKeyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, {\n      unique: true\n    });\n    const v3MutationsStore = txn.store(DbMutationBatchStore);\n    const writeAll = existingMutations.map(mutation => v3MutationsStore.put(mutation));\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\nfunction createLegacyRemoteDocumentCache(db) {\n  db.createObjectStore(DbRemoteDocumentStore$1);\n}\nfunction createRemoteDocumentCache(db) {\n  const remoteDocumentStore = db.createObjectStore(DbRemoteDocumentStore, {\n    keyPath: DbRemoteDocumentKeyPath\n  });\n  remoteDocumentStore.createIndex(DbRemoteDocumentDocumentKeyIndex, DbRemoteDocumentDocumentKeyIndexPath);\n  remoteDocumentStore.createIndex(DbRemoteDocumentCollectionGroupIndex, DbRemoteDocumentCollectionGroupIndexPath);\n}\nfunction createDocumentGlobalStore(db) {\n  db.createObjectStore(DbRemoteDocumentGlobalStore);\n}\nfunction createQueryCache(db) {\n  const targetDocumentsStore = db.createObjectStore(DbTargetDocumentStore, {\n    keyPath: DbTargetDocumentKeyPath\n  });\n  targetDocumentsStore.createIndex(DbTargetDocumentDocumentTargetsIndex, DbTargetDocumentDocumentTargetsKeyPath, {\n    unique: true\n  });\n  const targetStore = db.createObjectStore(DbTargetStore, {\n    keyPath: DbTargetKeyPath\n  });\n  // NOTE: This is unique only because the TargetId is the suffix.\n  targetStore.createIndex(DbTargetQueryTargetsIndexName, DbTargetQueryTargetsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbTargetGlobalStore);\n}\nfunction dropQueryCache(db) {\n  db.deleteObjectStore(DbTargetDocumentStore);\n  db.deleteObjectStore(DbTargetStore);\n  db.deleteObjectStore(DbTargetGlobalStore);\n}\nfunction dropRemoteDocumentChangesStore(db) {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n/**\n * Creates the target global singleton row.\n *\n * @param txn - The version upgrade transaction for indexeddb\n */\nfunction writeEmptyTargetGlobalEntry(txn) {\n  const globalStore = txn.store(DbTargetGlobalStore);\n  const metadata = {\n    highestTargetId: 0,\n    highestListenSequenceNumber: 0,\n    lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),\n    targetCount: 0\n  };\n  return globalStore.put(DbTargetGlobalKey, metadata);\n}\nfunction createClientMetadataStore(db) {\n  db.createObjectStore(DbClientMetadataStore, {\n    keyPath: DbClientMetadataKeyPath\n  });\n}\nfunction createBundlesStore(db) {\n  db.createObjectStore(DbBundleStore, {\n    keyPath: DbBundleKeyPath\n  });\n}\nfunction createNamedQueriesStore(db) {\n  db.createObjectStore(DbNamedQueryStore, {\n    keyPath: DbNamedQueryKeyPath\n  });\n}\nfunction createFieldIndex(db) {\n  const indexConfigurationStore = db.createObjectStore(DbIndexConfigurationStore, {\n    keyPath: DbIndexConfigurationKeyPath,\n    autoIncrement: true\n  });\n  indexConfigurationStore.createIndex(DbIndexConfigurationCollectionGroupIndex, DbIndexConfigurationCollectionGroupIndexPath, {\n    unique: false\n  });\n  const indexStateStore = db.createObjectStore(DbIndexStateStore, {\n    keyPath: DbIndexStateKeyPath\n  });\n  indexStateStore.createIndex(DbIndexStateSequenceNumberIndex, DbIndexStateSequenceNumberIndexPath, {\n    unique: false\n  });\n  const indexEntryStore = db.createObjectStore(DbIndexEntryStore, {\n    keyPath: DbIndexEntryKeyPath\n  });\n  indexEntryStore.createIndex(DbIndexEntryDocumentKeyIndex, DbIndexEntryDocumentKeyIndexPath, {\n    unique: false\n  });\n}\nfunction createDocumentOverlayStore(db) {\n  const documentOverlayStore = db.createObjectStore(DbDocumentOverlayStore, {\n    keyPath: DbDocumentOverlayKeyPath\n  });\n  documentOverlayStore.createIndex(DbDocumentOverlayCollectionPathOverlayIndex, DbDocumentOverlayCollectionPathOverlayIndexPath, {\n    unique: false\n  });\n  documentOverlayStore.createIndex(DbDocumentOverlayCollectionGroupOverlayIndex, DbDocumentOverlayCollectionGroupOverlayIndexPath, {\n    unique: false\n  });\n}\nfunction createGlobalsStore(db) {\n  db.createObjectStore(DbGlobalsStore, {\n    keyPath: DbGlobalsKeyPath\n  });\n}\nfunction extractKey(remoteDoc) {\n  if (remoteDoc.document) {\n    return new DocumentKey(ResourcePath.fromString(remoteDoc.document.name).popFirst(5));\n  } else if (remoteDoc.noDocument) {\n    return DocumentKey.fromSegments(remoteDoc.noDocument.path);\n  } else if (remoteDoc.unknownDocument) {\n    return DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n  } else {\n    return fail();\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$c = 'IndexedDbPersistence';\n/**\n * Oldest acceptable age in milliseconds for client metadata before the client\n * is considered inactive and its associated data is garbage collected.\n */\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n/**\n * Oldest acceptable metadata age for clients that may participate in the\n * primary lease election. Clients that have not updated their client metadata\n * within 5 seconds are not eligible to receive a primary lease.\n */\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n/**\n * The interval at which clients will update their metadata, including\n * refreshing their primary lease if held or potentially trying to acquire it if\n * not held.\n *\n * Primary clients may opportunistically refresh their metadata earlier\n * if they're already performing an IndexedDB operation.\n */\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Failed to obtain exclusive access to the persistence layer. To allow ' + 'shared access, multi-tab synchronization has to be enabled in all tabs. ' + 'If you are using `experimentalForceOwningTab:true`, make sure that only ' + 'one tab has persistence enabled at any given time.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing IndexedDB or is known to have ' + 'an incomplete implementation. Offline persistence has been disabled.';\n// The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n/**\n * The name of the main (and currently only) IndexedDB database. This name is\n * appended to the prefix provided to the IndexedDbPersistence constructor.\n */\nconst MAIN_DATABASE = 'main';\n/**\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\n * across sessions.\n *\n * On Web only, the Firestore SDKs support shared access to its persistence\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\n * to synchronize state even without network connectivity. Shared access is\n * currently optional and not enabled unless all clients invoke\n * `enablePersistence()` with `{synchronizeTabs:true}`.\n *\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\n * will designate one client as the “primary client”. An effort is made to pick\n * a visible, network-connected and active client, and this client is\n * responsible for letting other clients know about its presence. The primary\n * client writes a unique client-generated identifier (the client ID) to\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\n * update this entry, another client can acquire the lease and take over as\n * primary.\n *\n * Some persistence operations in the SDK are designated as primary-client only\n * operations. This includes the acknowledgment of mutations and all updates of\n * remote documents. The effects of these operations are written to persistence\n * and then broadcast to other tabs via LocalStorage (see\n * `WebStorageSharedClientState`), which then refresh their state from\n * persistence.\n *\n * Similarly, the primary client listens to notifications sent by secondary\n * clients to discover persistence changes written by secondary clients, such as\n * the addition of new mutations and query targets.\n *\n * If multi-tab is not enabled and another tab already obtained the primary\n * lease, IndexedDbPersistence enters a failed state and all subsequent\n * operations will automatically fail.\n *\n * Additionally, there is an optimization so that when a tab is closed, the\n * primary lease is released immediately (this is especially important to make\n * sure that a refreshed tab is able to immediately re-acquire the primary\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\n * since it is an asynchronous API. So in addition to attempting to give up the\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\n * LocalStorage which acts as an indicator that another tab should go ahead and\n * take the primary lease immediately regardless of the current lease timestamp.\n *\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\n * longer optional.\n */\nclass IndexedDbPersistence {\n  constructor(\n  /**\n   * Whether to synchronize the in-memory state of multiple tabs and share\n   * access to local persistence.\n   */\n  allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window, document, serializer, sequenceNumberSyncer,\n  /**\n   * If set to true, forcefully obtains database access. Existing tabs will\n   * no longer be able to access IndexedDB.\n   */\n  forceOwningTab, schemaVersion = SCHEMA_VERSION) {\n    this.allowTabSynchronization = allowTabSynchronization;\n    this.persistenceKey = persistenceKey;\n    this.clientId = clientId;\n    this.queue = queue;\n    this.window = window;\n    this.document = document;\n    this.sequenceNumberSyncer = sequenceNumberSyncer;\n    this.forceOwningTab = forceOwningTab;\n    this.schemaVersion = schemaVersion;\n    this.listenSequence = null;\n    this._started = false;\n    this.isPrimary = false;\n    this.networkEnabled = true;\n    /** Our window.unload handler, if registered. */\n    this.windowUnloadHandler = null;\n    this.inForeground = false;\n    /** Our 'visibilitychange' listener if registered. */\n    this.documentVisibilityHandler = null;\n    /** The client metadata refresh task. */\n    this.clientMetadataRefresher = null;\n    /** The last time we garbage collected the client metadata object store. */\n    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n    /** A listener to notify on primary state changes. */\n    this.primaryStateListener = _ => Promise.resolve();\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n    }\n    this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);\n    this.dbName = persistenceKey + MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.simpleDb = new SimpleDb(this.dbName, this.schemaVersion, new SchemaConverter(this.serializer));\n    this.globalsCache = new IndexedDbGlobalsCache();\n    this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);\n    this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\n    this.bundleCache = new IndexedDbBundleCache();\n    if (this.window && this.window.localStorage) {\n      this.webStorage = this.window.localStorage;\n    } else {\n      this.webStorage = null;\n      if (forceOwningTab === false) {\n        logError(LOG_TAG$c, 'LocalStorage is unavailable. As a result, persistence may not work ' + 'reliably. In particular enablePersistence() could fail immediately ' + 'after refreshing the page.');\n      }\n    }\n  }\n  /**\n   * Attempt to start IndexedDb persistence.\n   *\n   * @returns Whether persistence was enabled.\n   */\n  start() {\n    // NOTE: This is expected to fail sometimes (in the case of another tab\n    // already having the persistence lock), so it's the first thing we should\n    // do.\n    return this.updateClientMetadataAndTryBecomePrimary().then(() => {\n      if (!this.isPrimary && !this.allowTabSynchronization) {\n        // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n        // obtain the primary lease.\n        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n      }\n      this.attachVisibilityHandler();\n      this.attachWindowUnloadHook();\n      this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n      return this.runTransaction('getHighestListenSequenceNumber', 'readonly', txn => this.targetCache.getHighestSequenceNumber(txn));\n    }).then(highestListenSequenceNumber => {\n      this.listenSequence = new ListenSequence(highestListenSequenceNumber, this.sequenceNumberSyncer);\n    }).then(() => {\n      this._started = true;\n    }).catch(reason => {\n      this.simpleDb && this.simpleDb.close();\n      return Promise.reject(reason);\n    });\n  }\n  /**\n   * Registers a listener that gets called when the primary state of the\n   * instance changes. Upon registering, this listener is invoked immediately\n   * with the current primary state.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setPrimaryStateListener(primaryStateListener) {\n    this.primaryStateListener = async primaryState => {\n      if (this.started) {\n        return primaryStateListener(primaryState);\n      }\n    };\n    return primaryStateListener(this.isPrimary);\n  }\n  /**\n   * Registers a listener that gets called when the database receives a\n   * version change event indicating that it has deleted.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setDatabaseDeletedListener(databaseDeletedListener) {\n    this.simpleDb.setVersionChangeListener(async event => {\n      // Check if an attempt is made to delete IndexedDB.\n      if (event.newVersion === null) {\n        await databaseDeletedListener();\n      }\n    });\n  }\n  /**\n   * Adjusts the current network state in the client's metadata, potentially\n   * affecting the primary lease.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  setNetworkEnabled(networkEnabled) {\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled;\n      // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n      this.queue.enqueueAndForget(async () => {\n        if (this.started) {\n          await this.updateClientMetadataAndTryBecomePrimary();\n        }\n      });\n    }\n  }\n  /**\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\n   * extend the primary lease for the local client. Asynchronously notifies the\n   * primary state listener if the client either newly obtained or released its\n   * primary lease.\n   */\n  updateClientMetadataAndTryBecomePrimary() {\n    return this.runTransaction('updateClientMetadataAndTryBecomePrimary', 'readwrite', txn => {\n      const metadataStore = clientMetadataStore(txn);\n      return metadataStore.put({\n        clientId: this.clientId,\n        updateTimeMs: Date.now(),\n        networkEnabled: this.networkEnabled,\n        inForeground: this.inForeground\n      }).next(() => {\n        if (this.isPrimary) {\n          return this.verifyPrimaryLease(txn).next(success => {\n            if (!success) {\n              this.isPrimary = false;\n              this.queue.enqueueRetryable(() => this.primaryStateListener(false));\n            }\n          });\n        }\n      }).next(() => this.canActAsPrimary(txn)).next(canActAsPrimary => {\n        if (this.isPrimary && !canActAsPrimary) {\n          return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\n        } else if (canActAsPrimary) {\n          return this.acquireOrExtendPrimaryLease(txn).next(() => true);\n        } else {\n          return /* canActAsPrimary= */false;\n        }\n      });\n    }).catch(e => {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG$c, 'Failed to extend owner lease: ', e);\n        // Proceed with the existing state. Any subsequent access to\n        // IndexedDB will verify the lease.\n        return this.isPrimary;\n      }\n      if (!this.allowTabSynchronization) {\n        throw e;\n      }\n      logDebug(LOG_TAG$c, 'Releasing owner lease after error during lease refresh', e);\n      return /* isPrimary= */false;\n    }).then(isPrimary => {\n      if (this.isPrimary !== isPrimary) {\n        this.queue.enqueueRetryable(() => this.primaryStateListener(isPrimary));\n      }\n      this.isPrimary = isPrimary;\n    });\n  }\n  verifyPrimaryLease(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(primaryClient => {\n      return PersistencePromise.resolve(this.isLocalClient(primaryClient));\n    });\n  }\n  removeClientMetadata(txn) {\n    const metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  }\n  /**\n   * If the garbage collection threshold has passed, prunes the\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\n   * time of all clients.\n   */\n  async maybeGarbageCollectMultiClientState() {\n    if (this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)) {\n      this.lastGarbageCollectionTime = Date.now();\n      const inactiveClients = await this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', txn => {\n        const metadataStore = getStore(txn, DbClientMetadataStore);\n        return metadataStore.loadAll().next(existingClients => {\n          const active = this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);\n          const inactive = existingClients.filter(client => active.indexOf(client) === -1);\n          // Delete metadata for clients that are no longer considered active.\n          return PersistencePromise.forEach(inactive, inactiveClient => metadataStore.delete(inactiveClient.clientId)).next(() => inactive);\n        });\n      }).catch(() => {\n        // Ignore primary lease violations or any other type of error. The next\n        // primary will run `maybeGarbageCollectMultiClientState()` again.\n        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n        // on LocalStore.\n        return [];\n      });\n      // Delete potential leftover entries that may continue to mark the\n      // inactive clients as zombied in LocalStorage.\n      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n      // the client atomically, but we can't. So we opt to delete the IndexedDb\n      // entries first to avoid potentially reviving a zombied client.\n      if (this.webStorage) {\n        for (const inactiveClient of inactiveClients) {\n          this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));\n        }\n      }\n    }\n  }\n  /**\n   * Schedules a recurring timer to update the client metadata and to either\n   * extend or acquire the primary lease if the client is eligible.\n   */\n  scheduleClientMetadataAndPrimaryLeaseRefreshes() {\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\"client_metadata_refresh\" /* TimerId.ClientMetadataRefresh */, CLIENT_METADATA_REFRESH_INTERVAL_MS, () => {\n      return this.updateClientMetadataAndTryBecomePrimary().then(() => this.maybeGarbageCollectMultiClientState()).then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\n    });\n  }\n  /** Checks whether `client` is the local client. */\n  isLocalClient(client) {\n    return client ? client.ownerId === this.clientId : false;\n  }\n  /**\n   * Evaluate the state of all active clients and determine whether the local\n   * client is or can act as the holder of the primary lease. Returns whether\n   * the client is eligible for the lease, but does not actually acquire it.\n   * May return 'false' even if there is no active leaseholder and another\n   * (foreground) client should become leaseholder instead.\n   */\n  canActAsPrimary(txn) {\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve(true);\n    }\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(currentPrimary => {\n      const currentLeaseIsValid = currentPrimary !== null && this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !this.isClientZombied(currentPrimary.ownerId);\n      // A client is eligible for the primary lease if:\n      // - its network is enabled and the client's tab is in the foreground.\n      // - its network is enabled and no other client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and the client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and no other client's tab is in\n      //   the foreground.\n      // - the `forceOwningTab` setting was passed in.\n      if (currentLeaseIsValid) {\n        if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\n          return true;\n        }\n        if (!this.isLocalClient(currentPrimary)) {\n          if (!currentPrimary.allowTabSynchronization) {\n            // Fail the `canActAsPrimary` check if the current leaseholder has\n            // not opted into multi-tab synchronization. If this happens at\n            // client startup, we reject the Promise returned by\n            // `enablePersistence()` and the user can continue to use Firestore\n            // with in-memory persistence.\n            // If this fails during a lease refresh, we will instead block the\n            // AsyncQueue from executing further operations. Note that this is\n            // acceptable since mixing & matching different `synchronizeTabs`\n            // settings is not supported.\n            //\n            // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n            // no longer be turned off.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n          }\n          return false;\n        }\n      }\n      if (this.networkEnabled && this.inForeground) {\n        return true;\n      }\n      return clientMetadataStore(txn).loadAll().next(existingClients => {\n        // Process all existing clients and determine whether at least one of\n        // them is better suited to obtain the primary lease.\n        const preferredCandidate = this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(otherClient => {\n          if (this.clientId !== otherClient.clientId) {\n            const otherClientHasBetterNetworkState = !this.networkEnabled && otherClient.networkEnabled;\n            const otherClientHasBetterVisibility = !this.inForeground && otherClient.inForeground;\n            const otherClientHasSameNetworkState = this.networkEnabled === otherClient.networkEnabled;\n            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return preferredCandidate === undefined;\n      });\n    }).next(canActAsPrimary => {\n      if (this.isPrimary !== canActAsPrimary) {\n        logDebug(LOG_TAG$c, `Client ${canActAsPrimary ? 'is' : 'is not'} eligible for a primary lease.`);\n      }\n      return canActAsPrimary;\n    });\n  }\n  async shutdown() {\n    // The shutdown() operations are idempotent and can be called even when\n    // start() aborted (e.g. because it couldn't acquire the persistence lease).\n    this._started = false;\n    this.markClientZombied();\n    if (this.clientMetadataRefresher) {\n      this.clientMetadataRefresher.cancel();\n      this.clientMetadataRefresher = null;\n    }\n    this.detachVisibilityHandler();\n    this.detachWindowUnloadHook();\n    // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\n    // has obtained the primary lease.\n    await this.simpleDb.runTransaction('shutdown', 'readwrite', [DbPrimaryClientStore, DbClientMetadataStore], simpleDbTxn => {\n      const persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);\n      return this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(() => this.removeClientMetadata(persistenceTransaction));\n    });\n    this.simpleDb.close();\n    // Remove the entry marking the client as zombied from LocalStorage since\n    // we successfully deleted its metadata from IndexedDb.\n    this.removeClientZombiedEntry();\n  }\n  /**\n   * Returns clients that are not zombied and have an updateTime within the\n   * provided threshold.\n   */\n  filterActiveClients(clients, activityThresholdMs) {\n    return clients.filter(client => this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !this.isClientZombied(client.clientId));\n  }\n  /**\n   * Returns the IDs of the clients that are currently active. If multi-tab\n   * is not supported, returns an array that only contains the local client's\n   * ID.\n   *\n   * PORTING NOTE: This is only used for Web multi-tab.\n   */\n  getActiveClients() {\n    return this.runTransaction('getActiveClients', 'readonly', txn => {\n      return clientMetadataStore(txn).loadAll().next(clients => this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(clientMetadata => clientMetadata.clientId));\n    });\n  }\n  get started() {\n    return this._started;\n  }\n  getGlobalsCache() {\n    return this.globalsCache;\n  }\n  getMutationQueue(user, indexManager) {\n    return IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, this.referenceDelegate);\n  }\n  getTargetCache() {\n    return this.targetCache;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getIndexManager(user) {\n    return new IndexedDbIndexManager(user, this.serializer.remoteSerializer.databaseId);\n  }\n  getDocumentOverlayCache(user) {\n    return IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\n  }\n  getBundleCache() {\n    return this.bundleCache;\n  }\n  runTransaction(action, mode, transactionOperation) {\n    logDebug(LOG_TAG$c, 'Starting transaction:', action);\n    const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n    const objectStores = getObjectStores(this.schemaVersion);\n    let persistenceTransaction;\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb.runTransaction(action, simpleDbMode, objectStores, simpleDbTxn => {\n      persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, this.listenSequence ? this.listenSequence.next() : ListenSequence.INVALID);\n      if (mode === 'readwrite-primary') {\n        // While we merely verify that we have (or can acquire) the lease\n        // immediately, we wait to extend the primary lease until after\n        // executing transactionOperation(). This ensures that even if the\n        // transactionOperation takes a long time, we'll use a recent\n        // leaseTimestampMs in the extended (or newly acquired) lease.\n        return this.verifyPrimaryLease(persistenceTransaction).next(holdsPrimaryLease => {\n          if (holdsPrimaryLease) {\n            return /* holdsPrimaryLease= */true;\n          }\n          return this.canActAsPrimary(persistenceTransaction);\n        }).next(holdsPrimaryLease => {\n          if (!holdsPrimaryLease) {\n            logError(`Failed to obtain primary lease for action '${action}'.`);\n            this.isPrimary = false;\n            this.queue.enqueueRetryable(() => this.primaryStateListener(false));\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);\n          }\n          return transactionOperation(persistenceTransaction);\n        }).next(result => {\n          return this.acquireOrExtendPrimaryLease(persistenceTransaction).next(() => result);\n        });\n      } else {\n        return this.verifyAllowTabSynchronization(persistenceTransaction).next(() => transactionOperation(persistenceTransaction));\n      }\n    }).then(result => {\n      persistenceTransaction.raiseOnCommittedEvent();\n      return result;\n    });\n  }\n  /**\n   * Verifies that the current tab is the primary leaseholder or alternatively\n   * that the leaseholder has opted into multi-tab synchronization.\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n  verifyAllowTabSynchronization(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(currentPrimary => {\n      const currentLeaseIsValid = currentPrimary !== null && this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !this.isClientZombied(currentPrimary.ownerId);\n      if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\n        if (!this.forceOwningTab && (!this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {\n          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n        }\n      }\n    });\n  }\n  /**\n   * Obtains or extends the new primary lease for the local client. This\n   * method does not verify that the client is eligible for this lease.\n   */\n  acquireOrExtendPrimaryLease(txn) {\n    const newPrimary = {\n      ownerId: this.clientId,\n      allowTabSynchronization: this.allowTabSynchronization,\n      leaseTimestampMs: Date.now()\n    };\n    return primaryClientStore(txn).put(DbPrimaryClientKey, newPrimary);\n  }\n  static isAvailable() {\n    return SimpleDb.isAvailable();\n  }\n  /** Checks the primary lease and removes it if we are the current primary. */\n  releasePrimaryLeaseIfHeld(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(primaryClient => {\n      if (this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG$c, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClientKey);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n  isWithinAge(updateTimeMs, maxAgeMs) {\n    const now = Date.now();\n    const minAcceptable = now - maxAgeMs;\n    const maxAcceptable = now;\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(`Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`);\n      return false;\n    }\n    return true;\n  }\n  attachVisibilityHandler() {\n    if (this.document !== null && typeof this.document.addEventListener === 'function') {\n      this.documentVisibilityHandler = () => {\n        this.queue.enqueueAndForget(() => {\n          this.inForeground = this.document.visibilityState === 'visible';\n          return this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n      this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  }\n  detachVisibilityHandler() {\n    if (this.documentVisibilityHandler) {\n      this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.documentVisibilityHandler = null;\n    }\n  }\n  /**\n   * Attaches a window.unload handler that will synchronously write our\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\n   * by tabs trying to acquire the primary lease to determine that the lease\n   * is no longer valid even if the timestamp is recent. This is particularly\n   * important for the refresh case (so the tab correctly re-acquires the\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\n   * it is a synchronous API and so can be used reliably from  an unload\n   * handler.\n   */\n  attachWindowUnloadHook() {\n    var _a;\n    if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === 'function') {\n      this.windowUnloadHandler = () => {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        this.markClientZombied();\n        const safariIndexdbBugVersionRegex = /(?:Version|Mobile)\\/1[456]/;\n        if (isSafari() && (navigator.appVersion.match(safariIndexdbBugVersionRegex) || navigator.userAgent.match(safariIndexdbBugVersionRegex))) {\n          // On Safari 14, 15, and 16, we do not run any cleanup actions as it might\n          // trigger a bug that prevents Safari from re-opening IndexedDB during\n          // the next page load.\n          // See https://bugs.webkit.org/show_bug.cgi?id=226547\n          this.queue.enterRestrictedMode(/* purgeExistingTasks= */true);\n        }\n        this.queue.enqueueAndForget(() => {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return this.shutdown();\n        });\n      };\n      this.window.addEventListener('pagehide', this.windowUnloadHandler);\n    }\n  }\n  detachWindowUnloadHook() {\n    if (this.windowUnloadHandler) {\n      this.window.removeEventListener('pagehide', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n  /**\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\n   * Clients become zombied when their tab closes without running all of the\n   * cleanup logic in `shutdown()`.\n   */\n  isClientZombied(clientId) {\n    var _a;\n    try {\n      const isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;\n      logDebug(LOG_TAG$c, `Client '${clientId}' ${isZombied ? 'is' : 'is not'} zombied in LocalStorage`);\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG$c, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  }\n  /**\n   * Record client as zombied (a client that had its tab closed). Zombied\n   * clients are ignored during primary tab selection.\n   */\n  markClientZombied() {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  }\n  /** Removes the zombied client entry if it exists. */\n  removeClientZombiedEntry() {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));\n    } catch (e) {\n      // Ignore\n    }\n  }\n  zombiedClientLocalStorageKey(clientId) {\n    return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\n  }\n}\n/**\n * Helper to get a typed SimpleDbStore for the primary client object store.\n */\nfunction primaryClientStore(txn) {\n  return getStore(txn, DbPrimaryClientStore);\n}\n/**\n * Helper to get a typed SimpleDbStore for the client metadata object store.\n */\nfunction clientMetadataStore(txn) {\n  return getStore(txn, DbClientMetadataStore);\n}\n/**\n * Generates a string used as a prefix when storing data in IndexedDB and\n * LocalStorage.\n */\nfunction indexedDbStoragePrefix(databaseId, persistenceKey) {\n  // Use two different prefix formats:\n  //\n  //   * firestore / persistenceKey / projectID . databaseID / ...\n  //   * firestore / persistenceKey / projectID / ...\n  //\n  // projectIDs are DNS-compatible names and cannot contain dots\n  // so there's no danger of collisions.\n  let database = databaseId.projectId;\n  if (!databaseId.isDefaultDatabase) {\n    database += '.' + databaseId.database;\n  }\n  return 'firestore/' + persistenceKey + '/' + database + '/';\n}\nasync function indexedDbClearPersistence(persistenceKey) {\n  if (!SimpleDb.isAvailable()) {\n    return Promise.resolve();\n  }\n  const dbName = persistenceKey + MAIN_DATABASE;\n  await SimpleDb.delete(dbName);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two array for equality using comparator. The method computes the\n * intersection and invokes `onAdd` for every element that is in `after` but not\n * `before`. `onRemove` is invoked for every element in `before` but missing\n * from `after`.\n *\n * The method creates a copy of both `before` and `after` and runs in O(n log\n * n), where n is the size of the two lists.\n *\n * @param before - The elements that exist in the original array.\n * @param after - The elements to diff against the original array.\n * @param comparator - The comparator for the elements in before and after.\n * @param onAdd - A function to invoke for every element that is part of `\n * after` but not `before`.\n * @param onRemove - A function to invoke for every element that is part of\n * `before` but not `after`.\n */\nfunction diffArrays(before, after, comparator, onAdd, onRemove) {\n  before = [...before];\n  after = [...after];\n  before.sort(comparator);\n  after.sort(comparator);\n  const bLen = before.length;\n  const aLen = after.length;\n  let a = 0;\n  let b = 0;\n  while (a < aLen && b < bLen) {\n    const cmp = comparator(before[b], after[a]);\n    if (cmp < 0) {\n      // The element was removed if the next element in our ordered\n      // walkthrough is only in `before`.\n      onRemove(before[b++]);\n    } else if (cmp > 0) {\n      // The element was added if the next element in our ordered walkthrough\n      // is only in `after`.\n      onAdd(after[a++]);\n    } else {\n      a++;\n      b++;\n    }\n  }\n  while (a < aLen) {\n    onAdd(after[a++]);\n  }\n  while (b < bLen) {\n    onRemove(before[b++]);\n  }\n}\n/**\n * Verifies equality for an array of primitives.\n *\n * @private\n * @internal\n * @param left Array of primitives.\n * @param right Array of primitives.\n * @return True if arrays are equal.\n */\nfunction isPrimitiveArrayEqual(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  for (let i = 0; i < left.length; ++i) {\n    if (left[i] !== right[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$b = 'LocalStore';\n/**\n * The maximum time to leave a resume token buffered without writing it out.\n * This value is arbitrary: it's long enough to avoid several writes\n * (possibly indefinitely if updates come more frequently than this) but\n * short enough that restarting after crashing will still have a pretty\n * recent resume token.\n */\nconst RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n/**\n * Implements `LocalStore` interface.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass LocalStoreImpl {\n  constructor(/** Manages our in-memory or durable persistence. */\n  persistence, queryEngine, initialUser, serializer) {\n    this.persistence = persistence;\n    this.queryEngine = queryEngine;\n    this.serializer = serializer;\n    /**\n     * Maps a targetID to data about its target.\n     *\n     * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\n     * of `applyRemoteEvent()` idempotent.\n     */\n    this.targetDataByTarget = new SortedMap(primitiveComparator);\n    /** Maps a target to its targetID. */\n    // TODO(wuandy): Evaluate if TargetId can be part of Target.\n    this.targetIdByTarget = new ObjectMap(t => canonifyTarget(t), targetEquals);\n    /**\n     * A per collection group index of the last read time processed by\n     * `getNewDocumentChanges()`.\n     *\n     * PORTING NOTE: This is only used for multi-tab synchronization.\n     */\n    this.collectionGroupReadTime = new Map();\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.bundleCache = persistence.getBundleCache();\n    this.initializeUserComponents(initialUser);\n  }\n  initializeUserComponents(user) {\n    // TODO(indexing): Add spec tests that test these components change after a\n    // user change\n    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(user);\n    this.indexManager = this.persistence.getIndexManager(user);\n    this.mutationQueue = this.persistence.getMutationQueue(user, this.indexManager);\n    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.documentOverlayCache, this.indexManager);\n    this.remoteDocuments.setIndexManager(this.indexManager);\n    this.queryEngine.initialize(this.localDocuments, this.indexManager);\n  }\n  collectGarbage(garbageCollector) {\n    return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', txn => garbageCollector.collect(txn, this.targetDataByTarget));\n  }\n}\nfunction newLocalStore(/** Manages our in-memory or durable persistence. */\npersistence, queryEngine, initialUser, serializer) {\n  return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);\n}\n/**\n * Tells the LocalStore that the currently authenticated user has changed.\n *\n * In response the local store switches the mutation queue to the new user and\n * returns any resulting document changes.\n */\n// PORTING NOTE: Android and iOS only return the documents affected by the\n// change.\nasync function localStoreHandleUserChange(localStore, user) {\n  const localStoreImpl = debugCast(localStore);\n  const result = await localStoreImpl.persistence.runTransaction('Handle user change', 'readonly', txn => {\n    // Swap out the mutation queue, grabbing the pending mutation batches\n    // before and after.\n    let oldBatches;\n    return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(promisedOldBatches => {\n      oldBatches = promisedOldBatches;\n      localStoreImpl.initializeUserComponents(user);\n      return localStoreImpl.mutationQueue.getAllMutationBatches(txn);\n    }).next(newBatches => {\n      const removedBatchIds = [];\n      const addedBatchIds = [];\n      // Union the old/new changed keys.\n      let changedKeys = documentKeySet();\n      for (const batch of oldBatches) {\n        removedBatchIds.push(batch.batchId);\n        for (const mutation of batch.mutations) {\n          changedKeys = changedKeys.add(mutation.key);\n        }\n      }\n      for (const batch of newBatches) {\n        addedBatchIds.push(batch.batchId);\n        for (const mutation of batch.mutations) {\n          changedKeys = changedKeys.add(mutation.key);\n        }\n      }\n      // Return the set of all (potentially) changed documents and the list\n      // of mutation batch IDs that were affected by change.\n      return localStoreImpl.localDocuments.getDocuments(txn, changedKeys).next(affectedDocuments => {\n        return {\n          affectedDocuments,\n          removedBatchIds,\n          addedBatchIds\n        };\n      });\n    });\n  });\n  return result;\n}\n/* Accepts locally generated Mutations and commit them to storage. */\nfunction localStoreWriteLocally(localStore, mutations) {\n  const localStoreImpl = debugCast(localStore);\n  const localWriteTime = Timestamp.now();\n  const keys = mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\n  let overlayedDocuments;\n  let mutationBatch;\n  return localStoreImpl.persistence.runTransaction('Locally write mutations', 'readwrite', txn => {\n    // Figure out which keys do not have a remote version in the cache, this\n    // is needed to create the right overlay mutation: if no remote version\n    // presents, we do not need to create overlays as patch mutations.\n    // TODO(Overlay): Is there a better way to determine this? Using the\n    //  document version does not work because local mutations set them back\n    //  to 0.\n    let remoteDocs = mutableDocumentMap();\n    let docsWithoutRemoteVersion = documentKeySet();\n    return localStoreImpl.remoteDocuments.getEntries(txn, keys).next(docs => {\n      remoteDocs = docs;\n      remoteDocs.forEach((key, doc) => {\n        if (!doc.isValidDocument()) {\n          docsWithoutRemoteVersion = docsWithoutRemoteVersion.add(key);\n        }\n      });\n    }).next(() => {\n      // Load and apply all existing mutations. This lets us compute the\n      // current base state for all non-idempotent transforms before applying\n      // any additional user-provided writes.\n      return localStoreImpl.localDocuments.getOverlayedDocuments(txn, remoteDocs);\n    }).next(docs => {\n      overlayedDocuments = docs;\n      // For non-idempotent mutations (such as `FieldValue.increment()`),\n      // we record the base state in a separate patch mutation. This is\n      // later used to guarantee consistent values and prevents flicker\n      // even if the backend sends us an update that already includes our\n      // transform.\n      const baseMutations = [];\n      for (const mutation of mutations) {\n        const baseValue = mutationExtractBaseValue(mutation, overlayedDocuments.get(mutation.key).overlayedDocument);\n        if (baseValue != null) {\n          // NOTE: The base state should only be applied if there's some\n          // existing document to override, so use a Precondition of\n          // exists=true\n          baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));\n        }\n      }\n      return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);\n    }).next(batch => {\n      mutationBatch = batch;\n      const overlays = batch.applyToLocalDocumentSet(overlayedDocuments, docsWithoutRemoteVersion);\n      return localStoreImpl.documentOverlayCache.saveOverlays(txn, batch.batchId, overlays);\n    });\n  }).then(() => ({\n    batchId: mutationBatch.batchId,\n    changes: convertOverlayedDocumentMapToDocumentMap(overlayedDocuments)\n  }));\n}\n/**\n * Acknowledges the given batch.\n *\n * On the happy path when a batch is acknowledged, the local store will\n *\n *  + remove the batch from the mutation queue;\n *  + apply the changes to the remote document cache;\n *  + recalculate the latency compensated view implied by those changes (there\n *    may be mutations in the queue that affect the documents but haven't been\n *    acknowledged yet); and\n *  + give the changed documents back the sync engine\n *\n * @returns The resulting (modified) documents.\n */\nfunction localStoreAcknowledgeBatch(localStore, batchResult) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', txn => {\n    const affected = batchResult.batch.keys();\n    const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n    });\n    return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(() => documentBuffer.apply(txn)).next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn)).next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affected, batchResult.batch.batchId)).next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, getKeysWithTransformResults(batchResult))).next(() => localStoreImpl.localDocuments.getDocuments(txn, affected));\n  });\n}\nfunction getKeysWithTransformResults(batchResult) {\n  let result = documentKeySet();\n  for (let i = 0; i < batchResult.mutationResults.length; ++i) {\n    const mutationResult = batchResult.mutationResults[i];\n    if (mutationResult.transformResults.length > 0) {\n      result = result.add(batchResult.batch.mutations[i].key);\n    }\n  }\n  return result;\n}\n/**\n * Removes mutations from the MutationQueue for the specified batch;\n * LocalDocuments will be recalculated.\n *\n * @returns The resulting modified documents.\n */\nfunction localStoreRejectBatch(localStore, batchId) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Reject batch', 'readwrite-primary', txn => {\n    let affectedKeys;\n    return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(batch => {\n      hardAssert(batch !== null);\n      affectedKeys = batch.keys();\n      return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\n    }).next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn)).next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affectedKeys, batchId)).next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, affectedKeys)).next(() => localStoreImpl.localDocuments.getDocuments(txn, affectedKeys));\n  });\n}\n/**\n * Returns the largest (latest) batch id in mutation queue that is pending\n * server response.\n *\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\n */\nfunction localStoreGetHighestUnacknowledgedBatchId(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get highest unacknowledged batch id', 'readonly', txn => localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn));\n}\n/**\n * Returns the last consistent snapshot processed (used by the RemoteStore to\n * determine whether to buffer incoming snapshots from the backend).\n */\nfunction localStoreGetLastRemoteSnapshotVersion(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get last remote snapshot version', 'readonly', txn => localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn));\n}\n/**\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\n * event reflects any write batches that have been acknowledged or rejected\n * (i.e. we do not re-apply local mutations to updates from this event).\n *\n * LocalDocuments are re-calculated if there are remaining mutations in the\n * queue.\n */\nfunction localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {\n  const localStoreImpl = debugCast(localStore);\n  const remoteVersion = remoteEvent.snapshotVersion;\n  let newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n  return localStoreImpl.persistence.runTransaction('Apply remote event', 'readwrite-primary', txn => {\n    const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n    });\n    // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n    newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n    const promises = [];\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      const oldTargetData = newTargetDataByTargetMap.get(targetId);\n      if (!oldTargetData) {\n        return;\n      }\n      // Only update the remote keys if the target is still active. This\n      // ensures that we can persist the updated target data along with\n      // the updated assignment.\n      promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(() => {\n        return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);\n      }));\n      let newTargetData = oldTargetData.withSequenceNumber(txn.currentSequenceNumber);\n      if (remoteEvent.targetMismatches.get(targetId) !== null) {\n        newTargetData = newTargetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min());\n      } else if (change.resumeToken.approximateByteSize() > 0) {\n        newTargetData = newTargetData.withResumeToken(change.resumeToken, remoteVersion);\n      }\n      newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);\n      // Update the target data if there are target changes (or if\n      // sufficient time has passed since the last update).\n      if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\n        promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));\n      }\n    });\n    let changedDocs = mutableDocumentMap();\n    let existenceChangedKeys = documentKeySet();\n    remoteEvent.documentUpdates.forEach(key => {\n      if (remoteEvent.resolvedLimboDocuments.has(key)) {\n        promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));\n      }\n    });\n    // Each loop iteration only affects its \"own\" doc, so it's safe to get all\n    // the remote documents in advance in a single call.\n    promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates).next(result => {\n      changedDocs = result.changedDocuments;\n      existenceChangedKeys = result.existenceChangedKeys;\n    }));\n    // HACK: The only reason we allow a null snapshot version is so that we\n    // can synthesize remote events when we get permission denied errors while\n    // trying to resolve the state of a locally cached document that is in\n    // limbo.\n    if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n      const updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(lastRemoteSnapshotVersion => {\n        return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);\n      });\n      promises.push(updateRemoteVersion);\n    }\n    return PersistencePromise.waitFor(promises).next(() => documentBuffer.apply(txn)).next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, changedDocs, existenceChangedKeys)).next(() => changedDocs);\n  }).then(changedDocs => {\n    localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\n    return changedDocs;\n  });\n}\n/**\n * Populates document change buffer with documents from backend or a bundle.\n * Returns the document changes resulting from applying those documents, and\n * also a set of documents whose existence state are changed as a result.\n *\n * @param txn - Transaction to use to read existing documents from storage.\n * @param documentBuffer - Document buffer to collect the resulted changes to be\n *        applied to storage.\n * @param documents - Documents to be applied.\n */\nfunction populateDocumentChangeBuffer(txn, documentBuffer, documents) {\n  let updatedKeys = documentKeySet();\n  let existenceChangedKeys = documentKeySet();\n  documents.forEach(k => updatedKeys = updatedKeys.add(k));\n  return documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n    let changedDocuments = mutableDocumentMap();\n    documents.forEach((key, doc) => {\n      const existingDoc = existingDocs.get(key);\n      // Check if see if there is a existence state change for this document.\n      if (doc.isFoundDocument() !== existingDoc.isFoundDocument()) {\n        existenceChangedKeys = existenceChangedKeys.add(key);\n      }\n      // Note: The order of the steps below is important, since we want\n      // to ensure that rejected limbo resolutions (which fabricate\n      // NoDocuments with SnapshotVersion.min()) never add documents to\n      // cache.\n      if (doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min())) {\n        // NoDocuments with SnapshotVersion.min() are used in manufactured\n        // events. We remove these documents from cache since we lost\n        // access.\n        documentBuffer.removeEntry(key, doc.readTime);\n        changedDocuments = changedDocuments.insert(key, doc);\n      } else if (!existingDoc.isValidDocument() || doc.version.compareTo(existingDoc.version) > 0 || doc.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {\n        documentBuffer.addEntry(doc);\n        changedDocuments = changedDocuments.insert(key, doc);\n      } else {\n        logDebug(LOG_TAG$b, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n      }\n    });\n    return {\n      changedDocuments,\n      existenceChangedKeys\n    };\n  });\n}\n/**\n * Returns true if the newTargetData should be persisted during an update of\n * an active target. TargetData should always be persisted when a target is\n * being released and should not call this function.\n *\n * While the target is active, TargetData updates can be omitted when nothing\n * about the target has changed except metadata like the resume token or\n * snapshot version. Occasionally it's worth the extra write to prevent these\n * values from getting too stale after a crash, but this doesn't have to be\n * too frequent.\n */\nfunction shouldPersistTargetData(oldTargetData, newTargetData, change) {\n  // Always persist target data if we don't already have a resume token.\n  if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n    return true;\n  }\n  // Don't allow resume token changes to be buffered indefinitely. This\n  // allows us to be reasonably up-to-date after a crash and avoids needing\n  // to loop over all active queries on shutdown. Especially in the browser\n  // we may not get time to do anything interesting while the current tab is\n  // closing.\n  const timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();\n  if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\n    return true;\n  }\n  // Otherwise if the only thing that has changed about a target is its resume\n  // token it's not worth persisting. Note that the RemoteStore keeps an\n  // in-memory view of the currently active targets which includes the current\n  // resume token, so stream failure or user changes will still use an\n  // up-to-date resume token regardless of what we do here.\n  const changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;\n  return changes > 0;\n}\n/**\n * Notifies local store of the changed views to locally pin documents.\n */\nasync function localStoreNotifyLocalViewChanges(localStore, viewChanges) {\n  const localStoreImpl = debugCast(localStore);\n  try {\n    await localStoreImpl.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', txn => {\n      return PersistencePromise.forEach(viewChanges, viewChange => {\n        return PersistencePromise.forEach(viewChange.addedKeys, key => localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange.targetId, key)).next(() => PersistencePromise.forEach(viewChange.removedKeys, key => localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange.targetId, key)));\n      });\n    });\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // If `notifyLocalViewChanges` fails, we did not advance the sequence\n      // number for the documents that were included in this transaction.\n      // This might trigger them to be deleted earlier than they otherwise\n      // would have, but it should not invalidate the integrity of the data.\n      logDebug(LOG_TAG$b, 'Failed to update sequence numbers: ' + e);\n    } else {\n      throw e;\n    }\n  }\n  for (const viewChange of viewChanges) {\n    const targetId = viewChange.targetId;\n    if (!viewChange.fromCache) {\n      const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n      // Advance the last limbo free snapshot version\n      const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n      const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);\n      // TODO(b/272564316): Apply the optimization done on other platforms.\n      // This is a problem for web because saving the updated targetData from\n      // non-primary client conflicts with what primary client saved.\n    }\n  }\n}\n/**\n * Gets the mutation batch after the passed in batchId in the mutation queue\n * or null if empty.\n * @param afterBatchId - If provided, the batch to search after.\n * @returns The next mutation or null if there wasn't one.\n */\nfunction localStoreGetNextMutationBatch(localStore, afterBatchId) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get next mutation batch', 'readonly', txn => {\n    if (afterBatchId === undefined) {\n      afterBatchId = BATCHID_UNKNOWN;\n    }\n    return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n  });\n}\n/**\n * Reads the current value of a Document with a given key or null if not\n * found - used for testing.\n */\nfunction localStoreReadDocument(localStore, key) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('read document', 'readonly', txn => localStoreImpl.localDocuments.getDocument(txn, key));\n}\n/**\n * Assigns the given target an internal ID so that its results can be pinned so\n * they don't get GC'd. A target must be allocated in the local store before\n * the store can be used to manage its view.\n *\n * Allocating an already allocated `Target` will return the existing `TargetData`\n * for that `Target`.\n */\nfunction localStoreAllocateTarget(localStore, target) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Allocate target', 'readwrite', txn => {\n    let targetData;\n    return localStoreImpl.targetCache.getTargetData(txn, target).next(cached => {\n      if (cached) {\n        // This target has been listened to previously, so reuse the\n        // previous targetID.\n        // TODO(mcg): freshen last accessed date?\n        targetData = cached;\n        return PersistencePromise.resolve(targetData);\n      } else {\n        return localStoreImpl.targetCache.allocateTargetId(txn).next(targetId => {\n          targetData = new TargetData(target, targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, txn.currentSequenceNumber);\n          return localStoreImpl.targetCache.addTargetData(txn, targetData).next(() => targetData);\n        });\n      }\n    });\n  }).then(targetData => {\n    // If Multi-Tab is enabled, the existing target data may be newer than\n    // the in-memory data\n    const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);\n    if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);\n      localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\n    }\n    return targetData;\n  });\n}\n/**\n * Returns the TargetData as seen by the LocalStore, including updates that may\n * have not yet been persisted to the TargetCache.\n */\n// Visible for testing.\nfunction localStoreGetTargetData(localStore, transaction, target) {\n  const localStoreImpl = debugCast(localStore);\n  const targetId = localStoreImpl.targetIdByTarget.get(target);\n  if (targetId !== undefined) {\n    return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));\n  } else {\n    return localStoreImpl.targetCache.getTargetData(transaction, target);\n  }\n}\n/**\n * Unpins all the documents associated with the given target. If\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\n * directly removes the associated target data from the target cache.\n *\n * Releasing a non-existing `Target` is a no-op.\n */\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\nasync function localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {\n  const localStoreImpl = debugCast(localStore);\n  const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n  const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n  try {\n    if (!keepPersistedTargetData) {\n      await localStoreImpl.persistence.runTransaction('Release target', mode, txn => {\n        return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);\n      });\n    }\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // All `releaseTarget` does is record the final metadata state for the\n      // target, but we've been recording this periodically during target\n      // activity. If we lose this write this could cause a very slight\n      // difference in the order of target deletion during GC, but we\n      // don't define exact LRU semantics so this is acceptable.\n      logDebug(LOG_TAG$b, `Failed to update sequence numbers for target ${targetId}: ${e}`);\n    } else {\n      throw e;\n    }\n  }\n  localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);\n  localStoreImpl.targetIdByTarget.delete(targetData.target);\n}\n/**\n * Runs the specified query against the local store and returns the results,\n * potentially taking advantage of query data from previous executions (such\n * as the set of remote keys).\n *\n * @param usePreviousResults - Whether results from previous executions can\n * be used to optimize this query execution.\n */\nfunction localStoreExecuteQuery(localStore, query, usePreviousResults) {\n  const localStoreImpl = debugCast(localStore);\n  let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n  let remoteKeys = documentKeySet();\n  return localStoreImpl.persistence.runTransaction('Execute query', 'readwrite',\n  // Use readwrite instead of readonly so indexes can be created\n  // Use readwrite instead of readonly so indexes can be created\n  txn => {\n    return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query)).next(targetData => {\n      if (targetData) {\n        lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;\n        return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(result => {\n          remoteKeys = result;\n        });\n      }\n    }).next(() => localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet())).next(documents => {\n      setMaxReadTime(localStoreImpl, queryCollectionGroup(query), documents);\n      return {\n        documents,\n        remoteKeys\n      };\n    });\n  });\n}\nfunction applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {\n  const batch = batchResult.batch;\n  const docKeys = batch.keys();\n  let promiseChain = PersistencePromise.resolve();\n  docKeys.forEach(docKey => {\n    promiseChain = promiseChain.next(() => documentBuffer.getEntry(txn, docKey)).next(doc => {\n      const ackVersion = batchResult.docVersions.get(docKey);\n      hardAssert(ackVersion !== null);\n      if (doc.version.compareTo(ackVersion) < 0) {\n        batch.applyToRemoteDocument(doc, batchResult);\n        if (doc.isValidDocument()) {\n          // We use the commitVersion as the readTime rather than the\n          // document's updateTime since the updateTime is not advanced\n          // for updates that do not modify the underlying document.\n          doc.setReadTime(batchResult.commitVersion);\n          documentBuffer.addEntry(doc);\n        }\n      }\n    });\n  });\n  return promiseChain.next(() => localStoreImpl.mutationQueue.removeMutationBatch(txn, batch));\n}\n/** Returns the local view of the documents affected by a mutation batch. */\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreLookupMutationDocuments(localStore, batchId) {\n  const localStoreImpl = debugCast(localStore);\n  const mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);\n  return localStoreImpl.persistence.runTransaction('Lookup mutation documents', 'readonly', txn => {\n    return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(keys => {\n      if (keys) {\n        return localStoreImpl.localDocuments.getDocuments(txn, keys);\n      } else {\n        return PersistencePromise.resolve(null);\n      }\n    });\n  });\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {\n  const mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);\n  mutationQueueImpl.removeCachedMutationKeys(batchId);\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetActiveClients(localStore) {\n  const persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);\n  return persistenceImpl.getActiveClients();\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetCachedTarget(localStore, targetId) {\n  const localStoreImpl = debugCast(localStore);\n  const targetCacheImpl = debugCast(localStoreImpl.targetCache);\n  const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\n  if (cachedTargetData) {\n    return Promise.resolve(cachedTargetData.target);\n  } else {\n    return localStoreImpl.persistence.runTransaction('Get target data', 'readonly', txn => {\n      return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(targetData => targetData ? targetData.target : null);\n    });\n  }\n}\n/**\n * Returns the set of documents that have been updated since the last call.\n * If this is the first call, returns the set of changes since client\n * initialization. Further invocations will return document that have changed\n * since the prior call.\n */\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetNewDocumentChanges(localStore, collectionGroup) {\n  const localStoreImpl = debugCast(localStore);\n  // Get the current maximum read time for the collection. This should always\n  // exist, but to reduce the chance for regressions we default to\n  // SnapshotVersion.Min()\n  // TODO(indexing): Consider removing the default value.\n  const readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) || SnapshotVersion.min();\n  return localStoreImpl.persistence.runTransaction('Get new document changes', 'readonly', txn => localStoreImpl.remoteDocuments.getAllFromCollectionGroup(txn, collectionGroup, newIndexOffsetSuccessorFromReadTime(readTime, INITIAL_LARGEST_BATCH_ID), /* limit= */Number.MAX_SAFE_INTEGER)).then(changedDocs => {\n    setMaxReadTime(localStoreImpl, collectionGroup, changedDocs);\n    return changedDocs;\n  });\n}\n/** Sets the collection group's maximum read time from the given documents. */\n// PORTING NOTE: Multi-Tab only.\nfunction setMaxReadTime(localStoreImpl, collectionGroup, changedDocs) {\n  let readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) || SnapshotVersion.min();\n  changedDocs.forEach((_, doc) => {\n    if (doc.readTime.compareTo(readTime) > 0) {\n      readTime = doc.readTime;\n    }\n  });\n  localStoreImpl.collectionGroupReadTime.set(collectionGroup, readTime);\n}\n/**\n * Creates a new target using the given bundle name, which will be used to\n * hold the keys of all documents from the bundle in query-document mappings.\n * This ensures that the loaded documents do not get garbage collected\n * right away.\n */\nfunction umbrellaTarget(bundleName) {\n  // It is OK that the path used for the query is not valid, because this will\n  // not be read and queried.\n  return queryToTarget(newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${bundleName}`)));\n}\n/**\n * Applies the documents from a bundle to the \"ground-state\" (remote)\n * documents.\n *\n * LocalDocuments are re-calculated if there are remaining mutations in the\n * queue.\n */\nasync function localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {\n  const localStoreImpl = debugCast(localStore);\n  let documentKeys = documentKeySet();\n  let documentMap = mutableDocumentMap();\n  for (const bundleDoc of documents) {\n    const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n    if (bundleDoc.document) {\n      documentKeys = documentKeys.add(documentKey);\n    }\n    const doc = bundleConverter.toMutableDocument(bundleDoc);\n    doc.setReadTime(bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));\n    documentMap = documentMap.insert(documentKey, doc);\n  }\n  const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n    trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n  });\n  // Allocates a target to hold all document keys from the bundle, such that\n  // they will not get garbage collected right away.\n  const umbrellaTargetData = await localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName));\n  return localStoreImpl.persistence.runTransaction('Apply bundle documents', 'readwrite', txn => {\n    return populateDocumentChangeBuffer(txn, documentBuffer, documentMap).next(documentChangeResult => {\n      documentBuffer.apply(txn);\n      return documentChangeResult;\n    }).next(documentChangeResult => {\n      return localStoreImpl.targetCache.removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId).next(() => localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId)).next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, documentChangeResult.changedDocuments, documentChangeResult.existenceChangedKeys)).next(() => documentChangeResult.changedDocuments);\n    });\n  });\n}\n/**\n * Returns a promise of a boolean to indicate if the given bundle has already\n * been loaded and the create time is newer than the current loading bundle.\n */\nfunction localStoreHasNewerBundle(localStore, bundleMetadata) {\n  const localStoreImpl = debugCast(localStore);\n  const currentReadTime = fromVersion(bundleMetadata.createTime);\n  return localStoreImpl.persistence.runTransaction('hasNewerBundle', 'readonly', transaction => {\n    return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);\n  }).then(cached => {\n    return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;\n  });\n}\n/**\n * Saves the given `BundleMetadata` to local persistence.\n */\nfunction localStoreSaveBundle(localStore, bundleMetadata) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Save bundle', 'readwrite', transaction => {\n    return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);\n  });\n}\n/**\n * Returns a promise of a `NamedQuery` associated with given query name. Promise\n * resolves to undefined if no persisted data can be found.\n */\nfunction localStoreGetNamedQuery(localStore, queryName) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get named query', 'readonly', transaction => localStoreImpl.bundleCache.getNamedQuery(transaction, queryName));\n}\n/**\n * Saves the given `NamedQuery` to local persistence.\n */\nasync function localStoreSaveNamedQuery(localStore, query, documents = documentKeySet()) {\n  // Allocate a target for the named query such that it can be resumed\n  // from associated read time if users use it to listen.\n  // NOTE: this also means if no corresponding target exists, the new target\n  // will remain active and will not get collected, unless users happen to\n  // unlisten the query somehow.\n  const allocated = await localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query.bundledQuery)));\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Save named query', 'readwrite', transaction => {\n    const readTime = fromVersion(query.readTime);\n    // Simply save the query itself if it is older than what the SDK already\n    // has.\n    if (allocated.snapshotVersion.compareTo(readTime) >= 0) {\n      return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\n    }\n    // Update existing target data because the query from the bundle is newer.\n    const newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);\n    localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);\n    return localStoreImpl.targetCache.updateTargetData(transaction, newTargetData).next(() => localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId)).next(() => localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId)).next(() => localStoreImpl.bundleCache.saveNamedQuery(transaction, query));\n  });\n}\nasync function localStoreConfigureFieldIndexes(localStore, newFieldIndexes) {\n  const localStoreImpl = debugCast(localStore);\n  const indexManager = localStoreImpl.indexManager;\n  const promises = [];\n  return localStoreImpl.persistence.runTransaction('Configure indexes', 'readwrite', transaction => indexManager.getFieldIndexes(transaction).next(oldFieldIndexes => diffArrays(oldFieldIndexes, newFieldIndexes, fieldIndexSemanticComparator, fieldIndex => {\n    promises.push(indexManager.addFieldIndex(transaction, fieldIndex));\n  }, fieldIndex => {\n    promises.push(indexManager.deleteFieldIndex(transaction, fieldIndex));\n  })).next(() => PersistencePromise.waitFor(promises)));\n}\nfunction localStoreSetIndexAutoCreationEnabled(localStore, isEnabled) {\n  const localStoreImpl = debugCast(localStore);\n  localStoreImpl.queryEngine.indexAutoCreationEnabled = isEnabled;\n}\nfunction localStoreDeleteAllFieldIndexes(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  const indexManager = localStoreImpl.indexManager;\n  return localStoreImpl.persistence.runTransaction('Delete All Indexes', 'readwrite', transaction => indexManager.deleteAllFieldIndexes(transaction));\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A tracker to keep a record of important details during database local query\n * execution.\n */\nclass QueryContext {\n  constructor() {\n    /**\n     * Counts the number of documents passed through during local query execution.\n     */\n    this._documentReadCount = 0;\n  }\n  get documentReadCount() {\n    return this._documentReadCount;\n  }\n  incrementDocumentReadCount(amount) {\n    this._documentReadCount += amount;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_INDEX_AUTO_CREATION_MIN_COLLECTION_SIZE = 100;\n/**\n * This cost represents the evaluation result of\n * (([index, docKey] + [docKey, docContent]) per document in the result set)\n * / ([docKey, docContent] per documents in full collection scan) coming from\n * experiment [enter PR experiment URL here].\n */\nfunction getDefaultRelativeIndexReadCostPerDocument() {\n  // These values were derived from an experiment where several members of the\n  // Firestore SDK team ran a performance test in various environments.\n  // Googlers can see b/299284287 for details.\n  if (isSafari()) {\n    return 8;\n  } else if (getAndroidVersion(getUA()) > 0) {\n    return 6;\n  } else {\n    return 4;\n  }\n}\n/**\n * The Firestore query engine.\n *\n * Firestore queries can be executed in three modes. The Query Engine determines\n * what mode to use based on what data is persisted. The mode only determines\n * the runtime complexity of the query - the result set is equivalent across all\n * implementations.\n *\n * The Query engine will use indexed-based execution if a user has configured\n * any index that can be used to execute query (via `setIndexConfiguration()`).\n * Otherwise, the engine will try to optimize the query by re-using a previously\n * persisted query result. If that is not possible, the query will be executed\n * via a full collection scan.\n *\n * Index-based execution is the default when available. The query engine\n * supports partial indexed execution and merges the result from the index\n * lookup with documents that have not yet been indexed. The index evaluation\n * matches the backend's format and as such, the SDK can use indexing for all\n * queries that the backend supports.\n *\n * If no index exists, the query engine tries to take advantage of the target\n * document mapping in the TargetCache. These mappings exists for all queries\n * that have been synced with the backend at least once and allow the query\n * engine to only read documents that previously matched a query plus any\n * documents that were edited after the query was last listened to.\n *\n * There are some cases when this optimization is not guaranteed to produce\n * the same results as full collection scans. In these cases, query\n * processing falls back to full scans. These cases are:\n *\n * - Limit queries where a document that matched the query previously no longer\n *   matches the query.\n *\n * - Limit queries where a document edit may cause the document to sort below\n *   another document that is in the local cache.\n *\n * - Queries that have never been CURRENT or free of limbo documents.\n */\nclass QueryEngine {\n  constructor() {\n    this.initialized = false;\n    this.indexAutoCreationEnabled = false;\n    /**\n     * SDK only decides whether it should create index when collection size is\n     * larger than this.\n     */\n    this.indexAutoCreationMinCollectionSize = DEFAULT_INDEX_AUTO_CREATION_MIN_COLLECTION_SIZE;\n    this.relativeIndexReadCostPerDocument = getDefaultRelativeIndexReadCostPerDocument();\n  }\n  /** Sets the document view to query against. */\n  initialize(localDocuments, indexManager) {\n    this.localDocumentsView = localDocuments;\n    this.indexManager = indexManager;\n    this.initialized = true;\n  }\n  /** Returns all local documents matching the specified query. */\n  getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {\n    // Stores the result from executing the query; using this object is more\n    // convenient than passing the result between steps of the persistence\n    // transaction and improves readability comparatively.\n    const queryResult = {\n      result: null\n    };\n    return this.performQueryUsingIndex(transaction, query).next(result => {\n      queryResult.result = result;\n    }).next(() => {\n      if (queryResult.result) {\n        return;\n      }\n      return this.performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion).next(result => {\n        queryResult.result = result;\n      });\n    }).next(() => {\n      if (queryResult.result) {\n        return;\n      }\n      const context = new QueryContext();\n      return this.executeFullCollectionScan(transaction, query, context).next(result => {\n        queryResult.result = result;\n        if (this.indexAutoCreationEnabled) {\n          return this.createCacheIndexes(transaction, query, context, result.size);\n        }\n      });\n    }).next(() => queryResult.result);\n  }\n  createCacheIndexes(transaction, query, context, resultSize) {\n    if (context.documentReadCount < this.indexAutoCreationMinCollectionSize) {\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'SDK will not create cache indexes for query:', stringifyQuery(query), 'since it only creates cache indexes for collection contains', 'more than or equal to', this.indexAutoCreationMinCollectionSize, 'documents');\n      }\n      return PersistencePromise.resolve();\n    }\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug('QueryEngine', 'Query:', stringifyQuery(query), 'scans', context.documentReadCount, 'local documents and returns', resultSize, 'documents as results.');\n    }\n    if (context.documentReadCount > this.relativeIndexReadCostPerDocument * resultSize) {\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'The SDK decides to create cache indexes for query:', stringifyQuery(query), 'as using cache indexes may help improve performance.');\n      }\n      return this.indexManager.createTargetIndexes(transaction, queryToTarget(query));\n    }\n    return PersistencePromise.resolve();\n  }\n  /**\n   * Performs an indexed query that evaluates the query based on a collection's\n   * persisted index values. Returns `null` if an index is not available.\n   */\n  performQueryUsingIndex(transaction, query) {\n    if (queryMatchesAllDocuments(query)) {\n      // Queries that match all documents don't benefit from using\n      // key-based lookups. It is more efficient to scan all documents in a\n      // collection, rather than to perform individual lookups.\n      return PersistencePromise.resolve(null);\n    }\n    let target = queryToTarget(query);\n    return this.indexManager.getIndexType(transaction, target).next(indexType => {\n      if (indexType === 0 /* IndexType.NONE */) {\n        // The target cannot be served from any index.\n        return null;\n      }\n      if (query.limit !== null && indexType === 1 /* IndexType.PARTIAL */) {\n        // We cannot apply a limit for targets that are served using a partial\n        // index. If a partial index will be used to serve the target, the\n        // query may return a superset of documents that match the target\n        // (e.g. if the index doesn't include all the target's filters), or\n        // may return the correct set of documents in the wrong order (e.g. if\n        // the index doesn't include a segment for one of the orderBys).\n        // Therefore, a limit should not be applied in such cases.\n        query = queryWithLimit(query, null, \"F\" /* LimitType.First */);\n        target = queryToTarget(query);\n      }\n      return this.indexManager.getDocumentsMatchingTarget(transaction, target).next(keys => {\n        const sortedKeys = documentKeySet(...keys);\n        return this.localDocumentsView.getDocuments(transaction, sortedKeys).next(indexedDocuments => {\n          return this.indexManager.getMinOffset(transaction, target).next(offset => {\n            const previousResults = this.applyQuery(query, indexedDocuments);\n            if (this.needsRefill(query, previousResults, sortedKeys, offset.readTime)) {\n              // A limit query whose boundaries change due to local\n              // edits can be re-run against the cache by excluding the\n              // limit. This ensures that all documents that match the\n              // query's filters are included in the result set. The SDK\n              // can then apply the limit once all local edits are\n              // incorporated.\n              return this.performQueryUsingIndex(transaction, queryWithLimit(query, null, \"F\" /* LimitType.First */));\n            }\n            return this.appendRemainingResults(transaction, previousResults, query, offset);\n          });\n        });\n      });\n    });\n  }\n  /**\n   * Performs a query based on the target's persisted query mapping. Returns\n   * `null` if the mapping is not available or cannot be used.\n   */\n  performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion) {\n    if (queryMatchesAllDocuments(query)) {\n      // Queries that match all documents don't benefit from using\n      // key-based lookups. It is more efficient to scan all documents in a\n      // collection, rather than to perform individual lookups.\n      return PersistencePromise.resolve(null);\n    }\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return PersistencePromise.resolve(null);\n    }\n    return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(documents => {\n      const previousResults = this.applyQuery(query, documents);\n      if (this.needsRefill(query, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {\n        return PersistencePromise.resolve(null);\n      }\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'Re-using previous result from %s to execute query: %s', lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));\n      }\n      // Retrieve all results for documents that were updated since the last\n      // limbo-document free remote snapshot.\n      return this.appendRemainingResults(transaction, previousResults, query, newIndexOffsetSuccessorFromReadTime(lastLimboFreeSnapshotVersion, INITIAL_LARGEST_BATCH_ID)).next(results => results);\n    });\n  }\n  /** Applies the query filter and sorting to the provided documents.  */\n  applyQuery(query, documents) {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet(newQueryComparator(query));\n    documents.forEach((_, maybeDoc) => {\n      if (queryMatches(query, maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n  /**\n   * Determines if a limit query needs to be refilled from cache, making it\n   * ineligible for index-free execution.\n   *\n   * @param query - The query.\n   * @param sortedPreviousResults - The documents that matched the query when it\n   * was last synchronized, sorted by the query's comparator.\n   * @param remoteKeys - The document keys that matched the query at the last\n   * snapshot.\n   * @param limboFreeSnapshotVersion - The version of the snapshot when the\n   * query was last synchronized.\n   */\n  needsRefill(query, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {\n    if (query.limit === null) {\n      // Queries without limits do not need to be refilled.\n      return false;\n    }\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      // The query needs to be refilled if a previously matching document no\n      // longer matches.\n      return true;\n    }\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge = query.limitType === \"F\" /* LimitType.First */ ? sortedPreviousResults.last() : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;\n  }\n  executeFullCollectionScan(transaction, query, context) {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug('QueryEngine', 'Using full collection scan to execute query:', stringifyQuery(query));\n    }\n    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, IndexOffset.min(), context);\n  }\n  /**\n   * Combines the results from an indexed execution with the remaining documents\n   * that have not yet been indexed.\n   */\n  appendRemainingResults(transaction, indexedResults, query, offset) {\n    // Retrieve all results for documents that were updated since the offset.\n    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, offset).next(remainingResults => {\n      // Merge with existing results\n      indexedResults.forEach(d => {\n        remainingResults = remainingResults.insert(d.key, d);\n      });\n      return remainingResults;\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\nconst CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n/** Assembles the key for a client state in WebStorage */\nfunction createWebStorageClientStateKey(persistenceKey, clientId) {\n  return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\n}\n// The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\nconst MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n/** Assembles the key for a mutation batch in WebStorage */\nfunction createWebStorageMutationBatchKey(persistenceKey, user, batchId) {\n  let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\n  if (user.isAuthenticated()) {\n    mutationKey += `_${user.uid}`;\n  }\n  return mutationKey;\n}\n// The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\nconst QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n/** Assembles the key for a query state in WebStorage */\nfunction createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {\n  return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\n}\n// The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\nconst ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n/** Assembles the key for the online state of the primary tab. */\nfunction createWebStorageOnlineStateKey(persistenceKey) {\n  return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\n}\n// The WebStorage prefix that plays as a event to indicate the remote documents\n// might have changed due to some secondary tabs loading a bundle.\n// format of the key is:\n//     firestore_bundle_loaded_v2_<persistenceKey>\n// The version ending with \"v2\" stores the list of modified collection groups.\nconst BUNDLE_LOADED_KEY_PREFIX = 'firestore_bundle_loaded_v2';\nfunction createBundleLoadedKey(persistenceKey) {\n  return `${BUNDLE_LOADED_KEY_PREFIX}_${persistenceKey}`;\n}\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\nconst SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n/** Assembles the key for the current sequence number. */\nfunction createWebStorageSequenceNumberKey(persistenceKey) {\n  return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$a = 'SharedClientState';\n/**\n * Holds the state of a mutation batch, including its user ID, batch ID and\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\n */\n// Visible for testing\nclass MutationMetadata {\n  constructor(user, batchId, state, error) {\n    this.user = user;\n    this.batchId = batchId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(user, batchId, value) {\n    const mutationBatch = JSON.parse(value);\n    let validData = typeof mutationBatch === 'object' && ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === undefined || typeof mutationBatch.error === 'object');\n    let firestoreError = undefined;\n    if (validData && mutationBatch.error) {\n      validData = typeof mutationBatch.error.message === 'string' && typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);\n      }\n    }\n    if (validData) {\n      return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse mutation state for ID '${batchId}': ${value}`);\n      return null;\n    }\n  }\n  toWebStorageJSON() {\n    const batchMetadata = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n    return JSON.stringify(batchMetadata);\n  }\n}\n/**\n * Holds the state of a query target, including its target ID and whether the\n * target is 'not-current', 'current' or 'rejected'.\n */\n// Visible for testing\nclass QueryTargetMetadata {\n  constructor(targetId, state, error) {\n    this.targetId = targetId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(targetId, value) {\n    const targetState = JSON.parse(value);\n    let validData = typeof targetState === 'object' && ['not-current', 'current', 'rejected'].indexOf(targetState.state) !== -1 && (targetState.error === undefined || typeof targetState.error === 'object');\n    let firestoreError = undefined;\n    if (validData && targetState.error) {\n      validData = typeof targetState.error.message === 'string' && typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);\n      }\n    }\n    if (validData) {\n      return new QueryTargetMetadata(targetId, targetState.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse target state for ID '${targetId}': ${value}`);\n      return null;\n    }\n  }\n  toWebStorageJSON() {\n    const targetState = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n    return JSON.stringify(targetState);\n  }\n}\n/**\n * This class represents the immutable ClientState for a client read from\n * WebStorage, containing the list of active query targets.\n */\nclass RemoteClientState {\n  constructor(clientId, activeTargetIds) {\n    this.clientId = clientId;\n    this.activeTargetIds = activeTargetIds;\n  }\n  /**\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(clientId, value) {\n    const clientState = JSON.parse(value);\n    let validData = typeof clientState === 'object' && clientState.activeTargetIds instanceof Array;\n    let activeTargetIdsSet = targetIdSet();\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);\n    }\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse client data for instance '${clientId}': ${value}`);\n      return null;\n    }\n  }\n}\n/**\n * This class represents the online state for all clients participating in\n * multi-tab. The online state is only written to by the primary client, and\n * used in secondary clients to update their query views.\n */\nclass SharedOnlineState {\n  constructor(clientId, onlineState) {\n    this.clientId = clientId;\n    this.onlineState = onlineState;\n  }\n  /**\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\n   * Logs a warning and returns null if the format of the data is not valid.\n   */\n  static fromWebStorageEntry(value) {\n    const onlineState = JSON.parse(value);\n    const validData = typeof onlineState === 'object' && ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === 'string';\n    if (validData) {\n      return new SharedOnlineState(onlineState.clientId, onlineState.onlineState);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n/**\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\n * mutable and keeps track of all pending mutations, which allows us to\n * update the range of pending mutation batch IDs as new mutations are added or\n * removed.\n *\n * The data in `LocalClientState` is not read from WebStorage and instead\n * updated via its instance methods. The updated state can be serialized via\n * `toWebStorageJSON()`.\n */\n// Visible for testing.\nclass LocalClientState {\n  constructor() {\n    this.activeTargetIds = targetIdSet();\n  }\n  addQueryTarget(targetId) {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n  removeQueryTarget(targetId) {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n  /**\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\n   * Does not encode `clientId` as it is part of the key in WebStorage.\n   */\n  toWebStorageJSON() {\n    const data = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n/**\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\n * backing store for the SharedClientState. It keeps track of all active\n * clients and supports modifications of the local client's data.\n */\nclass WebStorageSharedClientState {\n  constructor(window, queue, persistenceKey, localClientId, initialUser) {\n    this.window = window;\n    this.queue = queue;\n    this.persistenceKey = persistenceKey;\n    this.localClientId = localClientId;\n    this.syncEngine = null;\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n    this.storageListener = this.handleWebStorageEvent.bind(this);\n    this.activeClients = new SortedMap(primitiveComparator);\n    this.started = false;\n    /**\n     * Captures WebStorage events that occur before `start()` is called. These\n     * events are replayed once `WebStorageSharedClientState` is started.\n     */\n    this.earlyEvents = [];\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);\n    this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());\n    this.clientStateKeyRe = new RegExp(`^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`);\n    this.mutationBatchKeyRe = new RegExp(`^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`);\n    this.queryTargetKeyRe = new RegExp(`^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`);\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n    this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.window.addEventListener('storage', this.storageListener);\n  }\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(window) {\n    return !!(window && window.localStorage);\n  }\n  async start() {\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine.getActiveClients();\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n      const storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(clientState.clientId, clientState);\n        }\n      }\n    }\n    this.persistClientState();\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n    this.earlyEvents = [];\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.window.addEventListener('pagehide', () => this.shutdown());\n    this.started = true;\n  }\n  writeSequenceNumber(sequenceNumber) {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n  getAllActiveQueryTargets() {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n  isActiveQueryTarget(targetId) {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n  addPendingMutation(batchId) {\n    this.persistMutationState(batchId, 'pending');\n  }\n  updateMutationState(batchId, state, error) {\n    this.persistMutationState(batchId, state, error);\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n  addLocalQueryTarget(targetId, addToActiveTargetIds = true) {\n    let queryState = 'not-current';\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n    // If the query is listening to cache only, the target ID should not be registered with the\n    // local Firestore client as an active watch target.\n    if (addToActiveTargetIds) {\n      this.localClientState.addQueryTarget(targetId);\n    }\n    this.persistClientState();\n    return queryState;\n  }\n  removeLocalQueryTarget(targetId) {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n  isLocalQueryTarget(targetId) {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n  clearQueryState(targetId) {\n    this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n  }\n  updateQueryState(targetId, state, error) {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n  handleUserChange(user, removedBatchIds, addedBatchIds) {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n  setOnlineState(onlineState) {\n    this.persistOnlineState(onlineState);\n  }\n  notifyBundleLoaded(collectionGroups) {\n    this.persistBundleLoadedState(collectionGroups);\n  }\n  shutdown() {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n  getItem(key) {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG$a, 'READ', key, value);\n    return value;\n  }\n  setItem(key, value) {\n    logDebug(LOG_TAG$a, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n  removeItem(key) {\n    logDebug(LOG_TAG$a, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n  handleWebStorageEvent(event) {\n    // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n    const storageEvent = event;\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG$a, 'EVENT', storageEvent.key, storageEvent.newValue);\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError('Received WebStorage notification for local change. Another client might have ' + 'garbage-collected our state');\n        return;\n      }\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(storageEvent);\n          return;\n        }\n        if (storageEvent.key === null) {\n          return;\n        }\n        if (this.clientStateKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue != null) {\n            const clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);\n            if (clientState) {\n              return this.handleClientStateEvent(clientState.clientId, clientState);\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(storageEvent.key);\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (storageEvent.key === this.onlineStateKey) {\n          if (storageEvent.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (storageEvent.key === this.sequenceNumberKey) {\n          const sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler(sequenceNumber);\n          }\n        } else if (storageEvent.key === this.bundleLoadedKey) {\n          const collectionGroups = this.fromWebStoreBundleLoadedState(storageEvent.newValue);\n          await Promise.all(collectionGroups.map(cg => this.syncEngine.synchronizeWithChangedDocuments(cg)));\n        }\n      });\n    }\n  }\n  get localClientState() {\n    return this.activeClients.get(this.localClientId);\n  }\n  persistClientState() {\n    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());\n  }\n  persistMutationState(batchId, state, error) {\n    const mutationState = new MutationMetadata(this.currentUser, batchId, state, error);\n    const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n  removeMutationState(batchId) {\n    const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.removeItem(mutationKey);\n  }\n  persistOnlineState(onlineState) {\n    const entry = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n  persistQueryTargetState(targetId, state, error) {\n    const targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n  persistBundleLoadedState(collectionGroups) {\n    const json = JSON.stringify(Array.from(collectionGroups));\n    this.setItem(this.bundleLoadedKey, json);\n  }\n  /**\n   * Parses a client state key in WebStorage. Returns null if the key does not\n   * match the expected key format.\n   */\n  fromWebStorageClientStateKey(key) {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n  /**\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\n   * be parsed.\n   */\n  fromWebStorageClientState(key, value) {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n  /**\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  fromWebStorageMutationMetadata(key, value) {\n    const match = this.mutationBatchKeyRe.exec(key);\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);\n  }\n  /**\n   * Parses a query target state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  fromWebStorageQueryTargetMetadata(key, value) {\n    const match = this.queryTargetKeyRe.exec(key);\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n  /**\n   * Parses an online state from WebStorage. Returns 'null' if the value\n   * could not be parsed.\n   */\n  fromWebStorageOnlineState(value) {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n  fromWebStoreBundleLoadedState(value) {\n    return JSON.parse(value);\n  }\n  async handleMutationBatchEvent(mutationBatch) {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(LOG_TAG$a, `Ignoring mutation for non-active user ${mutationBatch.user.uid}`);\n      return;\n    }\n    return this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error);\n  }\n  handleQueryTargetEvent(targetMetadata) {\n    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);\n  }\n  handleClientStateEvent(clientId, clientState) {\n    const updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n    const addedTargets = [];\n    const removedTargets = [];\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n  handleOnlineStateEvent(onlineState) {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler(onlineState.onlineState);\n    }\n  }\n  extractActiveQueryTargets(clients) {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\nfunction fromWebStorageSequenceNumber(seqString) {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(typeof parsed === 'number');\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n/**\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\n * clients using memory persistence. The state in this class remains fully\n * isolated and no synchronization is performed.\n */\nclass MemorySharedClientState {\n  constructor() {\n    this.localState = new LocalClientState();\n    this.queryState = {};\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n  }\n  addPendingMutation(batchId) {\n    // No op.\n  }\n  updateMutationState(batchId, state, error) {\n    // No op.\n  }\n  addLocalQueryTarget(targetId, addToActiveTargetIds = true) {\n    if (addToActiveTargetIds) {\n      this.localState.addQueryTarget(targetId);\n    }\n    return this.queryState[targetId] || 'not-current';\n  }\n  updateQueryState(targetId, state, error) {\n    this.queryState[targetId] = state;\n  }\n  removeLocalQueryTarget(targetId) {\n    this.localState.removeQueryTarget(targetId);\n  }\n  isLocalQueryTarget(targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n  clearQueryState(targetId) {\n    delete this.queryState[targetId];\n  }\n  getAllActiveQueryTargets() {\n    return this.localState.activeTargetIds;\n  }\n  isActiveQueryTarget(targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n  start() {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n  handleUserChange(user, removedBatchIds, addedBatchIds) {\n    // No op.\n  }\n  setOnlineState(onlineState) {\n    // No op.\n  }\n  shutdown() {}\n  writeSequenceNumber(sequenceNumber) {}\n  notifyBundleLoaded(collectionGroups) {\n    // No op.\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NoopConnectivityMonitor {\n  addCallback(callback) {\n    // No-op.\n  }\n  shutdown() {\n    // No-op.\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a simple helper class that implements the Stream interface to\n * bridge to other implementations that are streams but do not implement the\n * interface. The stream callbacks are invoked with the callOn... methods.\n */\nclass StreamBridge {\n  constructor(args) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n  onConnected(callback) {\n    this.wrappedOnConnected = callback;\n  }\n  onOpen(callback) {\n    this.wrappedOnOpen = callback;\n  }\n  onClose(callback) {\n    this.wrappedOnClose = callback;\n  }\n  onMessage(callback) {\n    this.wrappedOnMessage = callback;\n  }\n  close() {\n    this.closeFn();\n  }\n  send(msg) {\n    this.sendFn(msg);\n  }\n  callOnConnected() {\n    this.wrappedOnConnected();\n  }\n  callOnOpen() {\n    this.wrappedOnOpen();\n  }\n  callOnClose(err) {\n    this.wrappedOnClose(err);\n  }\n  callOnMessage(msg) {\n    this.wrappedOnMessage(msg);\n  }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */\nlet lastUniqueDebugId = null;\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\nfunction generateInitialUniqueDebugId() {\n  const minResult = 0x10000000;\n  const maxResult = 0x90000000;\n  const resultRange = maxResult - minResult;\n  const resultOffset = Math.round(resultRange * Math.random());\n  return minResult + resultOffset;\n}\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction generateUniqueDebugId() {\n  if (lastUniqueDebugId === null) {\n    lastUniqueDebugId = generateInitialUniqueDebugId();\n  } else {\n    lastUniqueDebugId++;\n  }\n  return '0x' + lastUniqueDebugId.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\n * details.\n */\n/**\n * Creates a node-style callback that resolves or rejects a new Promise. The\n * callback is passed to the given action which can then use the callback as\n * a parameter to a node-style function.\n *\n * The intent is to directly bridge a node-style function (which takes a\n * callback) into a Promise without manually converting between the node-style\n * callback and the promise at each call.\n *\n * In effect it allows you to convert:\n *\n * @example\n * new Promise((resolve: (value?: fs.Stats) => void,\n *              reject: (error?: any) => void) => {\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => {\n *     if (error) {\n *       reject(error);\n *     } else {\n *       resolve(stat);\n *     }\n *   });\n * });\n *\n * Into\n * @example\n * nodePromise((callback: NodeCallback<fs.Stats>) => {\n *   fs.stat(path, callback);\n * });\n *\n * @param action - a function that takes a node-style callback as an argument\n *     and then uses that callback to invoke some node-style API.\n * @returns a new Promise which will be rejected if the callback is given the\n *     first Error parameter or will resolve to the value given otherwise.\n */\nfunction nodePromise(action) {\n  return new Promise((resolve, reject) => {\n    action((error, value) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n    });\n  });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: Fetch runtime version from grpc-js/package.json instead\n// when there's a cleaner way to dynamic require JSON in both Node ESM and CJS\nconst grpcVersion = '1.9.1';\nconst LOG_TAG$9 = 'GrpcConnection';\nconst X_GOOG_API_CLIENT_VALUE = `gl-node/${process.versions.node} fire/${SDK_VERSION} grpc/${grpcVersion}`;\nfunction createMetadata(databasePath, authToken, appCheckToken, appId) {\n  hardAssert(authToken === null || authToken.type === 'OAuth');\n  const metadata = new grpc.Metadata();\n  if (authToken) {\n    authToken.headers.forEach((value, key) => metadata.set(key, value));\n  }\n  if (appCheckToken) {\n    appCheckToken.headers.forEach((value, key) => metadata.set(key, value));\n  }\n  if (appId) {\n    metadata.set('X-Firebase-GMPID', appId);\n  }\n  metadata.set('X-Goog-Api-Client', X_GOOG_API_CLIENT_VALUE);\n  // These headers are used to improve routing and project isolation by the\n  // backend.\n  // TODO(b/199767712): We are keeping 'Google-Cloud-Resource-Prefix' until Emulators can be\n  // released with cl/428820046. Currently blocked because Emulators are now built with Java\n  // 11 from Google3.\n  metadata.set('Google-Cloud-Resource-Prefix', databasePath);\n  metadata.set('x-goog-request-params', databasePath);\n  return metadata;\n}\n/**\n * A Connection implemented by GRPC-Node.\n */\nclass GrpcConnection {\n  get shouldResourcePathBeIncludedInRequest() {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` ignore their `path` arguments, and expect\n    // the \"path\" to be part of the given `request`.\n    return true;\n  }\n  constructor(protos, databaseInfo) {\n    this.databaseInfo = databaseInfo;\n    // We cache stubs for the most-recently-used token.\n    this.cachedStub = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.firestore = protos['google']['firestore']['v1'];\n    this.databasePath = `projects/${databaseInfo.databaseId.projectId}/databases/${databaseInfo.databaseId.database}`;\n  }\n  ensureActiveStub() {\n    if (!this.cachedStub) {\n      logDebug(LOG_TAG$9, 'Creating Firestore stub.');\n      const credentials = this.databaseInfo.ssl ? grpc.credentials.createSsl() : grpc.credentials.createInsecure();\n      this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials);\n    }\n    return this.cachedStub;\n  }\n  invokeRPC(rpcName, path, request, authToken, appCheckToken) {\n    const streamId = generateUniqueDebugId();\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const jsonRequest = Object.assign({\n      database: this.databasePath\n    }, request);\n    return nodePromise(callback => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked with request:`, request);\n      return stub[rpcName](jsonRequest, metadata, (grpcError, value) => {\n        if (grpcError) {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\n          callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));\n        } else {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed with response:`, value);\n          callback(undefined, value);\n        }\n      });\n    });\n  }\n  invokeStreamingRPC(rpcName, path, request, authToken, appCheckToken, expectedResponseCount) {\n    const streamId = generateUniqueDebugId();\n    const results = [];\n    const responseDeferred = new Deferred();\n    logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked (streaming) with request:`, request);\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const jsonRequest = Object.assign(Object.assign({}, request), {\n      database: this.databasePath\n    });\n    const stream = stub[rpcName](jsonRequest, metadata);\n    let callbackFired = false;\n    stream.on('data', response => {\n      logDebug(LOG_TAG$9, `RPC ${rpcName} ${streamId} received result:`, response);\n      results.push(response);\n      if (expectedResponseCount !== undefined && results.length === expectedResponseCount) {\n        callbackFired = true;\n        responseDeferred.resolve(results);\n      }\n    });\n    stream.on('end', () => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed.`);\n      if (!callbackFired) {\n        callbackFired = true;\n        responseDeferred.resolve(results);\n      }\n    });\n    stream.on('error', grpcError => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\n      const code = mapCodeFromRpcCode(grpcError.code);\n      responseDeferred.reject(new FirestoreError(code, grpcError.message));\n    });\n    return responseDeferred.promise;\n  }\n  // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\n  openStream(rpcName, authToken, appCheckToken) {\n    const streamId = generateUniqueDebugId();\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const grpcStream = stub[rpcName](metadata);\n    let closed = false;\n    const close = err => {\n      if (!closed) {\n        closed = true;\n        stream.callOnClose(err);\n        grpcStream.end();\n      }\n    };\n    const stream = new StreamBridge({\n      sendFn: msg => {\n        if (!closed) {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} sending:`, msg);\n          try {\n            grpcStream.write(msg);\n          } catch (e) {\n            // This probably means we didn't conform to the proto.  Make sure to\n            // log the message we sent.\n            logError('Failure sending:', msg);\n            logError('Error:', e);\n            throw e;\n          }\n        } else {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ` + 'not sending because gRPC stream is closed:', msg);\n        }\n      },\n      closeFn: () => {\n        logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} closed locally via close().`);\n        close();\n      }\n    });\n    let onConnectedSent = false;\n    grpcStream.on('data', msg => {\n      if (!closed) {\n        logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} received:`, msg);\n        // Emulate the \"onConnected\" event that WebChannelConnection sends.\n        if (!onConnectedSent) {\n          stream.callOnConnected();\n          onConnectedSent = true;\n        }\n        stream.callOnMessage(msg);\n      }\n    });\n    grpcStream.on('end', () => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ended.`);\n      close();\n    });\n    grpcStream.on('error', grpcError => {\n      if (!closed) {\n        logWarn(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} error. Code:`, grpcError.code, 'Message:', grpcError.message);\n        const code = mapCodeFromRpcCode(grpcError.code);\n        close(new FirestoreError(code, grpcError.message));\n      }\n    });\n    logDebug(LOG_TAG$9, `Opening RPC '${rpcName}' stream ${streamId} ` + `to ${this.databaseInfo.host}`);\n    // TODO(dimond): Since grpc has no explicit open status (or does it?) we\n    // simulate an onOpen in the next loop after the stream had it's listeners\n    // registered\n    setTimeout(() => {\n      stream.callOnOpen();\n    }, 0);\n    return stream;\n  }\n  /**\n   * Closes and cleans up any resources associated with the GrpcConnection.\n   * If a gRPC client has been generated for this connection, the gRPC client\n   * is closed. Failure to call terminate on a GrpcConnection can result\n   * in leaked resources of the gRPC client.\n   */\n  terminate() {\n    if (this.cachedStub) {\n      this.cachedStub.close();\n      this.cachedStub = undefined;\n    }\n  }\n}\nconst nested = {\n  google: {\n    nested: {\n      protobuf: {\n        options: {\n          csharp_namespace: \"Google.Protobuf.WellKnownTypes\",\n          go_package: \"github.com/golang/protobuf/ptypes/wrappers\",\n          java_package: \"com.google.protobuf\",\n          java_outer_classname: \"WrappersProto\",\n          java_multiple_files: true,\n          objc_class_prefix: \"GPB\",\n          cc_enable_arenas: true,\n          optimize_for: \"SPEED\"\n        },\n        nested: {\n          Timestamp: {\n            fields: {\n              seconds: {\n                type: \"int64\",\n                id: 1\n              },\n              nanos: {\n                type: \"int32\",\n                id: 2\n              }\n            }\n          },\n          FileDescriptorSet: {\n            fields: {\n              file: {\n                rule: \"repeated\",\n                type: \"FileDescriptorProto\",\n                id: 1\n              }\n            }\n          },\n          FileDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              \"package\": {\n                type: \"string\",\n                id: 2\n              },\n              dependency: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 3\n              },\n              publicDependency: {\n                rule: \"repeated\",\n                type: \"int32\",\n                id: 10,\n                options: {\n                  packed: false\n                }\n              },\n              weakDependency: {\n                rule: \"repeated\",\n                type: \"int32\",\n                id: 11,\n                options: {\n                  packed: false\n                }\n              },\n              messageType: {\n                rule: \"repeated\",\n                type: \"DescriptorProto\",\n                id: 4\n              },\n              enumType: {\n                rule: \"repeated\",\n                type: \"EnumDescriptorProto\",\n                id: 5\n              },\n              service: {\n                rule: \"repeated\",\n                type: \"ServiceDescriptorProto\",\n                id: 6\n              },\n              extension: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 7\n              },\n              options: {\n                type: \"FileOptions\",\n                id: 8\n              },\n              sourceCodeInfo: {\n                type: \"SourceCodeInfo\",\n                id: 9\n              },\n              syntax: {\n                type: \"string\",\n                id: 12\n              }\n            }\n          },\n          DescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              field: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 2\n              },\n              extension: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 6\n              },\n              nestedType: {\n                rule: \"repeated\",\n                type: \"DescriptorProto\",\n                id: 3\n              },\n              enumType: {\n                rule: \"repeated\",\n                type: \"EnumDescriptorProto\",\n                id: 4\n              },\n              extensionRange: {\n                rule: \"repeated\",\n                type: \"ExtensionRange\",\n                id: 5\n              },\n              oneofDecl: {\n                rule: \"repeated\",\n                type: \"OneofDescriptorProto\",\n                id: 8\n              },\n              options: {\n                type: \"MessageOptions\",\n                id: 7\n              },\n              reservedRange: {\n                rule: \"repeated\",\n                type: \"ReservedRange\",\n                id: 9\n              },\n              reservedName: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 10\n              }\n            },\n            nested: {\n              ExtensionRange: {\n                fields: {\n                  start: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              ReservedRange: {\n                fields: {\n                  start: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              }\n            }\n          },\n          FieldDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              number: {\n                type: \"int32\",\n                id: 3\n              },\n              label: {\n                type: \"Label\",\n                id: 4\n              },\n              type: {\n                type: \"Type\",\n                id: 5\n              },\n              typeName: {\n                type: \"string\",\n                id: 6\n              },\n              extendee: {\n                type: \"string\",\n                id: 2\n              },\n              defaultValue: {\n                type: \"string\",\n                id: 7\n              },\n              oneofIndex: {\n                type: \"int32\",\n                id: 9\n              },\n              jsonName: {\n                type: \"string\",\n                id: 10\n              },\n              options: {\n                type: \"FieldOptions\",\n                id: 8\n              }\n            },\n            nested: {\n              Type: {\n                values: {\n                  TYPE_DOUBLE: 1,\n                  TYPE_FLOAT: 2,\n                  TYPE_INT64: 3,\n                  TYPE_UINT64: 4,\n                  TYPE_INT32: 5,\n                  TYPE_FIXED64: 6,\n                  TYPE_FIXED32: 7,\n                  TYPE_BOOL: 8,\n                  TYPE_STRING: 9,\n                  TYPE_GROUP: 10,\n                  TYPE_MESSAGE: 11,\n                  TYPE_BYTES: 12,\n                  TYPE_UINT32: 13,\n                  TYPE_ENUM: 14,\n                  TYPE_SFIXED32: 15,\n                  TYPE_SFIXED64: 16,\n                  TYPE_SINT32: 17,\n                  TYPE_SINT64: 18\n                }\n              },\n              Label: {\n                values: {\n                  LABEL_OPTIONAL: 1,\n                  LABEL_REQUIRED: 2,\n                  LABEL_REPEATED: 3\n                }\n              }\n            }\n          },\n          OneofDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              options: {\n                type: \"OneofOptions\",\n                id: 2\n              }\n            }\n          },\n          EnumDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              value: {\n                rule: \"repeated\",\n                type: \"EnumValueDescriptorProto\",\n                id: 2\n              },\n              options: {\n                type: \"EnumOptions\",\n                id: 3\n              }\n            }\n          },\n          EnumValueDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              number: {\n                type: \"int32\",\n                id: 2\n              },\n              options: {\n                type: \"EnumValueOptions\",\n                id: 3\n              }\n            }\n          },\n          ServiceDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              method: {\n                rule: \"repeated\",\n                type: \"MethodDescriptorProto\",\n                id: 2\n              },\n              options: {\n                type: \"ServiceOptions\",\n                id: 3\n              }\n            }\n          },\n          MethodDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              inputType: {\n                type: \"string\",\n                id: 2\n              },\n              outputType: {\n                type: \"string\",\n                id: 3\n              },\n              options: {\n                type: \"MethodOptions\",\n                id: 4\n              },\n              clientStreaming: {\n                type: \"bool\",\n                id: 5\n              },\n              serverStreaming: {\n                type: \"bool\",\n                id: 6\n              }\n            }\n          },\n          FileOptions: {\n            fields: {\n              javaPackage: {\n                type: \"string\",\n                id: 1\n              },\n              javaOuterClassname: {\n                type: \"string\",\n                id: 8\n              },\n              javaMultipleFiles: {\n                type: \"bool\",\n                id: 10\n              },\n              javaGenerateEqualsAndHash: {\n                type: \"bool\",\n                id: 20,\n                options: {\n                  deprecated: true\n                }\n              },\n              javaStringCheckUtf8: {\n                type: \"bool\",\n                id: 27\n              },\n              optimizeFor: {\n                type: \"OptimizeMode\",\n                id: 9,\n                options: {\n                  \"default\": \"SPEED\"\n                }\n              },\n              goPackage: {\n                type: \"string\",\n                id: 11\n              },\n              ccGenericServices: {\n                type: \"bool\",\n                id: 16\n              },\n              javaGenericServices: {\n                type: \"bool\",\n                id: 17\n              },\n              pyGenericServices: {\n                type: \"bool\",\n                id: 18\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 23\n              },\n              ccEnableArenas: {\n                type: \"bool\",\n                id: 31\n              },\n              objcClassPrefix: {\n                type: \"string\",\n                id: 36\n              },\n              csharpNamespace: {\n                type: \"string\",\n                id: 37\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[38, 38]],\n            nested: {\n              OptimizeMode: {\n                values: {\n                  SPEED: 1,\n                  CODE_SIZE: 2,\n                  LITE_RUNTIME: 3\n                }\n              }\n            }\n          },\n          MessageOptions: {\n            fields: {\n              messageSetWireFormat: {\n                type: \"bool\",\n                id: 1\n              },\n              noStandardDescriptorAccessor: {\n                type: \"bool\",\n                id: 2\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              mapEntry: {\n                type: \"bool\",\n                id: 7\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[8, 8]]\n          },\n          FieldOptions: {\n            fields: {\n              ctype: {\n                type: \"CType\",\n                id: 1,\n                options: {\n                  \"default\": \"STRING\"\n                }\n              },\n              packed: {\n                type: \"bool\",\n                id: 2\n              },\n              jstype: {\n                type: \"JSType\",\n                id: 6,\n                options: {\n                  \"default\": \"JS_NORMAL\"\n                }\n              },\n              lazy: {\n                type: \"bool\",\n                id: 5\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              weak: {\n                type: \"bool\",\n                id: 10\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[4, 4]],\n            nested: {\n              CType: {\n                values: {\n                  STRING: 0,\n                  CORD: 1,\n                  STRING_PIECE: 2\n                }\n              },\n              JSType: {\n                values: {\n                  JS_NORMAL: 0,\n                  JS_STRING: 1,\n                  JS_NUMBER: 2\n                }\n              }\n            }\n          },\n          OneofOptions: {\n            fields: {\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          EnumOptions: {\n            fields: {\n              allowAlias: {\n                type: \"bool\",\n                id: 2\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          EnumValueOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 1\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          ServiceOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 33\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          MethodOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 33\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          UninterpretedOption: {\n            fields: {\n              name: {\n                rule: \"repeated\",\n                type: \"NamePart\",\n                id: 2\n              },\n              identifierValue: {\n                type: \"string\",\n                id: 3\n              },\n              positiveIntValue: {\n                type: \"uint64\",\n                id: 4\n              },\n              negativeIntValue: {\n                type: \"int64\",\n                id: 5\n              },\n              doubleValue: {\n                type: \"double\",\n                id: 6\n              },\n              stringValue: {\n                type: \"bytes\",\n                id: 7\n              },\n              aggregateValue: {\n                type: \"string\",\n                id: 8\n              }\n            },\n            nested: {\n              NamePart: {\n                fields: {\n                  namePart: {\n                    rule: \"required\",\n                    type: \"string\",\n                    id: 1\n                  },\n                  isExtension: {\n                    rule: \"required\",\n                    type: \"bool\",\n                    id: 2\n                  }\n                }\n              }\n            }\n          },\n          SourceCodeInfo: {\n            fields: {\n              location: {\n                rule: \"repeated\",\n                type: \"Location\",\n                id: 1\n              }\n            },\n            nested: {\n              Location: {\n                fields: {\n                  path: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 1\n                  },\n                  span: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  leadingComments: {\n                    type: \"string\",\n                    id: 3\n                  },\n                  trailingComments: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  leadingDetachedComments: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 6\n                  }\n                }\n              }\n            }\n          },\n          GeneratedCodeInfo: {\n            fields: {\n              annotation: {\n                rule: \"repeated\",\n                type: \"Annotation\",\n                id: 1\n              }\n            },\n            nested: {\n              Annotation: {\n                fields: {\n                  path: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 1\n                  },\n                  sourceFile: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  begin: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 4\n                  }\n                }\n              }\n            }\n          },\n          Struct: {\n            fields: {\n              fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n              }\n            }\n          },\n          Value: {\n            oneofs: {\n              kind: {\n                oneof: [\"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\"]\n              }\n            },\n            fields: {\n              nullValue: {\n                type: \"NullValue\",\n                id: 1\n              },\n              numberValue: {\n                type: \"double\",\n                id: 2\n              },\n              stringValue: {\n                type: \"string\",\n                id: 3\n              },\n              boolValue: {\n                type: \"bool\",\n                id: 4\n              },\n              structValue: {\n                type: \"Struct\",\n                id: 5\n              },\n              listValue: {\n                type: \"ListValue\",\n                id: 6\n              }\n            }\n          },\n          NullValue: {\n            values: {\n              NULL_VALUE: 0\n            }\n          },\n          ListValue: {\n            fields: {\n              values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n              }\n            }\n          },\n          Empty: {\n            fields: {}\n          },\n          DoubleValue: {\n            fields: {\n              value: {\n                type: \"double\",\n                id: 1\n              }\n            }\n          },\n          FloatValue: {\n            fields: {\n              value: {\n                type: \"float\",\n                id: 1\n              }\n            }\n          },\n          Int64Value: {\n            fields: {\n              value: {\n                type: \"int64\",\n                id: 1\n              }\n            }\n          },\n          UInt64Value: {\n            fields: {\n              value: {\n                type: \"uint64\",\n                id: 1\n              }\n            }\n          },\n          Int32Value: {\n            fields: {\n              value: {\n                type: \"int32\",\n                id: 1\n              }\n            }\n          },\n          UInt32Value: {\n            fields: {\n              value: {\n                type: \"uint32\",\n                id: 1\n              }\n            }\n          },\n          BoolValue: {\n            fields: {\n              value: {\n                type: \"bool\",\n                id: 1\n              }\n            }\n          },\n          StringValue: {\n            fields: {\n              value: {\n                type: \"string\",\n                id: 1\n              }\n            }\n          },\n          BytesValue: {\n            fields: {\n              value: {\n                type: \"bytes\",\n                id: 1\n              }\n            }\n          },\n          Any: {\n            fields: {\n              typeUrl: {\n                type: \"string\",\n                id: 1\n              },\n              value: {\n                type: \"bytes\",\n                id: 2\n              }\n            }\n          }\n        }\n      },\n      firestore: {\n        nested: {\n          v1: {\n            options: {\n              csharp_namespace: \"Google.Cloud.Firestore.V1\",\n              go_package: \"google.golang.org/genproto/googleapis/firestore/v1;firestore\",\n              java_multiple_files: true,\n              java_outer_classname: \"WriteProto\",\n              java_package: \"com.google.firestore.v1\",\n              objc_class_prefix: \"GCFS\",\n              php_namespace: \"Google\\\\Cloud\\\\Firestore\\\\V1\",\n              ruby_package: \"Google::Cloud::Firestore::V1\"\n            },\n            nested: {\n              AggregationResult: {\n                fields: {\n                  aggregateFields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 2\n                  }\n                }\n              },\n              BitSequence: {\n                fields: {\n                  bitmap: {\n                    type: \"bytes\",\n                    id: 1\n                  },\n                  padding: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              BloomFilter: {\n                fields: {\n                  bits: {\n                    type: \"BitSequence\",\n                    id: 1\n                  },\n                  hashCount: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              DocumentMask: {\n                fields: {\n                  fieldPaths: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 1\n                  }\n                }\n              },\n              Precondition: {\n                oneofs: {\n                  conditionType: {\n                    oneof: [\"exists\", \"updateTime\"]\n                  }\n                },\n                fields: {\n                  exists: {\n                    type: \"bool\",\n                    id: 1\n                  },\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 2\n                  }\n                }\n              },\n              TransactionOptions: {\n                oneofs: {\n                  mode: {\n                    oneof: [\"readOnly\", \"readWrite\"]\n                  }\n                },\n                fields: {\n                  readOnly: {\n                    type: \"ReadOnly\",\n                    id: 2\n                  },\n                  readWrite: {\n                    type: \"ReadWrite\",\n                    id: 3\n                  }\n                },\n                nested: {\n                  ReadWrite: {\n                    fields: {\n                      retryTransaction: {\n                        type: \"bytes\",\n                        id: 1\n                      }\n                    }\n                  },\n                  ReadOnly: {\n                    oneofs: {\n                      consistencySelector: {\n                        oneof: [\"readTime\"]\n                      }\n                    },\n                    fields: {\n                      readTime: {\n                        type: \"google.protobuf.Timestamp\",\n                        id: 2\n                      }\n                    }\n                  }\n                }\n              },\n              Document: {\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  fields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 2\n                  },\n                  createTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  },\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              Value: {\n                oneofs: {\n                  valueType: {\n                    oneof: [\"nullValue\", \"booleanValue\", \"integerValue\", \"doubleValue\", \"timestampValue\", \"stringValue\", \"bytesValue\", \"referenceValue\", \"geoPointValue\", \"arrayValue\", \"mapValue\"]\n                  }\n                },\n                fields: {\n                  nullValue: {\n                    type: \"google.protobuf.NullValue\",\n                    id: 11\n                  },\n                  booleanValue: {\n                    type: \"bool\",\n                    id: 1\n                  },\n                  integerValue: {\n                    type: \"int64\",\n                    id: 2\n                  },\n                  doubleValue: {\n                    type: \"double\",\n                    id: 3\n                  },\n                  timestampValue: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 10\n                  },\n                  stringValue: {\n                    type: \"string\",\n                    id: 17\n                  },\n                  bytesValue: {\n                    type: \"bytes\",\n                    id: 18\n                  },\n                  referenceValue: {\n                    type: \"string\",\n                    id: 5\n                  },\n                  geoPointValue: {\n                    type: \"google.type.LatLng\",\n                    id: 8\n                  },\n                  arrayValue: {\n                    type: \"ArrayValue\",\n                    id: 9\n                  },\n                  mapValue: {\n                    type: \"MapValue\",\n                    id: 6\n                  }\n                }\n              },\n              ArrayValue: {\n                fields: {\n                  values: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 1\n                  }\n                }\n              },\n              MapValue: {\n                fields: {\n                  fields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 1\n                  }\n                }\n              },\n              Firestore: {\n                options: {\n                  \"(google.api.default_host)\": \"firestore.googleapis.com\",\n                  \"(google.api.oauth_scopes)\": \"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore\"\n                },\n                methods: {\n                  GetDocument: {\n                    requestType: \"GetDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).get\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        get: \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                      }\n                    }]\n                  },\n                  ListDocuments: {\n                    requestType: \"ListDocumentsRequest\",\n                    responseType: \"ListDocumentsResponse\",\n                    options: {\n                      \"(google.api.http).get\": \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        get: \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n                      }\n                    }]\n                  },\n                  UpdateDocument: {\n                    requestType: \"UpdateDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).patch\": \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n                      \"(google.api.http).body\": \"document\",\n                      \"(google.api.method_signature)\": \"document,update_mask\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        patch: \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n                        body: \"document\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"document,update_mask\"\n                    }]\n                  },\n                  DeleteDocument: {\n                    requestType: \"DeleteDocumentRequest\",\n                    responseType: \"google.protobuf.Empty\",\n                    options: {\n                      \"(google.api.http).delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\",\n                      \"(google.api.method_signature)\": \"name\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        \"delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"name\"\n                    }]\n                  },\n                  BatchGetDocuments: {\n                    requestType: \"BatchGetDocumentsRequest\",\n                    responseType: \"BatchGetDocumentsResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  BeginTransaction: {\n                    requestType: \"BeginTransactionRequest\",\n                    responseType: \"BeginTransactionResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database\"\n                    }]\n                  },\n                  Commit: {\n                    requestType: \"CommitRequest\",\n                    responseType: \"CommitResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:commit\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database,writes\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:commit\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database,writes\"\n                    }]\n                  },\n                  Rollback: {\n                    requestType: \"RollbackRequest\",\n                    responseType: \"google.protobuf.Empty\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database,transaction\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database,transaction\"\n                    }]\n                  },\n                  RunQuery: {\n                    requestType: \"RunQueryRequest\",\n                    responseType: \"RunQueryResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  RunAggregationQuery: {\n                    requestType: \"RunAggregationQueryRequest\",\n                    responseType: \"RunAggregationQueryResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  PartitionQuery: {\n                    requestType: \"PartitionQueryRequest\",\n                    responseType: \"PartitionQueryResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  Write: {\n                    requestType: \"WriteRequest\",\n                    requestStream: true,\n                    responseType: \"WriteResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:write\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:write\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  Listen: {\n                    requestType: \"ListenRequest\",\n                    requestStream: true,\n                    responseType: \"ListenResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:listen\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:listen\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  ListCollectionIds: {\n                    requestType: \"ListCollectionIdsRequest\",\n                    responseType: \"ListCollectionIdsResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n                      \"(google.api.http).additional_bindings.body\": \"*\",\n                      \"(google.api.method_signature)\": \"parent\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n                          body: \"*\"\n                        }\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"parent\"\n                    }]\n                  },\n                  BatchWrite: {\n                    requestType: \"BatchWriteRequest\",\n                    responseType: \"BatchWriteResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  CreateDocument: {\n                    requestType: \"CreateDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n                      \"(google.api.http).body\": \"document\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n                        body: \"document\"\n                      }\n                    }]\n                  }\n                }\n              },\n              GetDocumentRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 5\n                  }\n                }\n              },\n              ListDocumentsRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  collectionId: {\n                    type: \"string\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  orderBy: {\n                    type: \"string\",\n                    id: 6\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 7\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 8\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 10\n                  },\n                  showMissing: {\n                    type: \"bool\",\n                    id: 12\n                  }\n                }\n              },\n              ListDocumentsResponse: {\n                fields: {\n                  documents: {\n                    rule: \"repeated\",\n                    type: \"Document\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              CreateDocumentRequest: {\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  collectionId: {\n                    type: \"string\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  documentId: {\n                    type: \"string\",\n                    id: 3\n                  },\n                  document: {\n                    type: \"Document\",\n                    id: 4,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 5\n                  }\n                }\n              },\n              UpdateDocumentRequest: {\n                fields: {\n                  document: {\n                    type: \"Document\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  updateMask: {\n                    type: \"DocumentMask\",\n                    id: 2\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 4\n                  }\n                }\n              },\n              DeleteDocumentRequest: {\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 2\n                  }\n                }\n              },\n              BatchGetDocumentsRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  documents: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 2\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 5\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 7\n                  }\n                }\n              },\n              BatchGetDocumentsResponse: {\n                oneofs: {\n                  result: {\n                    oneof: [\"found\", \"missing\"]\n                  }\n                },\n                fields: {\n                  found: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  missing: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              BeginTransactionRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  options: {\n                    type: \"TransactionOptions\",\n                    id: 2\n                  }\n                }\n              },\n              BeginTransactionResponse: {\n                fields: {\n                  transaction: {\n                    type: \"bytes\",\n                    id: 1\n                  }\n                }\n              },\n              CommitRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  }\n                }\n              },\n              CommitResponse: {\n                fields: {\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 1\n                  },\n                  commitTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 2\n                  }\n                }\n              },\n              RollbackRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  }\n                }\n              },\n              RunQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  },\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 5\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 6\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 7\n                  }\n                }\n              },\n              RunQueryResponse: {\n                fields: {\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  document: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  },\n                  skippedResults: {\n                    type: \"int32\",\n                    id: 4\n                  }\n                }\n              },\n              RunAggregationQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredAggregationQuery\"]\n                  },\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredAggregationQuery: {\n                    type: \"StructuredAggregationQuery\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 5\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 6\n                  }\n                }\n              },\n              RunAggregationQueryResponse: {\n                fields: {\n                  result: {\n                    type: \"AggregationResult\",\n                    id: 1\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  }\n                }\n              },\n              PartitionQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 2\n                  },\n                  partitionCount: {\n                    type: \"int64\",\n                    id: 3\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 5\n                  }\n                }\n              },\n              PartitionQueryResponse: {\n                fields: {\n                  partitions: {\n                    rule: \"repeated\",\n                    type: \"Cursor\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              WriteRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  streamId: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 3\n                  },\n                  streamToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 5\n                  }\n                }\n              },\n              WriteResponse: {\n                fields: {\n                  streamId: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  streamToken: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 3\n                  },\n                  commitTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              ListenRequest: {\n                oneofs: {\n                  targetChange: {\n                    oneof: [\"addTarget\", \"removeTarget\"]\n                  }\n                },\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  addTarget: {\n                    type: \"Target\",\n                    id: 2\n                  },\n                  removeTarget: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 4\n                  }\n                }\n              },\n              ListenResponse: {\n                oneofs: {\n                  responseType: {\n                    oneof: [\"targetChange\", \"documentChange\", \"documentDelete\", \"documentRemove\", \"filter\"]\n                  }\n                },\n                fields: {\n                  targetChange: {\n                    type: \"TargetChange\",\n                    id: 2\n                  },\n                  documentChange: {\n                    type: \"DocumentChange\",\n                    id: 3\n                  },\n                  documentDelete: {\n                    type: \"DocumentDelete\",\n                    id: 4\n                  },\n                  documentRemove: {\n                    type: \"DocumentRemove\",\n                    id: 6\n                  },\n                  filter: {\n                    type: \"ExistenceFilter\",\n                    id: 5\n                  }\n                }\n              },\n              Target: {\n                oneofs: {\n                  targetType: {\n                    oneof: [\"query\", \"documents\"]\n                  },\n                  resumeType: {\n                    oneof: [\"resumeToken\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  query: {\n                    type: \"QueryTarget\",\n                    id: 2\n                  },\n                  documents: {\n                    type: \"DocumentsTarget\",\n                    id: 3\n                  },\n                  resumeToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 11\n                  },\n                  targetId: {\n                    type: \"int32\",\n                    id: 5\n                  },\n                  once: {\n                    type: \"bool\",\n                    id: 6\n                  },\n                  expectedCount: {\n                    type: \"google.protobuf.Int32Value\",\n                    id: 12\n                  }\n                },\n                nested: {\n                  DocumentsTarget: {\n                    fields: {\n                      documents: {\n                        rule: \"repeated\",\n                        type: \"string\",\n                        id: 2\n                      }\n                    }\n                  },\n                  QueryTarget: {\n                    oneofs: {\n                      queryType: {\n                        oneof: [\"structuredQuery\"]\n                      }\n                    },\n                    fields: {\n                      parent: {\n                        type: \"string\",\n                        id: 1\n                      },\n                      structuredQuery: {\n                        type: \"StructuredQuery\",\n                        id: 2\n                      }\n                    }\n                  }\n                }\n              },\n              TargetChange: {\n                fields: {\n                  targetChangeType: {\n                    type: \"TargetChangeType\",\n                    id: 1\n                  },\n                  targetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  cause: {\n                    type: \"google.rpc.Status\",\n                    id: 3\n                  },\n                  resumeToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 6\n                  }\n                },\n                nested: {\n                  TargetChangeType: {\n                    values: {\n                      NO_CHANGE: 0,\n                      ADD: 1,\n                      REMOVE: 2,\n                      CURRENT: 3,\n                      RESET: 4\n                    }\n                  }\n                }\n              },\n              ListCollectionIdsRequest: {\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 2\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 3\n                  }\n                }\n              },\n              ListCollectionIdsResponse: {\n                fields: {\n                  collectionIds: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              BatchWriteRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 2\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 3\n                  }\n                }\n              },\n              BatchWriteResponse: {\n                fields: {\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 1\n                  },\n                  status: {\n                    rule: \"repeated\",\n                    type: \"google.rpc.Status\",\n                    id: 2\n                  }\n                }\n              },\n              StructuredQuery: {\n                fields: {\n                  select: {\n                    type: \"Projection\",\n                    id: 1\n                  },\n                  from: {\n                    rule: \"repeated\",\n                    type: \"CollectionSelector\",\n                    id: 2\n                  },\n                  where: {\n                    type: \"Filter\",\n                    id: 3\n                  },\n                  orderBy: {\n                    rule: \"repeated\",\n                    type: \"Order\",\n                    id: 4\n                  },\n                  startAt: {\n                    type: \"Cursor\",\n                    id: 7\n                  },\n                  endAt: {\n                    type: \"Cursor\",\n                    id: 8\n                  },\n                  offset: {\n                    type: \"int32\",\n                    id: 6\n                  },\n                  limit: {\n                    type: \"google.protobuf.Int32Value\",\n                    id: 5\n                  }\n                },\n                nested: {\n                  CollectionSelector: {\n                    fields: {\n                      collectionId: {\n                        type: \"string\",\n                        id: 2\n                      },\n                      allDescendants: {\n                        type: \"bool\",\n                        id: 3\n                      }\n                    }\n                  },\n                  Filter: {\n                    oneofs: {\n                      filterType: {\n                        oneof: [\"compositeFilter\", \"fieldFilter\", \"unaryFilter\"]\n                      }\n                    },\n                    fields: {\n                      compositeFilter: {\n                        type: \"CompositeFilter\",\n                        id: 1\n                      },\n                      fieldFilter: {\n                        type: \"FieldFilter\",\n                        id: 2\n                      },\n                      unaryFilter: {\n                        type: \"UnaryFilter\",\n                        id: 3\n                      }\n                    }\n                  },\n                  CompositeFilter: {\n                    fields: {\n                      op: {\n                        type: \"Operator\",\n                        id: 1\n                      },\n                      filters: {\n                        rule: \"repeated\",\n                        type: \"Filter\",\n                        id: 2\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          AND: 1,\n                          OR: 2\n                        }\n                      }\n                    }\n                  },\n                  FieldFilter: {\n                    fields: {\n                      field: {\n                        type: \"FieldReference\",\n                        id: 1\n                      },\n                      op: {\n                        type: \"Operator\",\n                        id: 2\n                      },\n                      value: {\n                        type: \"Value\",\n                        id: 3\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          LESS_THAN: 1,\n                          LESS_THAN_OR_EQUAL: 2,\n                          GREATER_THAN: 3,\n                          GREATER_THAN_OR_EQUAL: 4,\n                          EQUAL: 5,\n                          NOT_EQUAL: 6,\n                          ARRAY_CONTAINS: 7,\n                          IN: 8,\n                          ARRAY_CONTAINS_ANY: 9,\n                          NOT_IN: 10\n                        }\n                      }\n                    }\n                  },\n                  UnaryFilter: {\n                    oneofs: {\n                      operandType: {\n                        oneof: [\"field\"]\n                      }\n                    },\n                    fields: {\n                      op: {\n                        type: \"Operator\",\n                        id: 1\n                      },\n                      field: {\n                        type: \"FieldReference\",\n                        id: 2\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          IS_NAN: 2,\n                          IS_NULL: 3,\n                          IS_NOT_NAN: 4,\n                          IS_NOT_NULL: 5\n                        }\n                      }\n                    }\n                  },\n                  Order: {\n                    fields: {\n                      field: {\n                        type: \"FieldReference\",\n                        id: 1\n                      },\n                      direction: {\n                        type: \"Direction\",\n                        id: 2\n                      }\n                    }\n                  },\n                  FieldReference: {\n                    fields: {\n                      fieldPath: {\n                        type: \"string\",\n                        id: 2\n                      }\n                    }\n                  },\n                  Projection: {\n                    fields: {\n                      fields: {\n                        rule: \"repeated\",\n                        type: \"FieldReference\",\n                        id: 2\n                      }\n                    }\n                  },\n                  Direction: {\n                    values: {\n                      DIRECTION_UNSPECIFIED: 0,\n                      ASCENDING: 1,\n                      DESCENDING: 2\n                    }\n                  }\n                }\n              },\n              StructuredAggregationQuery: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  }\n                },\n                fields: {\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 1\n                  },\n                  aggregations: {\n                    rule: \"repeated\",\n                    type: \"Aggregation\",\n                    id: 3\n                  }\n                },\n                nested: {\n                  Aggregation: {\n                    oneofs: {\n                      operator: {\n                        oneof: [\"count\", \"sum\", \"avg\"]\n                      }\n                    },\n                    fields: {\n                      count: {\n                        type: \"Count\",\n                        id: 1\n                      },\n                      sum: {\n                        type: \"Sum\",\n                        id: 2\n                      },\n                      avg: {\n                        type: \"Avg\",\n                        id: 3\n                      },\n                      alias: {\n                        type: \"string\",\n                        id: 7\n                      }\n                    },\n                    nested: {\n                      Count: {\n                        fields: {\n                          upTo: {\n                            type: \"google.protobuf.Int64Value\",\n                            id: 1\n                          }\n                        }\n                      },\n                      Sum: {\n                        fields: {\n                          field: {\n                            type: \"FieldReference\",\n                            id: 1\n                          }\n                        }\n                      },\n                      Avg: {\n                        fields: {\n                          field: {\n                            type: \"FieldReference\",\n                            id: 1\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              Cursor: {\n                fields: {\n                  values: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 1\n                  },\n                  before: {\n                    type: \"bool\",\n                    id: 2\n                  }\n                }\n              },\n              Write: {\n                oneofs: {\n                  operation: {\n                    oneof: [\"update\", \"delete\", \"verify\", \"transform\"]\n                  }\n                },\n                fields: {\n                  update: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  \"delete\": {\n                    type: \"string\",\n                    id: 2\n                  },\n                  verify: {\n                    type: \"string\",\n                    id: 5\n                  },\n                  transform: {\n                    type: \"DocumentTransform\",\n                    id: 6\n                  },\n                  updateMask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  updateTransforms: {\n                    rule: \"repeated\",\n                    type: \"DocumentTransform.FieldTransform\",\n                    id: 7\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 4\n                  }\n                }\n              },\n              DocumentTransform: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  fieldTransforms: {\n                    rule: \"repeated\",\n                    type: \"FieldTransform\",\n                    id: 2\n                  }\n                },\n                nested: {\n                  FieldTransform: {\n                    oneofs: {\n                      transformType: {\n                        oneof: [\"setToServerValue\", \"increment\", \"maximum\", \"minimum\", \"appendMissingElements\", \"removeAllFromArray\"]\n                      }\n                    },\n                    fields: {\n                      fieldPath: {\n                        type: \"string\",\n                        id: 1\n                      },\n                      setToServerValue: {\n                        type: \"ServerValue\",\n                        id: 2\n                      },\n                      increment: {\n                        type: \"Value\",\n                        id: 3\n                      },\n                      maximum: {\n                        type: \"Value\",\n                        id: 4\n                      },\n                      minimum: {\n                        type: \"Value\",\n                        id: 5\n                      },\n                      appendMissingElements: {\n                        type: \"ArrayValue\",\n                        id: 6\n                      },\n                      removeAllFromArray: {\n                        type: \"ArrayValue\",\n                        id: 7\n                      }\n                    },\n                    nested: {\n                      ServerValue: {\n                        values: {\n                          SERVER_VALUE_UNSPECIFIED: 0,\n                          REQUEST_TIME: 1\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              WriteResult: {\n                fields: {\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 1\n                  },\n                  transformResults: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 2\n                  }\n                }\n              },\n              DocumentChange: {\n                fields: {\n                  document: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  targetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 5\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 6\n                  }\n                }\n              },\n              DocumentDelete: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 6\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              DocumentRemove: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              ExistenceFilter: {\n                fields: {\n                  targetId: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  count: {\n                    type: \"int32\",\n                    id: 2\n                  },\n                  unchangedNames: {\n                    type: \"BloomFilter\",\n                    id: 3\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      api: {\n        options: {\n          go_package: \"google.golang.org/genproto/googleapis/api/annotations;annotations\",\n          java_multiple_files: true,\n          java_outer_classname: \"HttpProto\",\n          java_package: \"com.google.api\",\n          objc_class_prefix: \"GAPI\",\n          cc_enable_arenas: true\n        },\n        nested: {\n          http: {\n            type: \"HttpRule\",\n            id: 72295728,\n            extend: \"google.protobuf.MethodOptions\"\n          },\n          Http: {\n            fields: {\n              rules: {\n                rule: \"repeated\",\n                type: \"HttpRule\",\n                id: 1\n              }\n            }\n          },\n          HttpRule: {\n            oneofs: {\n              pattern: {\n                oneof: [\"get\", \"put\", \"post\", \"delete\", \"patch\", \"custom\"]\n              }\n            },\n            fields: {\n              get: {\n                type: \"string\",\n                id: 2\n              },\n              put: {\n                type: \"string\",\n                id: 3\n              },\n              post: {\n                type: \"string\",\n                id: 4\n              },\n              \"delete\": {\n                type: \"string\",\n                id: 5\n              },\n              patch: {\n                type: \"string\",\n                id: 6\n              },\n              custom: {\n                type: \"CustomHttpPattern\",\n                id: 8\n              },\n              selector: {\n                type: \"string\",\n                id: 1\n              },\n              body: {\n                type: \"string\",\n                id: 7\n              },\n              additionalBindings: {\n                rule: \"repeated\",\n                type: \"HttpRule\",\n                id: 11\n              }\n            }\n          },\n          CustomHttpPattern: {\n            fields: {\n              kind: {\n                type: \"string\",\n                id: 1\n              },\n              path: {\n                type: \"string\",\n                id: 2\n              }\n            }\n          },\n          methodSignature: {\n            rule: \"repeated\",\n            type: \"string\",\n            id: 1051,\n            extend: \"google.protobuf.MethodOptions\"\n          },\n          defaultHost: {\n            type: \"string\",\n            id: 1049,\n            extend: \"google.protobuf.ServiceOptions\"\n          },\n          oauthScopes: {\n            type: \"string\",\n            id: 1050,\n            extend: \"google.protobuf.ServiceOptions\"\n          },\n          fieldBehavior: {\n            rule: \"repeated\",\n            type: \"google.api.FieldBehavior\",\n            id: 1052,\n            extend: \"google.protobuf.FieldOptions\"\n          },\n          FieldBehavior: {\n            values: {\n              FIELD_BEHAVIOR_UNSPECIFIED: 0,\n              OPTIONAL: 1,\n              REQUIRED: 2,\n              OUTPUT_ONLY: 3,\n              INPUT_ONLY: 4,\n              IMMUTABLE: 5,\n              UNORDERED_LIST: 6,\n              NON_EMPTY_DEFAULT: 7\n            }\n          }\n        }\n      },\n      type: {\n        options: {\n          cc_enable_arenas: true,\n          go_package: \"google.golang.org/genproto/googleapis/type/latlng;latlng\",\n          java_multiple_files: true,\n          java_outer_classname: \"LatLngProto\",\n          java_package: \"com.google.type\",\n          objc_class_prefix: \"GTP\"\n        },\n        nested: {\n          LatLng: {\n            fields: {\n              latitude: {\n                type: \"double\",\n                id: 1\n              },\n              longitude: {\n                type: \"double\",\n                id: 2\n              }\n            }\n          }\n        }\n      },\n      rpc: {\n        options: {\n          cc_enable_arenas: true,\n          go_package: \"google.golang.org/genproto/googleapis/rpc/status;status\",\n          java_multiple_files: true,\n          java_outer_classname: \"StatusProto\",\n          java_package: \"com.google.rpc\",\n          objc_class_prefix: \"RPC\"\n        },\n        nested: {\n          Status: {\n            fields: {\n              code: {\n                type: \"int32\",\n                id: 1\n              },\n              message: {\n                type: \"string\",\n                id: 2\n              },\n              details: {\n                rule: \"repeated\",\n                type: \"google.protobuf.Any\",\n                id: 3\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\nvar protos = {\n  nested: nested\n};\nvar protos$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  nested: nested,\n  'default': protos\n});\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used by tests so we can match @grpc/proto-loader behavior. */\nconst protoLoaderOptions = {\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: false\n};\n/**\n * Loads the protocol buffer definitions for Firestore.\n *\n * @returns The GrpcObject representing our protos.\n */\nfunction loadProtos() {\n  const packageDefinition = protoLoader.fromJSON(protos$1, protoLoaderOptions);\n  return grpc.loadPackageDefinition(packageDefinition);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Loads the GRPC stack */\nfunction newConnection(databaseInfo) {\n  const protos = loadProtos();\n  return new GrpcConnection(protos, databaseInfo);\n}\n/** Return the Platform-specific connectivity monitor. */\nfunction newConnectivityMonitor() {\n  return new NoopConnectivityMonitor();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'window' implementation or null if not available. */\nfunction getWindow() {\n  if (process.env.USE_MOCK_PERSISTENCE === 'YES') {\n    // eslint-disable-next-line no-restricted-globals\n    return window;\n  }\n  return null;\n}\n/** The Platform's 'document' implementation or null if not available. */\nfunction getDocument() {\n  return null;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSerializer(databaseId) {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */false);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$8 = 'ExponentialBackoff';\n/**\n * Initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass ExponentialBackoff {\n  constructor(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  queue,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  timerId,\n  /**\n   * The initial delay (used as the base delay on the first retry attempt).\n   * Note that jitter will still be applied, so the actual delay could be as\n   * little as 0.5*initialDelayMs.\n   */\n  initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n  /**\n   * The multiplier to use to determine the extended base delay after each\n   * attempt.\n   */\n  backoffFactor = DEFAULT_BACKOFF_FACTOR,\n  /**\n   * The maximum base delay after which no further backoff is performed.\n   * Note that jitter will still be applied, so the actual delay could be as\n   * much as 1.5*maxDelayMs.\n   */\n  maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS) {\n    this.queue = queue;\n    this.timerId = timerId;\n    this.initialDelayMs = initialDelayMs;\n    this.backoffFactor = backoffFactor;\n    this.maxDelayMs = maxDelayMs;\n    this.currentBaseMs = 0;\n    this.timerPromise = null;\n    /** The last backoff attempt, as epoch milliseconds. */\n    this.lastAttemptTime = Date.now();\n    this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset() {\n    this.currentBaseMs = 0;\n  }\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  resetToMax() {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  backoffAndRun(op) {\n    // Cancel any pending backoff operation.\n    this.cancel();\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);\n    if (remainingDelayMs > 0) {\n      logDebug(LOG_TAG$8, `Backing off for ${remainingDelayMs} ms ` + `(base delay: ${this.currentBaseMs} ms, ` + `delay with jitter: ${desiredDelayWithJitterMs} ms, ` + `last attempt: ${delaySoFarMs} ms ago)`);\n    }\n    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, () => {\n      this.lastAttemptTime = Date.now();\n      return op();\n    });\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n  skipBackoff() {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n  cancel() {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  jitterDelayMs() {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$7 = 'PersistentStream';\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n/** The time a stream stays open until we consider it healthy. */\nconst HEALTHY_TIMEOUT_MS = 10 * 1000;\n/**\n * A PersistentStream is an abstract base class that represents a streaming RPC\n * to the Firestore backend. It's built on top of the connections own support\n * for streaming RPCs, and adds several critical features for our clients:\n *\n *   - Exponential backoff on failure\n *   - Authentication via CredentialsProvider\n *   - Dispatching all callbacks into the shared worker queue\n *   - Closing idle streams after 60 seconds of inactivity\n *\n * Subclasses of PersistentStream implement serialization of models to and\n * from the JSON representation of the protocol buffers for a specific\n * streaming RPC.\n *\n * ## Starting and Stopping\n *\n * Streaming RPCs are stateful and need to be start()ed before messages can\n * be sent and received. The PersistentStream will call the onOpen() function\n * of the listener once the stream is ready to accept requests.\n *\n * Should a start() fail, PersistentStream will call the registered onClose()\n * listener with a FirestoreError indicating what went wrong.\n *\n * A PersistentStream can be started and stopped repeatedly.\n *\n * Generic types:\n *  SendType: The type of the outgoing message of the underlying\n *    connection stream\n *  ReceiveType: The type of the incoming message of the underlying\n *    connection stream\n *  ListenerType: The type of the listener that will be used for callbacks\n */\nclass PersistentStream {\n  constructor(queue, connectionTimerId, idleTimerId, healthTimerId, connection, authCredentialsProvider, appCheckCredentialsProvider, listener) {\n    this.queue = queue;\n    this.idleTimerId = idleTimerId;\n    this.healthTimerId = healthTimerId;\n    this.connection = connection;\n    this.authCredentialsProvider = authCredentialsProvider;\n    this.appCheckCredentialsProvider = appCheckCredentialsProvider;\n    this.listener = listener;\n    this.state = 0 /* PersistentStreamState.Initial */;\n    /**\n     * A close count that's incremented every time the stream is closed; used by\n     * getCloseGuardedDispatcher() to invalidate callbacks that happen after\n     * close.\n     */\n    this.closeCount = 0;\n    this.idleTimer = null;\n    this.healthCheck = null;\n    this.stream = null;\n    /**\n     * Count of response messages received.\n     */\n    this.responseCount = 0;\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n  /**\n   * Returns true if start() has been called and no error has occurred. True\n   * indicates the stream is open or in the process of opening (which\n   * encompasses respecting backoff, getting auth tokens, and starting the\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\n   * outbound requests.\n   */\n  isStarted() {\n    return this.state === 1 /* PersistentStreamState.Starting */ || this.state === 5 /* PersistentStreamState.Backoff */ || this.isOpen();\n  }\n  /**\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\n   * called) and the stream is ready for outbound requests.\n   */\n  isOpen() {\n    return this.state === 2 /* PersistentStreamState.Open */ || this.state === 3 /* PersistentStreamState.Healthy */;\n  }\n  /**\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\n   * ready for outbound requests, at which point isOpen() will return true.\n   *\n   * When start returns, isStarted() will return true.\n   */\n  start() {\n    this.responseCount = 0;\n    if (this.state === 4 /* PersistentStreamState.Error */) {\n      this.performBackoff();\n      return;\n    }\n    this.auth();\n  }\n  /**\n   * Stops the RPC. This call is idempotent and allowed regardless of the\n   * current isStarted() state.\n   *\n   * When stop returns, isStarted() and isOpen() will both return false.\n   */\n  async stop() {\n    if (this.isStarted()) {\n      await this.close(0 /* PersistentStreamState.Initial */);\n    }\n  }\n  /**\n   * After an error the stream will usually back off on the next attempt to\n   * start it. If the error warrants an immediate restart of the stream, the\n   * sender can use this to indicate that the receiver should not back off.\n   *\n   * Each error will call the onClose() listener. That function can decide to\n   * inhibit backoff if required.\n   */\n  inhibitBackoff() {\n    this.state = 0 /* PersistentStreamState.Initial */;\n    this.backoff.reset();\n  }\n  /**\n   * Marks this stream as idle. If no further actions are performed on the\n   * stream for one minute, the stream will automatically close itself and\n   * notify the stream's onClose() handler with Status.OK. The stream will then\n   * be in a !isStarted() state, requiring the caller to start the stream again\n   * before further use.\n   *\n   * Only streams that are in state 'Open' can be marked idle, as all other\n   * states imply pending network operations.\n   */\n  markIdle() {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, () => this.handleIdleCloseTimer());\n    }\n  }\n  /** Sends a message to the underlying stream. */\n  sendRequest(msg) {\n    this.cancelIdleCheck();\n    this.stream.send(msg);\n  }\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  async handleIdleCloseTimer() {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(0 /* PersistentStreamState.Initial */);\n    }\n  }\n  /** Marks the stream as active again. */\n  cancelIdleCheck() {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n  /** Cancels the health check delayed operation. */\n  cancelHealthCheck() {\n    if (this.healthCheck) {\n      this.healthCheck.cancel();\n      this.healthCheck = null;\n    }\n  }\n  /**\n   * Closes the stream and cleans up as necessary:\n   *\n   * * closes the underlying GRPC stream;\n   * * calls the onClose handler with the given 'error';\n   * * sets internal stream state to 'finalState';\n   * * adjusts the backoff timer based on the error\n   *\n   * A new stream can be opened by calling start().\n   *\n   * @param finalState - the intended state of the stream after closing.\n   * @param error - the error the connection was closed with.\n   */\n  async close(finalState, error) {\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.cancelHealthCheck();\n    this.backoff.cancel();\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n    if (finalState !== 4 /* PersistentStreamState.Error */) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError('Using maximum backoff delay to prevent overloading the backend.');\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED && this.state !== 3 /* PersistentStreamState.Healthy */) {\n      // \"unauthenticated\" error means the token was rejected. This should rarely\n      // happen since both Auth and AppCheck ensure a sufficient TTL when we\n      // request a token. If a user manually resets their system clock this can\n      // fail, however. In this case, we should get a Code.UNAUTHENTICATED error\n      // before we received the first message and we need to invalidate the token\n      // to ensure that we fetch a new token.\n      this.authCredentialsProvider.invalidateToken();\n      this.appCheckCredentialsProvider.invalidateToken();\n    }\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n  /**\n   * Can be overridden to perform additional cleanup before the stream is closed.\n   * Calling super.tearDown() is not required.\n   */\n  tearDown() {}\n  auth() {\n    this.state = 1 /* PersistentStreamState.Starting */;\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([authToken, appCheckToken]) => {\n      // Stream can be stopped while waiting for authentication.\n      // TODO(mikelehen): We really should just use dispatchIfNotClosed\n      // and let this dispatch onto the queue, but that opened a spec test can\n      // of worms that I don't want to deal with in this PR.\n      if (this.closeCount === closeCount) {\n        // Normally we'd have to schedule the callback on the AsyncQueue.\n        // However, the following calls are safe to be called outside the\n        // AsyncQueue since they don't chain asynchronous calls\n        this.startStream(authToken, appCheckToken);\n      }\n    }, error => {\n      dispatchIfNotClosed(() => {\n        const rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n        return this.handleStreamClose(rpcError);\n      });\n    });\n  }\n  startStream(authToken, appCheckToken) {\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n    this.stream = this.startRpc(authToken, appCheckToken);\n    this.stream.onConnected(() => {\n      dispatchIfNotClosed(() => this.listener.onConnected());\n    });\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        this.state = 2 /* PersistentStreamState.Open */;\n        this.healthCheck = this.queue.enqueueAfterDelay(this.healthTimerId, HEALTHY_TIMEOUT_MS, () => {\n          if (this.isOpen()) {\n            this.state = 3 /* PersistentStreamState.Healthy */;\n          }\n          return Promise.resolve();\n        });\n        return this.listener.onOpen();\n      });\n    });\n    this.stream.onClose(error => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage(msg => {\n      dispatchIfNotClosed(() => {\n        if (++this.responseCount === 1) {\n          return this.onFirst(msg);\n        } else {\n          return this.onNext(msg);\n        }\n      });\n    });\n  }\n  performBackoff() {\n    this.state = 5 /* PersistentStreamState.Backoff */;\n    this.backoff.backoffAndRun(async () => {\n      this.state = 0 /* PersistentStreamState.Initial */;\n      this.start();\n    });\n  }\n  // Visible for tests\n  handleStreamClose(error) {\n    logDebug(LOG_TAG$7, `close with error: ${error}`);\n    this.stream = null;\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(4 /* PersistentStreamState.Error */, error);\n  }\n  /**\n   * Returns a \"dispatcher\" function that dispatches operations onto the\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\n   * re-opened, etc.\n   */\n  getCloseGuardedDispatcher(startCloseCount) {\n    return fn => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(LOG_TAG$7, 'stream callback skipped by getCloseGuardedDispatcher.');\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n/**\n * A PersistentStream that implements the Listen RPC.\n *\n * Once the Listen stream has called the onOpen() listener, any number of\n * listen() and unlisten() calls can be made to control what changes will be\n * sent from the server for ListenResponses.\n */\nclass PersistentListenStream extends PersistentStream {\n  constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\n    super(queue, \"listen_stream_connection_backoff\" /* TimerId.ListenStreamConnectionBackoff */, \"listen_stream_idle\" /* TimerId.ListenStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\n    this.serializer = serializer;\n  }\n  startRpc(authToken, appCheckToken) {\n    return this.connection.openStream('Listen', authToken, appCheckToken);\n  }\n  onFirst(watchChangeProto) {\n    return this.onNext(watchChangeProto);\n  }\n  onNext(watchChangeProto) {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n    const watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    const snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener.onWatchChange(watchChange, snapshot);\n  }\n  /**\n   * Registers interest in the results of the given target. If the target\n   * includes a resumeToken it will be included in the request. Results that\n   * affect the target will be streamed back as WatchChange messages that\n   * reference the targetId.\n   */\n  watch(targetData) {\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n    const labels = toListenRequestLabels(this.serializer, targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n    this.sendRequest(request);\n  }\n  /**\n   * Unregisters interest in the results of the target associated with the\n   * given targetId.\n   */\n  unwatch(targetId) {\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n/**\n * A Stream that implements the Write RPC.\n *\n * The Write RPC requires the caller to maintain special streamToken\n * state in between calls, to help the server understand which responses the\n * client has processed by the time the next request is made. Every response\n * will contain a streamToken; this value must be passed to the next\n * request.\n *\n * After calling start() on this stream, the next request must be a handshake,\n * containing whatever streamToken is on hand. Once a response to this\n * request is received, all pending mutations may be submitted. When\n * submitting multiple batches of mutations at the same time, it's\n * okay to use the same streamToken for the calls to writeMutations.\n *\n * TODO(b/33271235): Use proto types\n */\nclass PersistentWriteStream extends PersistentStream {\n  constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\n    super(queue, \"write_stream_connection_backoff\" /* TimerId.WriteStreamConnectionBackoff */, \"write_stream_idle\" /* TimerId.WriteStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\n    this.serializer = serializer;\n  }\n  /**\n   * Tracks whether or not a handshake has been successfully exchanged and\n   * the stream is ready to accept mutations.\n   */\n  get handshakeComplete() {\n    return this.responseCount > 0;\n  }\n  // Override of PersistentStream.start\n  start() {\n    this.lastStreamToken = undefined;\n    super.start();\n  }\n  tearDown() {\n    if (this.handshakeComplete) {\n      this.writeMutations([]);\n    }\n  }\n  startRpc(authToken, appCheckToken) {\n    return this.connection.openStream('Write', authToken, appCheckToken);\n  }\n  onFirst(responseProto) {\n    // Always capture the last stream token.\n    hardAssert(!!responseProto.streamToken);\n    this.lastStreamToken = responseProto.streamToken;\n    // The first response is always the handshake response\n    hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);\n    return this.listener.onHandshakeComplete();\n  }\n  onNext(responseProto) {\n    // Always capture the last stream token.\n    hardAssert(!!responseProto.streamToken);\n    this.lastStreamToken = responseProto.streamToken;\n    // A successful first write response means the stream is healthy,\n    // Note, that we could consider a successful handshake healthy, however,\n    // the write itself might be causing an error we want to back off from.\n    this.backoff.reset();\n    const results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);\n    const commitVersion = fromVersion(responseProto.commitTime);\n    return this.listener.onMutationResult(commitVersion, results);\n  }\n  /**\n   * Sends an initial streamToken to the server, performing the handshake\n   * required to make the StreamingWrite RPC work. Subsequent\n   * calls should wait until onHandshakeComplete was called.\n   */\n  writeHandshake() {\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  }\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations) {\n    const request = {\n      streamToken: this.lastStreamToken,\n      writes: mutations.map(mutation => toMutation(this.serializer, mutation))\n    };\n    this.sendRequest(request);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\nclass Datastore {}\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass DatastoreImpl extends Datastore {\n  constructor(authCredentials, appCheckCredentials, connection, serializer) {\n    super();\n    this.authCredentials = authCredentials;\n    this.appCheckCredentials = appCheckCredentials;\n    this.connection = connection;\n    this.serializer = serializer;\n    this.terminated = false;\n  }\n  verifyInitialized() {\n    if (this.terminated) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n    }\n  }\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n  invokeRPC(rpcName, databaseId, resourcePath, request) {\n    this.verifyInitialized();\n    return Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([authToken, appCheckToken]) => {\n      return this.connection.invokeRPC(rpcName, toResourcePath(databaseId, resourcePath), request, authToken, appCheckToken);\n    }).catch(error => {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.authCredentials.invalidateToken();\n          this.appCheckCredentials.invalidateToken();\n        }\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  }\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  invokeStreamingRPC(rpcName, databaseId, resourcePath, request, expectedResponseCount) {\n    this.verifyInitialized();\n    return Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([authToken, appCheckToken]) => {\n      return this.connection.invokeStreamingRPC(rpcName, toResourcePath(databaseId, resourcePath), request, authToken, appCheckToken, expectedResponseCount);\n    }).catch(error => {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.authCredentials.invalidateToken();\n          this.appCheckCredentials.invalidateToken();\n        }\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  }\n  terminate() {\n    this.terminated = true;\n    this.connection.terminate();\n  }\n}\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nfunction newDatastore(authCredentials, appCheckCredentials, connection, serializer) {\n  return new DatastoreImpl(authCredentials, appCheckCredentials, connection, serializer);\n}\nasync function invokeCommitRpc(datastore, mutations) {\n  const datastoreImpl = debugCast(datastore);\n  const request = {\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', datastoreImpl.serializer.databaseId, ResourcePath.emptyPath(), request);\n}\nasync function invokeBatchGetDocumentsRpc(datastore, keys) {\n  const datastoreImpl = debugCast(datastore);\n  const request = {\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC('BatchGetDocuments', datastoreImpl.serializer.databaseId, ResourcePath.emptyPath(), request, keys.length);\n  const docs = new Map();\n  response.forEach(proto => {\n    const doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc);\n    result.push(doc);\n  });\n  return result;\n}\nasync function invokeRunAggregationQueryRpc(datastore, query, aggregates) {\n  var _a;\n  const datastoreImpl = debugCast(datastore);\n  const {\n    request,\n    aliasMap,\n    parent\n  } = toRunAggregationQueryRequest(datastoreImpl.serializer, queryToAggregateTarget(query), aggregates);\n  if (!datastoreImpl.connection.shouldResourcePathBeIncludedInRequest) {\n    delete request.parent;\n  }\n  const response = await datastoreImpl.invokeStreamingRPC('RunAggregationQuery', datastoreImpl.serializer.databaseId, parent, request, /*expectedResponseCount=*/1);\n  // Omit RunAggregationQueryResponse that only contain readTimes.\n  const filteredResult = response.filter(proto => !!proto.result);\n  hardAssert(filteredResult.length === 1);\n  // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n  const unmappedAggregateFields = (_a = filteredResult[0].result) === null || _a === void 0 ? void 0 : _a.aggregateFields;\n  const remappedFields = Object.keys(unmappedAggregateFields).reduce((accumulator, key) => {\n    accumulator[aliasMap[key]] = unmappedAggregateFields[key];\n    return accumulator;\n  }, {});\n  return remappedFields;\n}\nfunction newPersistentWriteStream(datastore, queue, listener) {\n  const datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\n}\nfunction newPersistentWatchStream(datastore, queue, listener) {\n  const datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$6 = 'OnlineStateTracker';\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n/**\n * A component used by the RemoteStore to track the OnlineState (that is,\n * whether or not the client as a whole should be considered to be online or\n * offline), implementing the appropriate heuristics.\n *\n * In particular, when the client is trying to connect to the backend, we\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\n * a connection to succeed. If we have too many failures or the timeout elapses,\n * then we set the OnlineState to Offline, and the client will behave as if\n * it is offline (get()s will return cached data, etc.).\n */\nclass OnlineStateTracker {\n  constructor(asyncQueue, onlineStateHandler) {\n    this.asyncQueue = asyncQueue;\n    this.onlineStateHandler = onlineStateHandler;\n    /** The current OnlineState. */\n    this.state = \"Unknown\" /* OnlineState.Unknown */;\n    /**\n     * A count of consecutive failures to open the stream. If it reaches the\n     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\n     * Offline.\n     */\n    this.watchStreamFailures = 0;\n    /**\n     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\n     * transition from OnlineState.Unknown to OnlineState.Offline without waiting\n     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\n     */\n    this.onlineStateTimer = null;\n    /**\n     * Whether the client should log a warning message if it fails to connect to\n     * the backend (initially true, cleared after a successful stream, or if we've\n     * logged the message already).\n     */\n    this.shouldWarnClientIsOffline = true;\n  }\n  /**\n   * Called by RemoteStore when a watch stream is started (including on each\n   * backoff attempt).\n   *\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\n   * the onlineStateTimer.\n   */\n  handleWatchStreamStart() {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\" /* TimerId.OnlineStateTimeout */, ONLINE_STATE_TIMEOUT_MS, () => {\n        this.onlineStateTimer = null;\n        this.logClientOfflineWarningIfNecessary(`Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` + `seconds.`);\n        this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\n        // NOTE: handleWatchStreamFailure() will continue to increment\n        // watchStreamFailures even though we are already marked Offline,\n        // but this is non-harmful.\n        return Promise.resolve();\n      });\n    }\n  }\n  /**\n   * Updates our OnlineState as appropriate after the watch stream reports a\n   * failure. The first failure moves us to the 'Unknown' state. We then may\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\n   * actually transition to the 'Offline' state.\n   */\n  handleWatchStreamFailure(error) {\n    if (this.state === \"Online\" /* OnlineState.Online */) {\n      this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n        this.logClientOfflineWarningIfNecessary(`Connection failed ${MAX_WATCH_STREAM_FAILURES} ` + `times. Most recent error: ${error.toString()}`);\n        this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\n      }\n    }\n  }\n  /**\n   * Explicitly sets the OnlineState to the specified state.\n   *\n   * Note that this resets our timers / failure counters, etc. used by our\n   * Offline heuristics, so must not be used in place of\n   * handleWatchStreamStart() and handleWatchStreamFailure().\n   */\n  set(newState) {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n    if (newState === \"Online\" /* OnlineState.Online */) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n    this.setAndBroadcast(newState);\n  }\n  setAndBroadcast(newState) {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n  logClientOfflineWarningIfNecessary(details) {\n    const message = `Could not reach Cloud Firestore backend. ${details}\\n` + `This typically indicates that your device does not have a healthy ` + `Internet connection at the moment. The client will operate in offline ` + `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG$6, message);\n    }\n  }\n  clearOnlineStateTimer() {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$5 = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\nclass RemoteStoreImpl {\n  constructor(\n  /**\n   * The local store, used to fill the write pipeline with outbound mutations.\n   */\n  localStore, /** The client-side proxy for interacting with the backend. */\n  datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n    this.localStore = localStore;\n    this.datastore = datastore;\n    this.asyncQueue = asyncQueue;\n    this.remoteSyncer = {};\n    /**\n     * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\n     * LocalStore via fillWritePipeline() and have or will send to the write\n     * stream.\n     *\n     * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\n     * restart the write stream. When the stream is established the writes in the\n     * pipeline will be sent in order.\n     *\n     * Writes remain in writePipeline until they are acknowledged by the backend\n     * and thus will automatically be re-sent if the stream is interrupted /\n     * restarted before they're acknowledged.\n     *\n     * Write responses from the backend are linked to their originating request\n     * purely based on order, and so we can just shift() writes from the front of\n     * the writePipeline as we receive responses.\n     */\n    this.writePipeline = [];\n    /**\n     * A mapping of watched targets that the client cares about tracking and the\n     * user has explicitly called a 'listen' for this target.\n     *\n     * These targets may or may not have been sent to or acknowledged by the\n     * server. On re-establishing the listen stream, these targets should be sent\n     * to the server. The targets removed with unlistens are removed eagerly\n     * without waiting for confirmation from the listen stream.\n     */\n    this.listenTargets = new Map();\n    /**\n     * A set of reasons for why the RemoteStore may be offline. If empty, the\n     * RemoteStore may start its network connections.\n     */\n    this.offlineCauses = new Set();\n    /**\n     * Event handlers that get called when the network is disabled or enabled.\n     *\n     * PORTING NOTE: These functions are used on the Web client to create the\n     * underlying streams (to support tree-shakeable streams). On Android and iOS,\n     * the streams are created during construction of RemoteStore.\n     */\n    this.onNetworkStatusChange = [];\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback(_ => {\n      asyncQueue.enqueueAndForget(async () => {\n        // Porting Note: Unlike iOS, `restartNetwork()` is called even when the\n        // network becomes unreachable as we don't have any other way to tear\n        // down our streams.\n        if (canUseNetwork(this)) {\n          logDebug(LOG_TAG$5, 'Restarting streams for network reachability change.');\n          await restartNetwork(this);\n        }\n      });\n    });\n    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);\n  }\n}\nfunction newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n  return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);\n}\n/** Re-enables the network. Idempotent. */\nfunction remoteStoreEnableNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.delete(0 /* OfflineCause.UserDisabled */);\n  return enableNetworkInternal(remoteStoreImpl);\n}\nasync function enableNetworkInternal(remoteStoreImpl) {\n  if (canUseNetwork(remoteStoreImpl)) {\n    for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n      await networkStatusHandler(/* enabled= */true);\n    }\n  }\n}\n/**\n * Temporarily disables the network. The network can be re-enabled using\n * enableNetwork().\n */\nasync function remoteStoreDisableNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.add(0 /* OfflineCause.UserDisabled */);\n  await disableNetworkInternal(remoteStoreImpl);\n  // Set the OnlineState to Offline so get()s return from cache, etc.\n  remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\n}\nasync function disableNetworkInternal(remoteStoreImpl) {\n  for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n    await networkStatusHandler(/* enabled= */false);\n  }\n}\nasync function remoteStoreShutdown(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  logDebug(LOG_TAG$5, 'RemoteStore shutting down.');\n  remoteStoreImpl.offlineCauses.add(5 /* OfflineCause.Shutdown */);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.connectivityMonitor.shutdown();\n  // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n  // triggering spurious listener events with cached data, etc.\n  remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n}\n/**\n * Starts new listen for the given target. Uses resume token if provided. It\n * is a no-op if the target of given `TargetData` is already being listened to.\n */\nfunction remoteStoreListen(remoteStore, targetData) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\n    return;\n  }\n  // Mark this as something the client is currently listening for.\n  remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    // The listen will be sent in onWatchStreamOpen\n    startWatchStream(remoteStoreImpl);\n  } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  }\n}\n/**\n * Removes the listen from server. It is a no-op if the given target id is\n * not being listened to.\n */\nfunction remoteStoreUnlisten(remoteStore, targetId) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  const watchStream = ensureWatchStream(remoteStoreImpl);\n  remoteStoreImpl.listenTargets.delete(targetId);\n  if (watchStream.isOpen()) {\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n  }\n  if (remoteStoreImpl.listenTargets.size === 0) {\n    if (watchStream.isOpen()) {\n      watchStream.markIdle();\n    } else if (canUseNetwork(remoteStoreImpl)) {\n      // Revert to OnlineState.Unknown if the watch stream is not open and we\n      // have no listeners, since without any listens to send we cannot\n      // confirm if the stream is healthy and upgrade to OnlineState.Online.\n      remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n    }\n  }\n}\n/**\n * We need to increment the expected number of pending responses we're due\n * from watch so we wait for the ack to process any messages from this target.\n */\nfunction sendWatchRequest(remoteStoreImpl, targetData) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);\n  if (targetData.resumeToken.approximateByteSize() > 0 || targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    const expectedCount = remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetData.targetId).size;\n    targetData = targetData.withExpectedCount(expectedCount);\n  }\n  ensureWatchStream(remoteStoreImpl).watch(targetData);\n}\n/**\n * We need to increment the expected number of pending responses we're due\n * from watch so we wait for the removal on the server before we process any\n * messages from this target.\n */\nfunction sendUnwatchRequest(remoteStoreImpl, targetId) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);\n  ensureWatchStream(remoteStoreImpl).unwatch(targetId);\n}\nfunction startWatchStream(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\n    getRemoteKeysForTarget: targetId => remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId),\n    getTargetDataForTarget: targetId => remoteStoreImpl.listenTargets.get(targetId) || null,\n    getDatabaseId: () => remoteStoreImpl.datastore.serializer.databaseId\n  });\n  ensureWatchStream(remoteStoreImpl).start();\n  remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\n}\n/**\n * Returns whether the watch stream should be started because it's necessary\n * and has not yet been started.\n */\nfunction shouldStartWatchStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;\n}\nfunction canUseNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  return remoteStoreImpl.offlineCauses.size === 0;\n}\nfunction cleanUpWatchStreamState(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = undefined;\n}\nasync function onWatchStreamConnected(remoteStoreImpl) {\n  // Mark the client as online since we got a \"connected\" notification.\n  remoteStoreImpl.onlineStateTracker.set(\"Online\" /* OnlineState.Online */);\n}\nasync function onWatchStreamOpen(remoteStoreImpl) {\n  remoteStoreImpl.listenTargets.forEach((targetData, targetId) => {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  });\n}\nasync function onWatchStreamClose(remoteStoreImpl, error) {\n  cleanUpWatchStreamState(remoteStoreImpl);\n  // If we still need the watch stream, retry the connection.\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error);\n    startWatchStream(remoteStoreImpl);\n  } else {\n    // No need to restart watch stream because there are no active targets.\n    // The online state is set to unknown because there is no active attempt\n    // at establishing a connection\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n}\nasync function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {\n  // Mark the client as online since we got a message from the server\n  remoteStoreImpl.onlineStateTracker.set(\"Online\" /* OnlineState.Online */);\n  if (watchChange instanceof WatchTargetChange && watchChange.state === 2 /* WatchTargetChangeState.Removed */ && watchChange.cause) {\n    // There was an error on a target, don't wait for a consistent snapshot\n    // to raise events\n    try {\n      await handleTargetError(remoteStoreImpl, watchChange);\n    } catch (e) {\n      logDebug(LOG_TAG$5, 'Failed to remove targets %s: %s ', watchChange.targetIds.join(','), e);\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n    return;\n  }\n  if (watchChange instanceof DocumentWatchChange) {\n    remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);\n  } else if (watchChange instanceof ExistenceFilterChange) {\n    remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);\n  } else {\n    remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);\n  }\n  if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n    try {\n      const lastRemoteSnapshotVersion = await localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n      if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n        // We have received a target change with a global snapshot if the snapshot\n        // version is not equal to SnapshotVersion.min().\n        await raiseWatchSnapshot(remoteStoreImpl, snapshotVersion);\n      }\n    } catch (e) {\n      logDebug(LOG_TAG$5, 'Failed to raise snapshot:', e);\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n}\n/**\n * Recovery logic for IndexedDB errors that takes the network offline until\n * `op` succeeds. Retries are scheduled with backoff using\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\n * validated via a generic operation.\n *\n * The returned Promise is resolved once the network is disabled and before\n * any retry attempt.\n */\nasync function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {\n  if (isIndexedDbTransactionError(e)) {\n    remoteStoreImpl.offlineCauses.add(1 /* OfflineCause.IndexedDbFailed */);\n    // Disable network and raise offline snapshots\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\n    if (!op) {\n      // Use a simple read operation to determine if IndexedDB recovered.\n      // Ideally, we would expose a health check directly on SimpleDb, but\n      // RemoteStore only has access to persistence through LocalStore.\n      op = () => localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n    }\n    // Probe IndexedDB periodically and re-enable network\n    remoteStoreImpl.asyncQueue.enqueueRetryable(async () => {\n      logDebug(LOG_TAG$5, 'Retrying IndexedDB access');\n      await op();\n      remoteStoreImpl.offlineCauses.delete(1 /* OfflineCause.IndexedDbFailed */);\n      await enableNetworkInternal(remoteStoreImpl);\n    });\n  } else {\n    throw e;\n  }\n}\n/**\n * Executes `op`. If `op` fails, takes the network offline until `op`\n * succeeds. Returns after the first attempt.\n */\nfunction executeWithRecovery(remoteStoreImpl, op) {\n  return op().catch(e => disableNetworkUntilRecovery(remoteStoreImpl, e, op));\n}\n/**\n * Takes a batch of changes from the Datastore, repackages them as a\n * RemoteEvent, and passes that on to the listener, which is typically the\n * SyncEngine.\n */\nfunction raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {\n  const remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);\n  // Update in-memory resume tokens. LocalStore will update the\n  // persistent view of these when applying the completed RemoteEvent.\n  remoteEvent.targetChanges.forEach((change, targetId) => {\n    if (change.resumeToken.approximateByteSize() > 0) {\n      const targetData = remoteStoreImpl.listenTargets.get(targetId);\n      // A watched target might have been removed already.\n      if (targetData) {\n        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));\n      }\n    }\n  });\n  // Re-establish listens for the targets that have been invalidated by\n  // existence filter mismatches.\n  remoteEvent.targetMismatches.forEach((targetId, targetPurpose) => {\n    const targetData = remoteStoreImpl.listenTargets.get(targetId);\n    if (!targetData) {\n      // A watched target might have been removed already.\n      return;\n    }\n    // Clear the resume token for the target, since we're in a known mismatch\n    // state.\n    remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));\n    // Cause a hard reset by unwatching and rewatching immediately, but\n    // deliberately don't send a resume token so that we get a full update.\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n    // Mark the target we send as being on behalf of an existence filter\n    // mismatch, but don't actually retain that in listenTargets. This ensures\n    // that we flag the first re-listen this way without impacting future\n    // listens of this target (that might happen e.g. on reconnect).\n    const requestTargetData = new TargetData(targetData.target, targetId, targetPurpose, targetData.sequenceNumber);\n    sendWatchRequest(remoteStoreImpl, requestTargetData);\n  });\n  return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\n}\n/** Handles an error on a target */\nasync function handleTargetError(remoteStoreImpl, watchChange) {\n  const error = watchChange.cause;\n  for (const targetId of watchChange.targetIds) {\n    // A watched target might have been removed already.\n    if (remoteStoreImpl.listenTargets.has(targetId)) {\n      await remoteStoreImpl.remoteSyncer.rejectListen(targetId, error);\n      remoteStoreImpl.listenTargets.delete(targetId);\n      remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);\n    }\n  }\n}\n/**\n * Attempts to fill our write pipeline with writes from the LocalStore.\n *\n * Called internally to bootstrap or refill the write pipeline and by\n * SyncEngine whenever there are new mutations to process.\n *\n * Starts the write stream if necessary.\n */\nasync function fillWritePipeline(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  let lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;\n  while (canAddToWritePipeline(remoteStoreImpl)) {\n    try {\n      const batch = await localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved);\n      if (batch === null) {\n        if (remoteStoreImpl.writePipeline.length === 0) {\n          writeStream.markIdle();\n        }\n        break;\n      } else {\n        lastBatchIdRetrieved = batch.batchId;\n        addToWritePipeline(remoteStoreImpl, batch);\n      }\n    } catch (e) {\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\n/**\n * Returns true if we can add to the write pipeline (i.e. the network is\n * enabled and the write pipeline is not full).\n */\nfunction canAddToWritePipeline(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;\n}\n/**\n * Queues additional writes to be sent to the write stream, sending them\n * immediately if the write stream is established.\n */\nfunction addToWritePipeline(remoteStoreImpl, batch) {\n  remoteStoreImpl.writePipeline.push(batch);\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  if (writeStream.isOpen() && writeStream.handshakeComplete) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\nfunction shouldStartWriteStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;\n}\nfunction startWriteStream(remoteStoreImpl) {\n  ensureWriteStream(remoteStoreImpl).start();\n}\nasync function onWriteStreamOpen(remoteStoreImpl) {\n  ensureWriteStream(remoteStoreImpl).writeHandshake();\n}\nasync function onWriteHandshakeComplete(remoteStoreImpl) {\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  // Send the write pipeline now that the stream is established.\n  for (const batch of remoteStoreImpl.writePipeline) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\nasync function onMutationResult(remoteStoreImpl, commitVersion, results) {\n  const batch = remoteStoreImpl.writePipeline.shift();\n  const success = MutationBatchResult.from(batch, commitVersion, results);\n  await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success));\n  // It's possible that with the completion of this mutation another\n  // slot has freed up.\n  await fillWritePipeline(remoteStoreImpl);\n}\nasync function onWriteStreamClose(remoteStoreImpl, error) {\n  // If the write stream closed after the write handshake completes, a write\n  // operation failed and we fail the pending operation.\n  if (error && ensureWriteStream(remoteStoreImpl).handshakeComplete) {\n    // This error affects the actual write.\n    await handleWriteError(remoteStoreImpl, error);\n  }\n  // The write stream might have been started by refilling the write\n  // pipeline for failed writes\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\nasync function handleWriteError(remoteStoreImpl, error) {\n  // Only handle permanent errors here. If it's transient, just let the retry\n  // logic kick in.\n  if (isPermanentWriteError(error.code)) {\n    // This was a permanent error, the request itself was the problem\n    // so it's not going to succeed if we resend it.\n    const batch = remoteStoreImpl.writePipeline.shift();\n    // In this case it's also unlikely that the server itself is melting\n    // down -- this was just a bad request so inhibit backoff on the next\n    // restart.\n    ensureWriteStream(remoteStoreImpl).inhibitBackoff();\n    await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch.batchId, error));\n    // It's possible that with the completion of this mutation\n    // another slot has freed up.\n    await fillWritePipeline(remoteStoreImpl);\n  }\n}\nasync function restartNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.add(4 /* OfflineCause.ConnectivityChange */);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  remoteStoreImpl.offlineCauses.delete(4 /* OfflineCause.ConnectivityChange */);\n  await enableNetworkInternal(remoteStoreImpl);\n}\nasync function remoteStoreHandleCredentialChange(remoteStore, user) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.asyncQueue.verifyOperationInProgress();\n  logDebug(LOG_TAG$5, 'RemoteStore received new credentials');\n  const usesNetwork = canUseNetwork(remoteStoreImpl);\n  // Tear down and re-create our network streams. This will ensure we get a\n  // fresh auth token for the new user and re-fill the write pipeline with\n  // new mutations from the LocalStore (since mutations are per-user).\n  remoteStoreImpl.offlineCauses.add(3 /* OfflineCause.CredentialChange */);\n  await disableNetworkInternal(remoteStoreImpl);\n  if (usesNetwork) {\n    // Don't set the network status to Unknown if we are offline.\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n  await remoteStoreImpl.remoteSyncer.handleCredentialChange(user);\n  remoteStoreImpl.offlineCauses.delete(3 /* OfflineCause.CredentialChange */);\n  await enableNetworkInternal(remoteStoreImpl);\n}\n/**\n * Toggles the network state when the client gains or loses its primary lease.\n */\nasync function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  if (isPrimary) {\n    remoteStoreImpl.offlineCauses.delete(2 /* OfflineCause.IsSecondary */);\n    await enableNetworkInternal(remoteStoreImpl);\n  } else if (!isPrimary) {\n    remoteStoreImpl.offlineCauses.add(2 /* OfflineCause.IsSecondary */);\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n}\n/**\n * If not yet initialized, registers the WatchStream and its network state\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\n * already available.\n *\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\n * This is not done on Web to allow it to be tree-shaken.\n */\nfunction ensureWatchStream(remoteStoreImpl) {\n  if (!remoteStoreImpl.watchStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onConnected: onWatchStreamConnected.bind(null, remoteStoreImpl),\n      onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\n      onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.watchStream.inhibitBackoff();\n        if (shouldStartWatchStream(remoteStoreImpl)) {\n          startWatchStream(remoteStoreImpl);\n        } else {\n          remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n        }\n      } else {\n        await remoteStoreImpl.watchStream.stop();\n        cleanUpWatchStreamState(remoteStoreImpl);\n      }\n    });\n  }\n  return remoteStoreImpl.watchStream;\n}\n/**\n * If not yet initialized, registers the WriteStream and its network state\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\n * already available.\n *\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\n * This is not done on Web to allow it to be tree-shaken.\n */\nfunction ensureWriteStream(remoteStoreImpl) {\n  if (!remoteStoreImpl.writeStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onConnected: () => Promise.resolve(),\n      onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\n      onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),\n      onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.writeStream.inhibitBackoff();\n        // This will start the write stream if necessary.\n        await fillWritePipeline(remoteStoreImpl);\n      } else {\n        await remoteStoreImpl.writeStream.stop();\n        if (remoteStoreImpl.writePipeline.length > 0) {\n          logDebug(LOG_TAG$5, `Stopping write stream with ${remoteStoreImpl.writePipeline.length} pending writes`);\n          remoteStoreImpl.writePipeline = [];\n        }\n      }\n    });\n  }\n  return remoteStoreImpl.writeStream;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$4 = 'AsyncQueue';\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nclass DelayedOperation {\n  constructor(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\n    this.asyncQueue = asyncQueue;\n    this.timerId = timerId;\n    this.targetTimeMs = targetTimeMs;\n    this.op = op;\n    this.removalCallback = removalCallback;\n    this.deferred = new Deferred();\n    this.then = this.deferred.promise.then.bind(this.deferred.promise);\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule(asyncQueue, timerId, delayMs, op, removalCallback) {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  start(delayMs) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(reason) {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\n    }\n  }\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n  clearTimeout() {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n/**\n * Returns a FirestoreError that can be surfaced to the user if the provided\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\n */\nfunction wrapInUserErrorIfRecoverable(e, msg) {\n  logError(LOG_TAG$4, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\n * in order specified by the provided comparator. We always add a document key\n * comparator on top of what is provided to guarantee document equality based on\n * the key.\n */\nclass DocumentSet {\n  /**\n   * Returns an empty copy of the existing DocumentSet, using the same\n   * comparator.\n   */\n  static emptySet(oldSet) {\n    return new DocumentSet(oldSet.comparator);\n  }\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1, d2) => comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1, d2) => DocumentKey.comparator(d1.key, d2.key);\n    }\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap(this.comparator);\n  }\n  has(key) {\n    return this.keyedMap.get(key) != null;\n  }\n  get(key) {\n    return this.keyedMap.get(key);\n  }\n  first() {\n    return this.sortedSet.minKey();\n  }\n  last() {\n    return this.sortedSet.maxKey();\n  }\n  isEmpty() {\n    return this.sortedSet.isEmpty();\n  }\n  /**\n   * Returns the index of the provided key in the document set, or -1 if the\n   * document key is not present in the set;\n   */\n  indexOf(key) {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n  get size() {\n    return this.sortedSet.size;\n  }\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb) {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n  /** Inserts or updates a document with the same key */\n  add(doc) {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n  }\n  /** Deletes a document with a given key */\n  delete(key) {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n  isEqual(other) {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toString() {\n    const docStrings = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n  copy(keyedMap, sortedSet) {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\n * duplicate events for the same doc.\n */\nclass DocumentChangeSet {\n  constructor() {\n    this.changeMap = new SortedMap(DocumentKey.comparator);\n  }\n  track(change) {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n    // Merge the new change with the existing change.\n    if (change.type !== 0 /* ChangeType.Added */ && oldChange.type === 3 /* ChangeType.Metadata */) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (change.type === 3 /* ChangeType.Metadata */ && oldChange.type !== 1 /* ChangeType.Removed */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (change.type === 2 /* ChangeType.Modified */ && oldChange.type === 2 /* ChangeType.Modified */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 2 /* ChangeType.Modified */,\n        doc: change.doc\n      });\n    } else if (change.type === 2 /* ChangeType.Modified */ && oldChange.type === 0 /* ChangeType.Added */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 0 /* ChangeType.Added */,\n        doc: change.doc\n      });\n    } else if (change.type === 1 /* ChangeType.Removed */ && oldChange.type === 0 /* ChangeType.Added */) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (change.type === 1 /* ChangeType.Removed */ && oldChange.type === 2 /* ChangeType.Modified */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 1 /* ChangeType.Removed */,\n        doc: oldChange.doc\n      });\n    } else if (change.type === 0 /* ChangeType.Added */ && oldChange.type === 1 /* ChangeType.Removed */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 2 /* ChangeType.Modified */,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail();\n    }\n  }\n  getChanges() {\n    const changes = [];\n    this.changeMap.inorderTraversal((key, change) => {\n      changes.push(change);\n    });\n    return changes;\n  }\n}\nclass ViewSnapshot {\n  constructor(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges, hasCachedResults) {\n    this.query = query;\n    this.docs = docs;\n    this.oldDocs = oldDocs;\n    this.docChanges = docChanges;\n    this.mutatedKeys = mutatedKeys;\n    this.fromCache = fromCache;\n    this.syncStateChanged = syncStateChanged;\n    this.excludesMetadataChanges = excludesMetadataChanges;\n    this.hasCachedResults = hasCachedResults;\n  }\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(query, documents, mutatedKeys, fromCache, hasCachedResults) {\n    const changes = [];\n    documents.forEach(doc => {\n      changes.push({\n        type: 0 /* ChangeType.Added */,\n        doc\n      });\n    });\n    return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, /* syncStateChanged= */true, /* excludesMetadataChanges= */false, hasCachedResults);\n  }\n  get hasPendingWrites() {\n    return !this.mutatedKeys.isEmpty();\n  }\n  isEqual(other) {\n    if (this.fromCache !== other.fromCache || this.hasCachedResults !== other.hasCachedResults || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {\n      return false;\n    }\n    const changes = this.docChanges;\n    const otherChanges = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Holds the listeners and the last received ViewSnapshot for a query being\n * tracked by EventManager.\n */\nclass QueryListenersInfo {\n  constructor() {\n    this.viewSnap = undefined;\n    this.listeners = [];\n  }\n  // Helper methods that checks if the query has listeners that listening to remote store\n  hasRemoteListeners() {\n    return this.listeners.some(listener => listener.listensToRemoteStore());\n  }\n}\nfunction newEventManager() {\n  return new EventManagerImpl();\n}\nclass EventManagerImpl {\n  constructor() {\n    this.queries = newQueriesObjectMap();\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    this.snapshotsInSyncListeners = new Set();\n  }\n  terminate() {\n    errorAllTargets(this, new FirestoreError(Code.ABORTED, 'Firestore shutting down'));\n  }\n}\nfunction newQueriesObjectMap() {\n  return new ObjectMap(q => canonifyQuery(q), queryEquals);\n}\nasync function eventManagerListen(eventManager, listener) {\n  const eventManagerImpl = debugCast(eventManager);\n  let listenerAction = 3 /* ListenerSetupAction.NoActionRequired */;\n  const query = listener.query;\n  let queryInfo = eventManagerImpl.queries.get(query);\n  if (!queryInfo) {\n    queryInfo = new QueryListenersInfo();\n    listenerAction = listener.listensToRemoteStore() ? 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */ : 1 /* ListenerSetupAction.InitializeLocalListenOnly */;\n  } else if (!queryInfo.hasRemoteListeners() && listener.listensToRemoteStore()) {\n    // Query has been listening to local cache, and tries to add a new listener sourced from watch.\n    listenerAction = 2 /* ListenerSetupAction.RequireWatchConnectionOnly */;\n  }\n  try {\n    switch (listenerAction) {\n      case 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */:\n        queryInfo.viewSnap = await eventManagerImpl.onListen(query, /** enableRemoteListen= */true);\n        break;\n      case 1 /* ListenerSetupAction.InitializeLocalListenOnly */:\n        queryInfo.viewSnap = await eventManagerImpl.onListen(query, /** enableRemoteListen= */false);\n        break;\n      case 2 /* ListenerSetupAction.RequireWatchConnectionOnly */:\n        await eventManagerImpl.onFirstRemoteStoreListen(query);\n        break;\n      default:\n        break;\n    }\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Initialization of query '${stringifyQuery(listener.query)}' failed`);\n    listener.onError(firestoreError);\n    return;\n  }\n  eventManagerImpl.queries.set(query, queryInfo);\n  queryInfo.listeners.push(listener);\n  // Run global snapshot listeners if a consistent snapshot has been emitted.\n  listener.applyOnlineStateChange(eventManagerImpl.onlineState);\n  if (queryInfo.viewSnap) {\n    const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n    if (raisedEvent) {\n      raiseSnapshotsInSyncEvent(eventManagerImpl);\n    }\n  }\n}\nasync function eventManagerUnlisten(eventManager, listener) {\n  const eventManagerImpl = debugCast(eventManager);\n  const query = listener.query;\n  let listenerAction = 3 /* ListenerRemovalAction.NoActionRequired */;\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    const i = queryInfo.listeners.indexOf(listener);\n    if (i >= 0) {\n      queryInfo.listeners.splice(i, 1);\n      if (queryInfo.listeners.length === 0) {\n        listenerAction = listener.listensToRemoteStore() ? 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */ : 1 /* ListenerRemovalAction.TerminateLocalListenOnly */;\n      } else if (!queryInfo.hasRemoteListeners() && listener.listensToRemoteStore()) {\n        // The removed listener is the last one that sourced from watch.\n        listenerAction = 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */;\n      }\n    }\n  }\n  switch (listenerAction) {\n    case 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */:\n      eventManagerImpl.queries.delete(query);\n      return eventManagerImpl.onUnlisten(query, /** disableRemoteListen= */true);\n    case 1 /* ListenerRemovalAction.TerminateLocalListenOnly */:\n      eventManagerImpl.queries.delete(query);\n      return eventManagerImpl.onUnlisten(query, /** disableRemoteListen= */false);\n    case 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */:\n      return eventManagerImpl.onLastRemoteStoreUnlisten(query);\n    default:\n      return;\n  }\n}\nfunction eventManagerOnWatchChange(eventManager, viewSnaps) {\n  const eventManagerImpl = debugCast(eventManager);\n  let raisedEvent = false;\n  for (const viewSnap of viewSnaps) {\n    const query = viewSnap.query;\n    const queryInfo = eventManagerImpl.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        if (listener.onViewSnapshot(viewSnap)) {\n          raisedEvent = true;\n        }\n      }\n      queryInfo.viewSnap = viewSnap;\n    }\n  }\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\nfunction eventManagerOnWatchError(eventManager, query, error) {\n  const eventManagerImpl = debugCast(eventManager);\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    for (const listener of queryInfo.listeners) {\n      listener.onError(error);\n    }\n  }\n  // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n  // after an error.\n  eventManagerImpl.queries.delete(query);\n}\nfunction eventManagerOnOnlineStateChange(eventManager, onlineState) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.onlineState = onlineState;\n  let raisedEvent = false;\n  eventManagerImpl.queries.forEach((_, queryInfo) => {\n    for (const listener of queryInfo.listeners) {\n      // Run global snapshot listeners if a consistent snapshot has been emitted.\n      if (listener.applyOnlineStateChange(onlineState)) {\n        raisedEvent = true;\n      }\n    }\n  });\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\nfunction addSnapshotsInSyncListener(eventManager, observer) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.add(observer);\n  // Immediately fire an initial event, indicating all existing listeners\n  // are in-sync.\n  observer.next();\n}\nfunction removeSnapshotsInSyncListener(eventManager, observer) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.delete(observer);\n}\nfunction errorAllTargets(eventManager, error) {\n  const eventManagerImpl = debugCast(eventManager);\n  const queries = eventManagerImpl.queries;\n  // Prevent further access by clearing ObjectMap.\n  eventManagerImpl.queries = newQueriesObjectMap();\n  queries.forEach((_, queryInfo) => {\n    for (const listener of queryInfo.listeners) {\n      listener.onError(error);\n    }\n  });\n}\n// Call all global snapshot listeners that have been set.\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl) {\n  eventManagerImpl.snapshotsInSyncListeners.forEach(observer => {\n    observer.next();\n  });\n}\nvar ListenerDataSource;\n(function (ListenerDataSource) {\n  /** Listen to both cache and server changes */\n  ListenerDataSource[\"Default\"] = \"default\";\n  /** Listen to changes in cache only */\n  ListenerDataSource[\"Cache\"] = \"cache\";\n})(ListenerDataSource || (ListenerDataSource = {}));\n/**\n * QueryListener takes a series of internal view snapshots and determines\n * when to raise the event.\n *\n * It uses an Observer to dispatch events.\n */\nclass QueryListener {\n  constructor(query, queryObserver, options) {\n    this.query = query;\n    this.queryObserver = queryObserver;\n    /**\n     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\n     * observer. This flag is set to true once we've actually raised an event.\n     */\n    this.raisedInitialEvent = false;\n    this.snap = null;\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    this.options = options || {};\n  }\n  /**\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\n   * if applicable (depending on what changed, whether the user has opted into\n   * metadata-only changes, etc.). Returns true if a user-facing event was\n   * indeed raised.\n   */\n  onViewSnapshot(snap) {\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== 3 /* ChangeType.Metadata */) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, /* excludesMetadataChanges= */true, snap.hasCachedResults);\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n    this.snap = snap;\n    return raisedEvent;\n  }\n  onError(error) {\n    this.queryObserver.error(error);\n  }\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState) {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n  shouldRaiseInitialEvent(snap, onlineState) {\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n    // Always raise event if listening to cache\n    if (!this.listensToRemoteStore()) {\n      return true;\n    }\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== \"Offline\" /* OnlineState.Offline */;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      return false;\n    }\n    // Raise data from cache if we have any documents, have cached results before,\n    // or we are offline.\n    return !snap.docs.isEmpty() || snap.hasCachedResults || onlineState === \"Offline\" /* OnlineState.Offline */;\n  }\n  shouldRaiseEvent(snap) {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n    const hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n  raiseInitialEvent(snap) {\n    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache, snap.hasCachedResults);\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n  listensToRemoteStore() {\n    return this.options.source !== ListenerDataSource.Cache;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A set of changes to what documents are currently in view and out of view for\n * a given query. These changes are sent to the LocalStore by the View (via\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\n */\nclass LocalViewChanges {\n  constructor(targetId, fromCache, addedKeys, removedKeys) {\n    this.targetId = targetId;\n    this.fromCache = fromCache;\n    this.addedKeys = addedKeys;\n    this.removedKeys = removedKeys;\n  }\n  static fromSnapshot(targetId, viewSnapshot) {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case 0 /* ChangeType.Added */:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case 1 /* ChangeType.Removed */:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        // do nothing\n      }\n    }\n    return new LocalViewChanges(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to convert objects from bundles to model objects in the SDK.\n */\nclass BundleConverterImpl {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  toDocumentKey(name) {\n    return fromName(this.serializer, name);\n  }\n  /**\n   * Converts a BundleDocument to a MutableDocument.\n   */\n  toMutableDocument(bundledDoc) {\n    if (bundledDoc.metadata.exists) {\n      return fromDocument(this.serializer, bundledDoc.document, false);\n    } else {\n      return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));\n    }\n  }\n  toSnapshotVersion(time) {\n    return fromVersion(time);\n  }\n}\n/**\n * A class to process the elements from a bundle, load them into local\n * storage and provide progress update while loading.\n */\nclass BundleLoader {\n  constructor(bundleMetadata, localStore, serializer) {\n    this.bundleMetadata = bundleMetadata;\n    this.localStore = localStore;\n    this.serializer = serializer;\n    /** Batched queries to be saved into storage */\n    this.queries = [];\n    /** Batched documents to be saved into storage */\n    this.documents = [];\n    /** The collection groups affected by this bundle. */\n    this.collectionGroups = new Set();\n    this.progress = bundleInitialProgress(bundleMetadata);\n  }\n  /**\n   * Adds an element from the bundle to the loader.\n   *\n   * Returns a new progress if adding the element leads to a new progress,\n   * otherwise returns null.\n   */\n  addSizedElement(element) {\n    this.progress.bytesLoaded += element.byteLength;\n    let documentsLoaded = this.progress.documentsLoaded;\n    if (element.payload.namedQuery) {\n      this.queries.push(element.payload.namedQuery);\n    } else if (element.payload.documentMetadata) {\n      this.documents.push({\n        metadata: element.payload.documentMetadata\n      });\n      if (!element.payload.documentMetadata.exists) {\n        ++documentsLoaded;\n      }\n      const path = ResourcePath.fromString(element.payload.documentMetadata.name);\n      this.collectionGroups.add(path.get(path.length - 2));\n    } else if (element.payload.document) {\n      this.documents[this.documents.length - 1].document = element.payload.document;\n      ++documentsLoaded;\n    }\n    if (documentsLoaded !== this.progress.documentsLoaded) {\n      this.progress.documentsLoaded = documentsLoaded;\n      return Object.assign({}, this.progress);\n    }\n    return null;\n  }\n  getQueryDocumentMapping(documents) {\n    const queryDocumentMap = new Map();\n    const bundleConverter = new BundleConverterImpl(this.serializer);\n    for (const bundleDoc of documents) {\n      if (bundleDoc.metadata.queries) {\n        const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n        for (const queryName of bundleDoc.metadata.queries) {\n          const documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);\n          queryDocumentMap.set(queryName, documentKeys);\n        }\n      }\n    }\n    return queryDocumentMap;\n  }\n  /**\n   * Update the progress to 'Success' and return the updated progress.\n   */\n  async complete() {\n    const changedDocs = await localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id);\n    const queryDocumentMap = this.getQueryDocumentMapping(this.documents);\n    for (const q of this.queries) {\n      await localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name));\n    }\n    this.progress.taskState = 'Success';\n    return {\n      progress: this.progress,\n      changedCollectionGroups: this.collectionGroups,\n      changedDocs\n    };\n  }\n}\n/**\n * Returns a `LoadBundleTaskProgress` representing the initial progress of\n * loading a bundle.\n */\nfunction bundleInitialProgress(metadata) {\n  return {\n    taskState: 'Running',\n    documentsLoaded: 0,\n    bytesLoaded: 0,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n/**\n * Returns a `LoadBundleTaskProgress` representing the progress that the loading\n * has succeeded.\n */\nfunction bundleSuccessProgress(metadata) {\n  return {\n    taskState: 'Success',\n    documentsLoaded: metadata.totalDocuments,\n    bytesLoaded: metadata.totalBytes,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AddedLimboDocument {\n  constructor(key) {\n    this.key = key;\n  }\n}\nclass RemovedLimboDocument {\n  constructor(key) {\n    this.key = key;\n  }\n}\n/**\n * View is responsible for computing the final merged truth of what docs are in\n * a query. It gets notified of local and remote changes to docs, and applies\n * the query filters and limits to determine the most correct possible results.\n */\nclass View {\n  constructor(query, /** Documents included in the remote target */\n  _syncedDocuments) {\n    this.query = query;\n    this._syncedDocuments = _syncedDocuments;\n    this.syncState = null;\n    this.hasCachedResults = false;\n    /**\n     * A flag whether the view is current with the backend. A view is considered\n     * current after it has seen the current flag from the backend and did not\n     * lose consistency within the watch stream (e.g. because of an existence\n     * filter mismatch).\n     */\n    this.current = false;\n    /** Documents in the view but not in the remote target */\n    this.limboDocuments = documentKeySet();\n    /** Document Keys that have local changes */\n    this.mutatedKeys = documentKeySet();\n    this.docComparator = newQueryComparator(query);\n    this.documentSet = new DocumentSet(this.docComparator);\n  }\n  /**\n   * The set of remote documents that the server has told us belongs to the target associated with\n   * this view.\n   */\n  get syncedDocuments() {\n    return this._syncedDocuments;\n  }\n  /**\n   * Iterates over a set of doc changes, applies the query limit, and computes\n   * what the new results should be, what the changes were, and whether we may\n   * need to go back to the local cache for more results. Does not make any\n   * changes to the view.\n   * @param docChanges - The doc changes to apply to this view.\n   * @param previousChanges - If this is being called with a refill, then start\n   *        with this set of docs and changes instead of the current view.\n   * @returns a new set of docs, changes, and refill flag.\n   */\n  computeDocChanges(docChanges, previousChanges) {\n    const changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;\n    let newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit = this.query.limitType === \"F\" /* LimitType.First */ && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;\n    const firstDocInLimit = this.query.limitType === \"L\" /* LimitType.Last */ && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;\n    docChanges.inorderTraversal((key, entry) => {\n      const oldDoc = oldDocumentSet.get(key);\n      const newDoc = queryMatches(this.query, entry) ? entry : null;\n      const oldDocHadPendingMutations = oldDoc ? this.mutatedKeys.has(oldDoc.key) : false;\n      const newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations ||\n      // We only consider committed mutations for documents that were\n      // mutated during the lifetime of the view.\n      this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;\n      let changeApplied = false;\n      // Calculate change\n      if (oldDoc && newDoc) {\n        const docsEqual = oldDoc.data.isEqual(newDoc.data);\n        if (!docsEqual) {\n          if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n            changeSet.track({\n              type: 2 /* ChangeType.Modified */,\n              doc: newDoc\n            });\n            changeApplied = true;\n            if (lastDocInLimit && this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && this.docComparator(newDoc, firstDocInLimit) < 0) {\n              // This doc moved from inside the limit to outside the limit.\n              // That means there may be some other doc in the local cache\n              // that should be included instead.\n              needsRefill = true;\n            }\n          }\n        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n          changeSet.track({\n            type: 3 /* ChangeType.Metadata */,\n            doc: newDoc\n          });\n          changeApplied = true;\n        }\n      } else if (!oldDoc && newDoc) {\n        changeSet.track({\n          type: 0 /* ChangeType.Added */,\n          doc: newDoc\n        });\n        changeApplied = true;\n      } else if (oldDoc && !newDoc) {\n        changeSet.track({\n          type: 1 /* ChangeType.Removed */,\n          doc: oldDoc\n        });\n        changeApplied = true;\n        if (lastDocInLimit || firstDocInLimit) {\n          // A doc was removed from a full limit query. We'll need to\n          // requery from the local cache to see if we know about some other\n          // doc that should be in the results.\n          needsRefill = true;\n        }\n      }\n      if (changeApplied) {\n        if (newDoc) {\n          newDocumentSet = newDocumentSet.add(newDoc);\n          if (newDocHasPendingMutations) {\n            newMutatedKeys = newMutatedKeys.add(key);\n          } else {\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        } else {\n          newDocumentSet = newDocumentSet.delete(key);\n          newMutatedKeys = newMutatedKeys.delete(key);\n        }\n      }\n    });\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.limit !== null) {\n      while (newDocumentSet.size > this.query.limit) {\n        const oldDoc = this.query.limitType === \"F\" /* LimitType.First */ ? newDocumentSet.last() : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);\n        changeSet.track({\n          type: 1 /* ChangeType.Removed */,\n          doc: oldDoc\n        });\n      }\n    }\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n  shouldWaitForSyncedDocument(oldDoc, newDoc) {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;\n  }\n  /**\n   * Updates the view with the given ViewDocumentChanges and optionally updates\n   * limbo docs and sync state from the provided target change.\n   * @param docChanges - The set of changes to make to the view's docs.\n   * @param limboResolutionEnabled - Whether to update limbo documents based on\n   *        this change.\n   * @param targetChange - A target change to apply for computing limbo docs and\n   *        sync state.\n   * @param targetIsPendingReset - Whether the target is pending to reset due to\n   *        existence filter mismatch. If not explicitly specified, it is treated\n   *        equivalently to `false`.\n   * @returns A new ViewChange with the given docs, changes, and sync state.\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(docChanges, limboResolutionEnabled, targetChange, targetIsPendingReset) {\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return compareChangeType(c1.type, c2.type) || this.docComparator(c1.doc, c2.doc);\n    });\n    this.applyTargetChange(targetChange);\n    targetIsPendingReset = targetIsPendingReset !== null && targetIsPendingReset !== void 0 ? targetIsPendingReset : false;\n    const limboChanges = limboResolutionEnabled && !targetIsPendingReset ? this.updateLimboDocuments() : [];\n    // We are at synced state if there is no limbo docs are waiting to be resolved, view is current\n    // with the backend, and the query is not pending to reset due to existence filter mismatch.\n    const synced = this.limboDocuments.size === 0 && this.current && !targetIsPendingReset;\n    const newSyncState = synced ? 1 /* SyncState.Synced */ : 0 /* SyncState.Local */;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return {\n        limboChanges\n      };\n    } else {\n      const snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0 /* SyncState.Local */, syncStateChanged, /* excludesMetadataChanges= */false, targetChange ? targetChange.resumeToken.approximateByteSize() > 0 : false);\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n  /**\n   * Applies an OnlineState change to the view, potentially generating a\n   * ViewChange if the view's syncState changes as a result.\n   */\n  applyOnlineStateChange(onlineState) {\n    if (this.current && onlineState === \"Offline\" /* OnlineState.Offline */) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges({\n        documentSet: this.documentSet,\n        changeSet: new DocumentChangeSet(),\n        mutatedKeys: this.mutatedKeys,\n        needsRefill: false\n      }, /* limboResolutionEnabled= */false);\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return {\n        limboChanges: []\n      };\n    }\n  }\n  /**\n   * Returns whether the doc for the given key should be in limbo.\n   */\n  shouldBeInLimbo(key) {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key).hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n  /**\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\n   * Returns the list of changes to which docs are in limbo.\n   */\n  applyTargetChange(targetChange) {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(key => this._syncedDocuments = this._syncedDocuments.add(key));\n      targetChange.modifiedDocuments.forEach(key => {});\n      targetChange.removedDocuments.forEach(key => this._syncedDocuments = this._syncedDocuments.delete(key));\n      this.current = targetChange.current;\n    }\n  }\n  updateLimboDocuments() {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n    // Diff the new limbo docs with the old limbo docs.\n    const changes = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n  /**\n   * Update the in-memory state of the current view with the state read from\n   * persistence.\n   *\n   * We update the query view whenever a client's primary status changes:\n   * - When a client transitions from primary to secondary, it can miss\n   *   LocalStorage updates and its query views may temporarily not be\n   *   synchronized with the state on disk.\n   * - For secondary to primary transitions, the client needs to update the list\n   *   of `syncedDocuments` since secondary clients update their query views\n   *   based purely on synthesized RemoteEvents.\n   *\n   * @param queryResult.documents - The documents that match the query according\n   * to the LocalStore.\n   * @param queryResult.remoteKeys - The keys of the documents that match the\n   * query according to the backend.\n   *\n   * @returns The ViewChange that resulted from this synchronization.\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult) {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /* limboResolutionEnabled= */true);\n  }\n  /**\n   * Returns a view snapshot as if this query was just listened to. Contains\n   * a document add for every existing document and the `fromCache` and\n   * `hasPendingWrites` status of the already established view.\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot() {\n    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0 /* SyncState.Local */, this.hasCachedResults);\n  }\n}\nfunction compareChangeType(c1, c2) {\n  const order = change => {\n    switch (change) {\n      case 0 /* ChangeType.Added */:\n        return 1;\n      case 2 /* ChangeType.Modified */:\n        return 2;\n      case 3 /* ChangeType.Metadata */:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case 1 /* ChangeType.Removed */:\n        return 0;\n      default:\n        return fail();\n    }\n  };\n  return order(c1) - order(c2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$3 = 'SyncEngine';\n/**\n * QueryView contains all of the data that SyncEngine needs to keep track of for\n * a particular query.\n */\nclass QueryView {\n  constructor(\n  /**\n   * The query itself.\n   */\n  query,\n  /**\n   * The target number created by the client that is used in the watch\n   * stream to identify this query.\n   */\n  targetId,\n  /**\n   * The view is responsible for computing the final merged truth of what\n   * docs are in the query. It gets notified of local and remote changes,\n   * and applies the query filters and limits to determine the most correct\n   * possible results.\n   */\n  view) {\n    this.query = query;\n    this.targetId = targetId;\n    this.view = view;\n  }\n}\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(key) {\n    this.key = key;\n    /**\n     * Set to true once we've received a document. This is used in\n     * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\n     * decide whether it needs to manufacture a delete event for the target once\n     * the target is CURRENT.\n     */\n    this.receivedDocument = false;\n  }\n}\n/**\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\n *\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\n * registered individually. This is done in `syncEngineWrite()` and\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\n * serve as entry points to RemoteStore's functionality.\n *\n * Note: some field defined in this class might have public access level, but\n * the class is not exported so they are only accessible from this module.\n * This is useful to implement optional features (like bundles) in free\n * functions, such that they are tree-shakeable.\n */\nclass SyncEngineImpl {\n  constructor(localStore, remoteStore, eventManager,\n  // PORTING NOTE: Manages state synchronization in multi-tab environments.\n  sharedClientState, currentUser, maxConcurrentLimboResolutions) {\n    this.localStore = localStore;\n    this.remoteStore = remoteStore;\n    this.eventManager = eventManager;\n    this.sharedClientState = sharedClientState;\n    this.currentUser = currentUser;\n    this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;\n    this.syncEngineListener = {};\n    this.queryViewsByQuery = new ObjectMap(q => canonifyQuery(q), queryEquals);\n    this.queriesByTarget = new Map();\n    /**\n     * The keys of documents that are in limbo for which we haven't yet started a\n     * limbo resolution query. The strings in this set are the result of calling\n     * `key.path.canonicalString()` where `key` is a `DocumentKey` object.\n     *\n     * The `Set` type was chosen because it provides efficient lookup and removal\n     * of arbitrary elements and it also maintains insertion order, providing the\n     * desired queue-like FIFO semantics.\n     */\n    this.enqueuedLimboResolutions = new Set();\n    /**\n     * Keeps track of the target ID for each document that is in limbo with an\n     * active target.\n     */\n    this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n    /**\n     * Keeps track of the information about an active limbo resolution for each\n     * active target ID that was started for the purpose of limbo resolution.\n     */\n    this.activeLimboResolutionsByTarget = new Map();\n    this.limboDocumentRefs = new ReferenceSet();\n    /** Stores user completion handlers, indexed by User and BatchId. */\n    this.mutationUserCallbacks = {};\n    /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n    this.pendingWritesCallbacks = new Map();\n    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    // The primary state is set to `true` or `false` immediately after Firestore\n    // startup. In the interim, a client should only be considered primary if\n    // `isPrimary` is true.\n    this._isPrimaryClient = undefined;\n  }\n  get isPrimaryClient() {\n    return this._isPrimaryClient === true;\n  }\n}\nfunction newSyncEngine(localStore, remoteStore, eventManager,\n// PORTING NOTE: Manages state synchronization in multi-tab environments.\nsharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {\n  const syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);\n  if (isPrimary) {\n    syncEngine._isPrimaryClient = true;\n  }\n  return syncEngine;\n}\n/**\n * Initiates the new listen, resolves promise when listen enqueued to the\n * server. All the subsequent view snapshots or errors are sent to the\n * subscribed handlers. Returns the initial snapshot.\n */\nasync function syncEngineListen(syncEngine, query, shouldListenToRemote = true) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  let viewSnapshot;\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  if (queryView) {\n    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n    // already exists when EventManager calls us for the first time. This\n    // happens when the primary tab is already listening to this query on\n    // behalf of another tab and the user of the primary also starts listening\n    // to the query. EventManager will not have an assigned target ID in this\n    // case and calls `listen` to obtain this ID.\n    syncEngineImpl.sharedClientState.addLocalQueryTarget(queryView.targetId);\n    viewSnapshot = queryView.view.computeInitialSnapshot();\n  } else {\n    viewSnapshot = await allocateTargetAndMaybeListen(syncEngineImpl, query, shouldListenToRemote, /** shouldInitializeView= */true);\n  }\n  return viewSnapshot;\n}\n/** Query has been listening to the cache, and tries to initiate the remote store listen */\nasync function triggerRemoteStoreListen(syncEngine, query) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  await allocateTargetAndMaybeListen(syncEngineImpl, query, /** shouldListenToRemote= */true, /** shouldInitializeView= */false);\n}\nasync function allocateTargetAndMaybeListen(syncEngineImpl, query, shouldListenToRemote, shouldInitializeView) {\n  const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query));\n  const targetId = targetData.targetId;\n  // PORTING NOTE: When the query is listening to cache only, we skip sending it over to Watch by\n  // not registering it in shared client state, and directly calculate initial snapshots and\n  // subsequent updates from cache. Otherwise, register the target ID with local Firestore client\n  // as active watch target.\n  const status = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId, /* addToActiveTargetIds= */shouldListenToRemote);\n  let viewSnapshot;\n  if (shouldInitializeView) {\n    viewSnapshot = await initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status === 'current', targetData.resumeToken);\n  }\n  if (syncEngineImpl.isPrimaryClient && shouldListenToRemote) {\n    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n  }\n  return viewSnapshot;\n}\n/**\n * Registers a view for a previously unknown query and computes its initial\n * snapshot.\n */\nasync function initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current, resumeToken) {\n  // PORTING NOTE: On Web only, we inject the code that registers new Limbo\n  // targets based on view changes. This allows us to only depend on Limbo\n  // changes when user code includes queries.\n  syncEngineImpl.applyDocChanges = (queryView, changes, remoteEvent) => applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);\n  const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, query, /* usePreviousResults= */true);\n  const view = new View(query, queryResult.remoteKeys);\n  const viewDocChanges = view.computeDocChanges(queryResult.documents);\n  const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== \"Offline\" /* OnlineState.Offline */, resumeToken);\n  const viewChange = view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */syncEngineImpl.isPrimaryClient, synthesizedTargetChange);\n  updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\n  const data = new QueryView(query, targetId, view);\n  syncEngineImpl.queryViewsByQuery.set(query, data);\n  if (syncEngineImpl.queriesByTarget.has(targetId)) {\n    syncEngineImpl.queriesByTarget.get(targetId).push(query);\n  } else {\n    syncEngineImpl.queriesByTarget.set(targetId, [query]);\n  }\n  return viewChange.snapshot;\n}\n/** Stops listening to the query. */\nasync function syncEngineUnlisten(syncEngine, query, shouldUnlistenToRemote) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  // Only clean up the query view and target if this is the only query mapped\n  // to the target.\n  const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\n  if (queries.length > 1) {\n    syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(q => !queryEquals(q, query)));\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    return;\n  }\n  // No other queries are mapped to the target, clean up the query and the target.\n  if (syncEngineImpl.isPrimaryClient) {\n    // We need to remove the local query target first to allow us to verify\n    // whether any other client is still interested in this target.\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n    const targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);\n    if (!targetRemainsActive) {\n      await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, /*keepPersistedTargetData=*/false).then(() => {\n        syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\n        if (shouldUnlistenToRemote) {\n          remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n        }\n        removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n      }).catch(ignoreIfPrimaryLeaseLoss);\n    }\n  } else {\n    removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n    await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, /*keepPersistedTargetData=*/true);\n  }\n}\n/** Unlistens to the remote store while still listening to the cache. */\nasync function triggerRemoteStoreUnlisten(syncEngine, query) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\n  if (syncEngineImpl.isPrimaryClient && queries.length === 1) {\n    // PORTING NOTE: Unregister the target ID with local Firestore client as\n    // watch target.\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n  }\n}\n/**\n * Initiates the write of local mutation batch which involves adding the\n * writes to the mutation queue, notifying the remote store about new\n * mutations and raising events for any changes this write caused.\n *\n * The promise returned by this call is resolved when the above steps\n * have completed, *not* when the write was acked by the backend. The\n * userCallback is resolved once the write was acked/rejected by the\n * backend (or failed locally for any other reason).\n */\nasync function syncEngineWrite(syncEngine, batch, userCallback) {\n  const syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);\n  try {\n    const result = await localStoreWriteLocally(syncEngineImpl.localStore, batch);\n    syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\n    addMutationCallback(syncEngineImpl, result.batchId, userCallback);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes);\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } catch (e) {\n    // If we can't persist the mutation, we reject the user callback and\n    // don't send the mutation. The user can then retry the write.\n    const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n    userCallback.reject(error);\n  }\n}\n/**\n * Applies one remote event to the sync engine, notifying any views of the\n * changes, and releasing any pending mutation batches that would become\n * visible because of the snapshot version the remote event contains.\n */\nasync function syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {\n  const syncEngineImpl = debugCast(syncEngine);\n  try {\n    const changes = await localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent);\n    // Update `receivedDocument` as appropriate for any limbo targets.\n    remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n      const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n      if (limboResolution) {\n        // Since this is a limbo resolution lookup, it's for a single document\n        // and it could be added, modified, or removed, but not a combination.\n        hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);\n        if (targetChange.addedDocuments.size > 0) {\n          limboResolution.receivedDocument = true;\n        } else if (targetChange.modifiedDocuments.size > 0) {\n          hardAssert(limboResolution.receivedDocument);\n        } else if (targetChange.removedDocuments.size > 0) {\n          hardAssert(limboResolution.receivedDocument);\n          limboResolution.receivedDocument = false;\n        } else {\n          // This was probably just a CURRENT targetChange or similar.\n        }\n      }\n    });\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n/**\n * Applies an OnlineState change to the sync engine and notifies any views of\n * the change.\n */\nfunction syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // If we are the secondary client, we explicitly ignore the remote store's\n  // online state (the local client may go offline, even though the primary\n  // tab remains online) and only apply the primary tab's online state from\n  // SharedClientState.\n  if (syncEngineImpl.isPrimaryClient && source === 0 /* OnlineStateSource.RemoteStore */ || !syncEngineImpl.isPrimaryClient && source === 1 /* OnlineStateSource.SharedClientState */) {\n    const newViewSnapshots = [];\n    syncEngineImpl.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\n    if (newViewSnapshots.length) {\n      syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n    }\n    syncEngineImpl.onlineState = onlineState;\n    if (syncEngineImpl.isPrimaryClient) {\n      syncEngineImpl.sharedClientState.setOnlineState(onlineState);\n    }\n  }\n}\n/**\n * Rejects the listen for the given targetID. This can be triggered by the\n * backend for any active target.\n *\n * @param syncEngine - The sync engine implementation.\n * @param targetId - The targetID corresponds to one previously initiated by the\n * user as part of TargetData passed to listen() on RemoteStore.\n * @param err - A description of the condition that has forced the rejection.\n * Nearly always this will be an indication that the user is no longer\n * authorized to see the data matching the target.\n */\nasync function syncEngineRejectListen(syncEngine, targetId, err) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // PORTING NOTE: Multi-tab only.\n  syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n  const limboKey = limboResolution && limboResolution.key;\n  if (limboKey) {\n    // TODO(klimt): We really only should do the following on permission\n    // denied errors, but we don't have the cause code here.\n    // It's a limbo doc. Create a synthetic event saying it was deleted.\n    // This is kind of a hack. Ideally, we would have a method in the local\n    // store to purge a document. However, it would be tricky to keep all of\n    // the local store's invariants with another method.\n    let documentUpdates = new SortedMap(DocumentKey.comparator);\n    // TODO(b/217189216): This limbo document should ideally have a read time,\n    // so that it is picked up by any read-time based scans. The backend,\n    // however, does not send a read time for target removals.\n    documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));\n    const resolvedLimboDocuments = documentKeySet().add(limboKey);\n    const event = new RemoteEvent(SnapshotVersion.min(), /* targetChanges= */new Map(), /* targetMismatches= */new SortedMap(primitiveComparator), documentUpdates, resolvedLimboDocuments);\n    await syncEngineApplyRemoteEvent(syncEngineImpl, event);\n    // Since this query failed, we won't want to manually unlisten to it.\n    // We only remove it from bookkeeping after we successfully applied the\n    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n    // this query when the RemoteStore restarts the Watch stream, which should\n    // re-trigger the target failure.\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);\n    syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  } else {\n    await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */false).then(() => removeAndCleanupTarget(syncEngineImpl, targetId, err)).catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\nasync function syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const batchId = mutationBatchResult.batch.batchId;\n  try {\n    const changes = await localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult);\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught\n    // up), so we raise user callbacks first so that they consistently happen\n    // before listen events.\n    processUserCallback(syncEngineImpl, batchId, /*error=*/null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'acknowledged');\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\nasync function syncEngineRejectFailedWrite(syncEngine, batchId, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  try {\n    const changes = await localStoreRejectBatch(syncEngineImpl.localStore, batchId);\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught up),\n    // so we raise user callbacks first so that they consistently happen before\n    // listen events.\n    processUserCallback(syncEngineImpl, batchId, error);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'rejected', error);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n/**\n * Registers a user callback that resolves when all pending mutations at the moment of calling\n * are acknowledged .\n */\nasync function syncEngineRegisterPendingWritesCallback(syncEngine, callback) {\n  const syncEngineImpl = debugCast(syncEngine);\n  if (!canUseNetwork(syncEngineImpl.remoteStore)) {\n    logDebug(LOG_TAG$3, 'The network is disabled. The task returned by ' + \"'awaitPendingWrites()' will not complete until the network is enabled.\");\n  }\n  try {\n    const highestBatchId = await localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore);\n    if (highestBatchId === BATCHID_UNKNOWN) {\n      // Trigger the callback right away if there is no pending writes at the moment.\n      callback.resolve();\n      return;\n    }\n    const callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\n    callbacks.push(callback);\n    syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, 'Initialization of waitForPendingWrites() operation failed');\n    callback.reject(firestoreError);\n  }\n}\n/**\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\n * if there are any.\n */\nfunction triggerPendingWritesCallbacks(syncEngineImpl, batchId) {\n  (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n    callback.resolve();\n  });\n  syncEngineImpl.pendingWritesCallbacks.delete(batchId);\n}\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\nfunction rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {\n  syncEngineImpl.pendingWritesCallbacks.forEach(callbacks => {\n    callbacks.forEach(callback => {\n      callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n    });\n  });\n  syncEngineImpl.pendingWritesCallbacks.clear();\n}\nfunction addMutationCallback(syncEngineImpl, batchId, callback) {\n  let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n  if (!newCallbacks) {\n    newCallbacks = new SortedMap(primitiveComparator);\n  }\n  newCallbacks = newCallbacks.insert(batchId, callback);\n  syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n}\n/**\n * Resolves or rejects the user callback for the given batch and then discards\n * it.\n */\nfunction processUserCallback(syncEngine, batchId, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n  // NOTE: Mutations restored from persistence won't have callbacks, so it's\n  // okay for there to be no callback for this ID.\n  if (newCallbacks) {\n    const callback = newCallbacks.get(batchId);\n    if (callback) {\n      if (error) {\n        callback.reject(error);\n      } else {\n        callback.resolve();\n      }\n      newCallbacks = newCallbacks.remove(batchId);\n    }\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n  }\n}\nfunction removeAndCleanupTarget(syncEngineImpl, targetId, error = null) {\n  syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\n  for (const query of syncEngineImpl.queriesByTarget.get(targetId)) {\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    if (error) {\n      syncEngineImpl.syncEngineListener.onWatchError(query, error);\n    }\n  }\n  syncEngineImpl.queriesByTarget.delete(targetId);\n  if (syncEngineImpl.isPrimaryClient) {\n    const limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);\n    limboKeys.forEach(limboKey => {\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboKey);\n      }\n    });\n  }\n}\nfunction removeLimboTarget(syncEngineImpl, key) {\n  syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());\n  // It's possible that the target already got removed because the query failed. In that case,\n  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n  const limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\n  if (limboTargetId === null) {\n    // This target already got removed, because the query failed.\n    return;\n  }\n  remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\n  syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);\n  syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\n  pumpEnqueuedLimboResolutions(syncEngineImpl);\n}\nfunction updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {\n  for (const limboChange of limboChanges) {\n    if (limboChange instanceof AddedLimboDocument) {\n      syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\n      trackLimboChange(syncEngineImpl, limboChange);\n    } else if (limboChange instanceof RemovedLimboDocument) {\n      logDebug(LOG_TAG$3, 'Document no longer in limbo: ' + limboChange.key);\n      syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboChange.key);\n      }\n    } else {\n      fail();\n    }\n  }\n}\nfunction trackLimboChange(syncEngineImpl, limboChange) {\n  const key = limboChange.key;\n  const keyString = key.path.canonicalString();\n  if (!syncEngineImpl.activeLimboTargetsByKey.get(key) && !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {\n    logDebug(LOG_TAG$3, 'New document in limbo: ' + key);\n    syncEngineImpl.enqueuedLimboResolutions.add(keyString);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  }\n}\n/**\n * Starts listens for documents in limbo that are enqueued for resolution,\n * subject to a maximum number of concurrent resolutions.\n *\n * Without bounding the number of concurrent resolutions, the server can fail\n * with \"resource exhausted\" errors which can lead to pathological client\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\n */\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl) {\n  while (syncEngineImpl.enqueuedLimboResolutions.size > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {\n    const keyString = syncEngineImpl.enqueuedLimboResolutions.values().next().value;\n    syncEngineImpl.enqueuedLimboResolutions.delete(keyString);\n    const key = new DocumentKey(ResourcePath.fromString(keyString));\n    const limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\n    syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);\n    remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */, ListenSequence.INVALID));\n  }\n}\nasync function syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const newSnaps = [];\n  const docChangesInAllViews = [];\n  const queriesProcessed = [];\n  if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\n    // Return early since `onWatchChange()` might not have been assigned yet.\n    return;\n  }\n  syncEngineImpl.queryViewsByQuery.forEach((_, queryView) => {\n    queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(viewSnapshot => {\n      var _a;\n      // If there are changes, or we are handling a global snapshot, notify\n      // secondary clients to update query state.\n      if (viewSnapshot || remoteEvent) {\n        if (syncEngineImpl.isPrimaryClient) {\n          // Query state is set to `current` if:\n          // - There is a view change and it is up-to-date, or,\n          // - There is a global snapshot, the Target is current, and no changes to be resolved\n          const isCurrent = viewSnapshot ? !viewSnapshot.fromCache : (_a = remoteEvent === null || remoteEvent === void 0 ? void 0 : remoteEvent.targetChanges.get(queryView.targetId)) === null || _a === void 0 ? void 0 : _a.current;\n          syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, isCurrent ? 'current' : 'not-current');\n        }\n      }\n      // Update views if there are actual changes.\n      if (!!viewSnapshot) {\n        newSnaps.push(viewSnapshot);\n        const docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);\n        docChangesInAllViews.push(docChanges);\n      }\n    }));\n  });\n  await Promise.all(queriesProcessed);\n  syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);\n  await localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews);\n}\nasync function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {\n  let viewDocChanges = queryView.view.computeDocChanges(changes);\n  if (viewDocChanges.needsRefill) {\n    // The query has a limit and some docs were removed, so we need\n    // to re-run the query against the local store to make sure we\n    // didn't lose any good docs that had been past the limit.\n    viewDocChanges = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, /* usePreviousResults= */false).then(({\n      documents\n    }) => {\n      return queryView.view.computeDocChanges(documents, viewDocChanges);\n    });\n  }\n  const targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n  const targetIsPendingReset = remoteEvent && remoteEvent.targetMismatches.get(queryView.targetId) != null;\n  const viewChange = queryView.view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */syncEngineImpl.isPrimaryClient, targetChange, targetIsPendingReset);\n  updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);\n  return viewChange.snapshot;\n}\nasync function syncEngineHandleCredentialChange(syncEngine, user) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const userChanged = !syncEngineImpl.currentUser.isEqual(user);\n  if (userChanged) {\n    logDebug(LOG_TAG$3, 'User change. New user:', user.toKey());\n    const result = await localStoreHandleUserChange(syncEngineImpl.localStore, user);\n    syncEngineImpl.currentUser = user;\n    // Fails tasks waiting for pending writes requested by previous user.\n    rejectOutstandingPendingWritesCallbacks(syncEngineImpl, \"'waitForPendingWrites' promise is rejected due to a user change.\");\n    // TODO(b/114226417): Consider calling this only in the primary tab.\n    syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments);\n  }\n}\nfunction syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n  if (limboResolution && limboResolution.receivedDocument) {\n    return documentKeySet().add(limboResolution.key);\n  } else {\n    let keySet = documentKeySet();\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n    if (!queries) {\n      return keySet;\n    }\n    for (const query of queries) {\n      const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n      keySet = keySet.unionWith(queryView.view.syncedDocuments);\n    }\n    return keySet;\n  }\n}\n/**\n * Reconcile the list of synced documents in an existing view with those\n * from persistence.\n */\nasync function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, /* usePreviousResults= */true);\n  const viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);\n  if (syncEngineImpl.isPrimaryClient) {\n    updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);\n  }\n  return viewSnapshot;\n}\n/**\n * Retrieves newly changed documents from remote document cache and raises\n * snapshots if needed.\n */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineSynchronizeWithChangedDocuments(syncEngine, collectionGroup) {\n  const syncEngineImpl = debugCast(syncEngine);\n  return localStoreGetNewDocumentChanges(syncEngineImpl.localStore, collectionGroup).then(changes => syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes));\n}\n/** Applies a mutation state to an existing batch.  */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyBatchState(syncEngine, batchId, batchState, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const documents = await localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId);\n  if (documents === null) {\n    // A throttled tab may not have seen the mutation before it was completed\n    // and removed from the mutation queue, in which case we won't have cached\n    // the affected documents. In this case we can safely ignore the update\n    // since that means we didn't apply the mutation locally at all (if we\n    // had, we would have cached the affected documents), and so we will just\n    // see any resulting document changes via normal remote document updates\n    // as applicable.\n    logDebug(LOG_TAG$3, 'Cannot apply mutation batch with id: ' + batchId);\n    return;\n  }\n  if (batchState === 'pending') {\n    // If we are the primary client, we need to send this write to the\n    // backend. Secondary clients will ignore these writes since their remote\n    // connection is disabled.\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n    // NOTE: Both these methods are no-ops for batches that originated from\n    // other clients.\n    processUserCallback(syncEngineImpl, batchId, error ? error : null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\n  } else {\n    fail();\n  }\n  await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents);\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyPrimaryState(syncEngine, isPrimary) {\n  const syncEngineImpl = debugCast(syncEngine);\n  ensureWatchCallbacks(syncEngineImpl);\n  syncEngineEnsureWriteCallbacks(syncEngineImpl);\n  if (isPrimary === true && syncEngineImpl._isPrimaryClient !== true) {\n    // Secondary tabs only maintain Views for their local listeners and the\n    // Views internal state may not be 100% populated (in particular\n    // secondary tabs don't track syncedDocuments, the set of documents the\n    // server considers to be in the target). So when a secondary becomes\n    // primary, we need to need to make sure that all views for all targets\n    // match the state on disk.\n    const activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\n    const activeQueries = await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray());\n    syncEngineImpl._isPrimaryClient = true;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true);\n    for (const targetData of activeQueries) {\n      remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n    }\n  } else if (isPrimary === false && syncEngineImpl._isPrimaryClient !== false) {\n    const activeTargets = [];\n    let p = Promise.resolve();\n    syncEngineImpl.queriesByTarget.forEach((_, targetId) => {\n      if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\n        activeTargets.push(targetId);\n      } else {\n        p = p.then(() => {\n          removeAndCleanupTarget(syncEngineImpl, targetId);\n          return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /*keepPersistedTargetData=*/true);\n        });\n      }\n      remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n    });\n    await p;\n    await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets);\n    resetLimboDocuments(syncEngineImpl);\n    syncEngineImpl._isPrimaryClient = false;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false);\n  }\n}\n// PORTING NOTE: Multi-Tab only.\nfunction resetLimboDocuments(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n  });\n  syncEngineImpl.limboDocumentRefs.removeAllReferences();\n  syncEngineImpl.activeLimboResolutionsByTarget = new Map();\n  syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n}\n/**\n * Reconcile the query views of the provided query targets with the state from\n * persistence. Raises snapshots for any changes that affect the local\n * client and returns the updated state of all target's query data.\n *\n * @param syncEngine - The sync engine implementation\n * @param targets - the list of targets with views that need to be recomputed\n * @param transitionToPrimary - `true` iff the tab transitions from a secondary\n * tab to a primary tab\n */\n// PORTING NOTE: Multi-Tab only.\nasync function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const activeQueries = [];\n  const newViewSnapshots = [];\n  for (const targetId of targets) {\n    let targetData;\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n    if (queries && queries.length !== 0) {\n      // For queries that have a local View, we fetch their current state\n      // from LocalStore (as the resume token and the snapshot version\n      // might have changed) and reconcile their views with the persisted\n      // state (the list of syncedDocuments may have gotten out of sync).\n      targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]));\n      for (const query of queries) {\n        const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n        const viewChange = await synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView);\n        if (viewChange.snapshot) {\n          newViewSnapshots.push(viewChange.snapshot);\n        }\n      }\n    } else {\n      // For queries that never executed on this client, we need to\n      // allocate the target in LocalStore and initialize a new View.\n      const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\n      targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\n      await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, /*current=*/false, targetData.resumeToken);\n    }\n    activeQueries.push(targetData);\n  }\n  syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n  return activeQueries;\n}\n/**\n * Creates a `Query` object from the specified `Target`. There is no way to\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\n * object.\n *\n * The synthesized result might be different from the original `Query`, but\n * since the synthesized `Query` should return the same results as the\n * original one (only the presentation of results might differ), the potential\n * difference will not cause issues.\n */\n// PORTING NOTE: Multi-Tab only.\nfunction synthesizeTargetToQuery(target) {\n  return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, \"F\" /* LimitType.First */, target.startAt, target.endAt);\n}\n/** Returns the IDs of the clients that are currently active. */\n// PORTING NOTE: Multi-Tab only.\nfunction syncEngineGetActiveClients(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  return localStoreGetActiveClients(syncEngineImpl.localStore);\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyTargetState(syncEngine, targetId, state, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  if (syncEngineImpl._isPrimaryClient) {\n    // If we receive a target state notification via WebStorage, we are\n    // either already secondary or another tab has taken the primary lease.\n    logDebug(LOG_TAG$3, 'Ignoring unexpected query state notification.');\n    return;\n  }\n  const query = syncEngineImpl.queriesByTarget.get(targetId);\n  if (query && query.length > 0) {\n    switch (state) {\n      case 'current':\n      case 'not-current':\n        {\n          const changes = await localStoreGetNewDocumentChanges(syncEngineImpl.localStore, queryCollectionGroup(query[0]));\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current', ByteString.EMPTY_BYTE_STRING);\n          await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent);\n          break;\n        }\n      case 'rejected':\n        {\n          await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */true);\n          removeAndCleanupTarget(syncEngineImpl, targetId, error);\n          break;\n        }\n      default:\n        fail();\n    }\n  }\n}\n/** Adds or removes Watch targets for queries from different tabs. */\nasync function syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  if (!syncEngineImpl._isPrimaryClient) {\n    return;\n  }\n  for (const targetId of added) {\n    // A target is already listening to remote store if it is already registered to\n    // sharedClientState.\n    const targetAlreadyListeningToRemoteStore = syncEngineImpl.queriesByTarget.has(targetId) && syncEngineImpl.sharedClientState.isActiveQueryTarget(targetId);\n    if (targetAlreadyListeningToRemoteStore) {\n      logDebug(LOG_TAG$3, 'Adding an already active target ' + targetId);\n      continue;\n    }\n    const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\n    const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\n    await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, /*current=*/false, targetData.resumeToken);\n    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n  }\n  for (const targetId of removed) {\n    // Check that the target is still active since the target might have been\n    // removed if it has been rejected by the backend.\n    if (!syncEngineImpl.queriesByTarget.has(targetId)) {\n      continue;\n    }\n    // Release queries that are still active.\n    await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */false).then(() => {\n      remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n      removeAndCleanupTarget(syncEngineImpl, targetId);\n    }).catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\nfunction ensureWatchCallbacks(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);\n  syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);\n  syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);\n  return syncEngineImpl;\n}\nfunction syncEngineEnsureWriteCallbacks(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);\n  return syncEngineImpl;\n}\n/**\n * Loads a Firestore bundle into the SDK. The returned promise resolves when\n * the bundle finished loading.\n *\n * @param syncEngine - SyncEngine to use.\n * @param bundleReader - Bundle to load into the SDK.\n * @param task - LoadBundleTask used to update the loading progress to public API.\n */\nfunction syncEngineLoadBundle(syncEngine, bundleReader, task) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  loadBundleImpl(syncEngineImpl, bundleReader, task).then(collectionGroups => {\n    syncEngineImpl.sharedClientState.notifyBundleLoaded(collectionGroups);\n  });\n}\n/** Loads a bundle and returns the list of affected collection groups. */\nasync function loadBundleImpl(syncEngine, reader, task) {\n  try {\n    const metadata = await reader.getMetadata();\n    const skip = await localStoreHasNewerBundle(syncEngine.localStore, metadata);\n    if (skip) {\n      await reader.close();\n      task._completeWith(bundleSuccessProgress(metadata));\n      return Promise.resolve(new Set());\n    }\n    task._updateProgress(bundleInitialProgress(metadata));\n    const loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);\n    let element = await reader.nextElement();\n    while (element) {\n      ;\n      const progress = await loader.addSizedElement(element);\n      if (progress) {\n        task._updateProgress(progress);\n      }\n      element = await reader.nextElement();\n    }\n    const result = await loader.complete();\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, /* remoteEvent */undefined);\n    // Save metadata, so loading the same bundle will skip.\n    await localStoreSaveBundle(syncEngine.localStore, metadata);\n    task._completeWith(result.progress);\n    return Promise.resolve(result.changedCollectionGroups);\n  } catch (e) {\n    logWarn(LOG_TAG$3, `Loading bundle failed with ${e}`);\n    task._failWith(e);\n    return Promise.resolve(new Set());\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides all components needed for Firestore with in-memory persistence.\n * Uses EagerGC garbage collection.\n */\nclass MemoryOfflineComponentProvider {\n  constructor() {\n    this.kind = 'memory';\n    this.synchronizeTabs = false;\n  }\n  async initialize(cfg) {\n    this.serializer = newSerializer(cfg.databaseInfo.databaseId);\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.localStore = this.createLocalStore(cfg);\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg, this.localStore);\n    this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(cfg, this.localStore);\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    return null;\n  }\n  createIndexBackfillerScheduler(cfg, localStore) {\n    return null;\n  }\n  createLocalStore(cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  }\n  createPersistence(cfg) {\n    return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);\n  }\n  createSharedClientState(cfg) {\n    return new MemorySharedClientState();\n  }\n  async terminate() {\n    var _a, _b;\n    (_a = this.gcScheduler) === null || _a === void 0 ? void 0 : _a.stop();\n    (_b = this.indexBackfillerScheduler) === null || _b === void 0 ? void 0 : _b.stop();\n    this.sharedClientState.shutdown();\n    await this.persistence.shutdown();\n  }\n}\nMemoryOfflineComponentProvider.provider = {\n  build: () => new MemoryOfflineComponentProvider()\n};\nclass LruGcMemoryOfflineComponentProvider extends MemoryOfflineComponentProvider {\n  constructor(cacheSizeBytes) {\n    super();\n    this.cacheSizeBytes = cacheSizeBytes;\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    hardAssert(this.persistence.referenceDelegate instanceof MemoryLruDelegate);\n    const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\n  }\n  createPersistence(cfg) {\n    const lruParams = this.cacheSizeBytes !== undefined ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new MemoryPersistence(p => MemoryLruDelegate.factory(p, lruParams), this.serializer);\n  }\n}\n/**\n * Provides all components needed for Firestore with IndexedDB persistence.\n */\nclass IndexedDbOfflineComponentProvider extends MemoryOfflineComponentProvider {\n  constructor(onlineComponentProvider, cacheSizeBytes, forceOwnership) {\n    super();\n    this.onlineComponentProvider = onlineComponentProvider;\n    this.cacheSizeBytes = cacheSizeBytes;\n    this.forceOwnership = forceOwnership;\n    this.kind = 'persistent';\n    this.synchronizeTabs = false;\n  }\n  async initialize(cfg) {\n    await super.initialize(cfg);\n    await this.onlineComponentProvider.initialize(this, cfg);\n    // Enqueue writes from a previous session\n    await syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine);\n    await fillWritePipeline(this.onlineComponentProvider.remoteStore);\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(() => {\n      if (this.gcScheduler && !this.gcScheduler.started) {\n        this.gcScheduler.start();\n      }\n      if (this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started) {\n        this.indexBackfillerScheduler.start();\n      }\n      return Promise.resolve();\n    });\n  }\n  createLocalStore(cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\n  }\n  createIndexBackfillerScheduler(cfg, localStore) {\n    const indexBackfiller = new IndexBackfiller(localStore, this.persistence);\n    return new IndexBackfillerScheduler(cfg.asyncQueue, indexBackfiller);\n  }\n  createPersistence(cfg) {\n    const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    const lruParams = this.cacheSizeBytes !== undefined ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\n  }\n  createSharedClientState(cfg) {\n    return new MemorySharedClientState();\n  }\n}\n/**\n * Provides all components needed for Firestore with multi-tab IndexedDB\n * persistence.\n *\n * In the legacy client, this provider is used to provide both multi-tab and\n * non-multi-tab persistence since we cannot tell at build time whether\n * `synchronizeTabs` will be enabled.\n */\nclass MultiTabOfflineComponentProvider extends IndexedDbOfflineComponentProvider {\n  constructor(onlineComponentProvider, cacheSizeBytes) {\n    super(onlineComponentProvider, cacheSizeBytes, /* forceOwnership= */false);\n    this.onlineComponentProvider = onlineComponentProvider;\n    this.cacheSizeBytes = cacheSizeBytes;\n    this.synchronizeTabs = true;\n  }\n  async initialize(cfg) {\n    await super.initialize(cfg);\n    const syncEngine = this.onlineComponentProvider.syncEngine;\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = {\n        applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),\n        applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),\n        applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),\n        getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),\n        synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)\n      };\n      await this.sharedClientState.start();\n    }\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary);\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start();\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n      if (this.indexBackfillerScheduler) {\n        if (isPrimary && !this.indexBackfillerScheduler.started) {\n          this.indexBackfillerScheduler.start();\n        } else if (!isPrimary) {\n          this.indexBackfillerScheduler.stop();\n        }\n      }\n    });\n  }\n  createSharedClientState(cfg) {\n    const window = getWindow();\n    if (!WebStorageSharedClientState.isAvailable(window)) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');\n    }\n    const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    return new WebStorageSharedClientState(window, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);\n  }\n}\n/**\n * Initializes and wires the components that are needed to interface with the\n * network.\n */\nclass OnlineComponentProvider {\n  async initialize(offlineComponentProvider, cfg) {\n    if (this.localStore) {\n      // OnlineComponentProvider may get initialized multiple times if\n      // multi-tab persistence is used.\n      return;\n    }\n    this.localStore = offlineComponentProvider.localStore;\n    this.sharedClientState = offlineComponentProvider.sharedClientState;\n    this.datastore = this.createDatastore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.eventManager = this.createEventManager(cfg);\n    this.syncEngine = this.createSyncEngine(cfg, /* startAsPrimary=*/!offlineComponentProvider.synchronizeTabs);\n    this.sharedClientState.onlineStateHandler = onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 1 /* OnlineStateSource.SharedClientState */);\n    this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);\n    await remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient);\n  }\n  createEventManager(cfg) {\n    return newEventManager();\n  }\n  createDatastore(cfg) {\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    const connection = newConnection(cfg.databaseInfo);\n    return newDatastore(cfg.authCredentials, cfg.appCheckCredentials, connection, serializer);\n  }\n  createRemoteStore(cfg) {\n    return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 0 /* OnlineStateSource.RemoteStore */), newConnectivityMonitor());\n  }\n  createSyncEngine(cfg, startAsPrimary) {\n    return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);\n  }\n  async terminate() {\n    var _a, _b;\n    await remoteStoreShutdown(this.remoteStore);\n    (_a = this.datastore) === null || _a === void 0 ? void 0 : _a.terminate();\n    (_b = this.eventManager) === null || _b === void 0 ? void 0 : _b.terminate();\n  }\n}\nOnlineComponentProvider.provider = {\n  build: () => new OnlineComponentProvider()\n};\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * How many bytes to read each time when `ReadableStreamReader.read()` is\n * called. Only applicable for byte streams that we control (e.g. those backed\n * by an UInt8Array).\n */\nconst DEFAULT_BYTES_PER_READ = 10240;\n/**\n * Builds a `ByteStreamReader` from a UInt8Array.\n * @param source - The data source to use.\n * @param bytesPerRead - How many bytes each `read()` from the returned reader\n *        will read.\n */\nfunction toByteStreamReaderHelper(source, bytesPerRead = DEFAULT_BYTES_PER_READ) {\n  let readFrom = 0;\n  // The TypeScript definition for ReadableStreamReader changed. We use\n  // `any` here to allow this code to compile with different versions.\n  // See https://github.com/microsoft/TypeScript/issues/42970\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const reader = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async read() {\n      if (readFrom < source.byteLength) {\n        const result = {\n          value: source.slice(readFrom, readFrom + bytesPerRead),\n          done: false\n        };\n        readFrom += bytesPerRead;\n        return result;\n      }\n      return {\n        done: true\n      };\n    },\n    async cancel() {},\n    releaseLock() {},\n    closed: Promise.resolve()\n  };\n  return reader;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction validateNonEmptyArgument(functionName, argumentName, argument) {\n  if (!argument) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() cannot be called with an empty ${argumentName}.`);\n  }\n}\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `${optionName1} and ${optionName2} cannot be used together.`);\n  }\n}\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction validateDocumentPath(path) {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`);\n  }\n}\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nfunction validateCollectionPath(path) {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`);\n  }\n}\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\nfunction isPlainObject(input) {\n  return typeof input === 'object' && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail();\n  }\n}\n/** try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n  if (input.constructor) {\n    return input.constructor.name;\n  }\n  return null;\n}\n/**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */\nfunction cast(obj,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = obj._delegate;\n  }\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' + `reference from a different Firestore SDK?`);\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Expected type '${constructor.name}', but it was: ${description}`);\n    }\n  }\n  return obj;\n}\nfunction validatePositiveNumber(functionName, n) {\n  if (n <= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires a positive number, but it was: ${n}.`);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * On Node, only supported data source is a `Uint8Array` for now.\n */\nfunction toByteStreamReader(source, bytesPerRead) {\n  if (!(source instanceof Uint8Array)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `NodePlatform.toByteStreamReader expects source to be Uint8Array, got ${valueDescription(source)}`);\n  }\n  return toByteStreamReaderHelper(source, bytesPerRead);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * A wrapper implementation of Observer<T> that will dispatch events\n * asynchronously. To allow immediate silencing, a mute call is added which\n * causes events scheduled to no longer be raised.\n */\nclass AsyncObserver {\n  constructor(observer) {\n    this.observer = observer;\n    /**\n     * When set to true, will not raise future events. Necessary to deal with\n     * async detachment of listener.\n     */\n    this.muted = false;\n  }\n  next(value) {\n    if (this.muted) {\n      return;\n    }\n    if (this.observer.next) {\n      this.scheduleEvent(this.observer.next, value);\n    }\n  }\n  error(error) {\n    if (this.muted) {\n      return;\n    }\n    if (this.observer.error) {\n      this.scheduleEvent(this.observer.error, error);\n    } else {\n      logError('Uncaught Error in snapshot listener:', error.toString());\n    }\n  }\n  mute() {\n    this.muted = true;\n  }\n  scheduleEvent(eventHandler, event) {\n    setTimeout(() => {\n      if (!this.muted) {\n        eventHandler(event);\n      }\n    }, 0);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A complete element in the bundle stream, together with the byte length it\n * occupies in the stream.\n */\nclass SizedBundleElement {\n  constructor(payload,\n  // How many bytes this element takes to store in the bundle.\n  byteLength) {\n    this.payload = payload;\n    this.byteLength = byteLength;\n  }\n  isBundleMetadata() {\n    return 'metadata' in this.payload;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class representing a bundle.\n *\n * Takes a bundle stream or buffer, and presents abstractions to read bundled\n * elements out of the underlying content.\n */\nclass BundleReaderImpl {\n  constructor(/** The reader to read from underlying binary bundle data source. */\n  reader, serializer) {\n    this.reader = reader;\n    this.serializer = serializer;\n    /** Cached bundle metadata. */\n    this.metadata = new Deferred();\n    /**\n     * Internal buffer to hold bundle content, accumulating incomplete element\n     * content.\n     */\n    this.buffer = new Uint8Array();\n    this.textDecoder = newTextDecoder();\n    // Read the metadata (which is the first element).\n    this.nextElementImpl().then(element => {\n      if (element && element.isBundleMetadata()) {\n        this.metadata.resolve(element.payload.metadata);\n      } else {\n        this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)}`));\n      }\n    }, error => this.metadata.reject(error));\n  }\n  close() {\n    return this.reader.cancel();\n  }\n  async getMetadata() {\n    return this.metadata.promise;\n  }\n  async nextElement() {\n    // Makes sure metadata is read before proceeding.\n    await this.getMetadata();\n    return this.nextElementImpl();\n  }\n  /**\n   * Reads from the head of internal buffer, and pulling more data from\n   * underlying stream if a complete element cannot be found, until an\n   * element(including the prefixed length and the JSON string) is found.\n   *\n   * Once a complete element is read, it is dropped from internal buffer.\n   *\n   * Returns either the bundled element, or null if we have reached the end of\n   * the stream.\n   */\n  async nextElementImpl() {\n    const lengthBuffer = await this.readLength();\n    if (lengthBuffer === null) {\n      return null;\n    }\n    const lengthString = this.textDecoder.decode(lengthBuffer);\n    const length = Number(lengthString);\n    if (isNaN(length)) {\n      this.raiseError(`length string (${lengthString}) is not valid number`);\n    }\n    const jsonString = await this.readJsonString(length);\n    return new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length);\n  }\n  /** First index of '{' from the underlying buffer. */\n  indexOfOpenBracket() {\n    return this.buffer.findIndex(v => v === '{'.charCodeAt(0));\n  }\n  /**\n   * Reads from the beginning of the internal buffer, until the first '{', and\n   * return the content.\n   *\n   * If reached end of the stream, returns a null.\n   */\n  async readLength() {\n    while (this.indexOfOpenBracket() < 0) {\n      const done = await this.pullMoreDataToBuffer();\n      if (done) {\n        break;\n      }\n    }\n    // Broke out of the loop because underlying stream is closed, and there\n    // happens to be no more data to process.\n    if (this.buffer.length === 0) {\n      return null;\n    }\n    const position = this.indexOfOpenBracket();\n    // Broke out of the loop because underlying stream is closed, but still\n    // cannot find an open bracket.\n    if (position < 0) {\n      this.raiseError('Reached the end of bundle when a length string is expected.');\n    }\n    const result = this.buffer.slice(0, position);\n    // Update the internal buffer to drop the read length.\n    this.buffer = this.buffer.slice(position);\n    return result;\n  }\n  /**\n   * Reads from a specified position from the internal buffer, for a specified\n   * number of bytes, pulling more data from the underlying stream if needed.\n   *\n   * Returns a string decoded from the read bytes.\n   */\n  async readJsonString(length) {\n    while (this.buffer.length < length) {\n      const done = await this.pullMoreDataToBuffer();\n      if (done) {\n        this.raiseError('Reached the end of bundle when more is expected.');\n      }\n    }\n    const result = this.textDecoder.decode(this.buffer.slice(0, length));\n    // Update the internal buffer to drop the read json string.\n    this.buffer = this.buffer.slice(length);\n    return result;\n  }\n  raiseError(message) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.reader.cancel();\n    throw new Error(`Invalid bundle format: ${message}`);\n  }\n  /**\n   * Pulls more data from underlying stream to internal buffer.\n   * Returns a boolean indicating whether the stream is finished.\n   */\n  async pullMoreDataToBuffer() {\n    const result = await this.reader.read();\n    if (!result.done) {\n      const newBuffer = new Uint8Array(this.buffer.length + result.value.length);\n      newBuffer.set(this.buffer);\n      newBuffer.set(result.value, this.buffer.length);\n      this.buffer = newBuffer;\n    }\n    return result.done;\n  }\n}\nfunction newBundleReader(reader, serializer) {\n  return new BundleReaderImpl(reader, serializer);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nclass Transaction$2 {\n  constructor(datastore) {\n    this.datastore = datastore;\n    // The version of each document that was read during this transaction.\n    this.readVersions = new Map();\n    this.mutations = [];\n    this.committed = false;\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastTransactionError = null;\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n  async lookup(keys) {\n    this.ensureCommitNotCalled();\n    if (this.mutations.length > 0) {\n      this.lastTransactionError = new FirestoreError(Code.INVALID_ARGUMENT, 'Firestore transactions require all reads to be executed before all writes.');\n      throw this.lastTransactionError;\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => this.recordVersion(doc));\n    return docs;\n  }\n  set(key, data) {\n    this.write(data.toMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n  update(key, data) {\n    try {\n      this.write(data.toMutation(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastTransactionError = e;\n    }\n    this.writtenDocs.add(key.toString());\n  }\n  delete(key) {\n    this.write(new DeleteMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n  async commit() {\n    this.ensureCommitNotCalled();\n    if (this.lastTransactionError) {\n      throw this.lastTransactionError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = DocumentKey.fromPath(path);\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n  recordVersion(doc) {\n    let docVersion;\n    if (doc.isFoundDocument()) {\n      docVersion = doc.version;\n    } else if (doc.isNoDocument()) {\n      // Represent a deleted doc using SnapshotVersion.min().\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail();\n    }\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  precondition(key) {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        return Precondition.exists(false);\n      } else {\n        return Precondition.updateTime(version);\n      }\n    } else {\n      return Precondition.none();\n    }\n  }\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  preconditionForUpdate(key) {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n  write(mutation) {\n    this.ensureCommitNotCalled();\n    this.mutations.push(mutation);\n  }\n  ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass TransactionRunner {\n  constructor(asyncQueue, datastore, options, updateFunction, deferred) {\n    this.asyncQueue = asyncQueue;\n    this.datastore = datastore;\n    this.options = options;\n    this.updateFunction = updateFunction;\n    this.deferred = deferred;\n    this.attemptsRemaining = options.maxAttempts;\n    this.backoff = new ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n  }\n  /** Runs the transaction and sets the result on deferred. */\n  run() {\n    this.attemptsRemaining -= 1;\n    this.runWithBackOff();\n  }\n  runWithBackOff() {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction$2(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise.then(result => {\n          this.asyncQueue.enqueueAndForget(() => {\n            return transaction.commit().then(() => {\n              this.deferred.resolve(result);\n            }).catch(commitError => {\n              this.handleTransactionError(commitError);\n            });\n          });\n        }).catch(userPromiseError => {\n          this.handleTransactionError(userPromiseError);\n        });\n      }\n    });\n  }\n  tryRunUpdateFunction(transaction) {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {\n        this.deferred.reject(Error('Transaction callback must return a Promise'));\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n  handleTransactionError(error) {\n    if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\n      this.attemptsRemaining -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n  isRetryableTransactionError(error) {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = error.code;\n      return code === 'aborted' || code === 'failed-precondition' || code === 'already-exists' || !isPermanentError(code);\n    }\n    return false;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$2 = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n/**\n * FirestoreClient is a top-level class that constructs and owns all of the //\n * pieces of the client SDK architecture. It is responsible for creating the //\n * async queue that is shared by all of the other components in the system. //\n */\nclass FirestoreClient {\n  constructor(authCredentials, appCheckCredentials,\n  /**\n   * Asynchronous queue responsible for all of our internal processing. When\n   * we get incoming work from the user (via public API) or the network\n   * (incoming GRPC messages), we should always schedule onto this queue.\n   * This ensures all of our work is properly serialized (e.g. we don't\n   * start processing a new operation while the previous one is waiting for\n   * an async I/O to complete).\n   */\n  asyncQueue, databaseInfo, componentProvider) {\n    this.authCredentials = authCredentials;\n    this.appCheckCredentials = appCheckCredentials;\n    this.asyncQueue = asyncQueue;\n    this.databaseInfo = databaseInfo;\n    this.user = User.UNAUTHENTICATED;\n    this.clientId = AutoId.newId();\n    this.authCredentialListener = () => Promise.resolve();\n    this.appCheckCredentialListener = () => Promise.resolve();\n    this._uninitializedComponentsProvider = componentProvider;\n    this.authCredentials.start(asyncQueue, async user => {\n      logDebug(LOG_TAG$2, 'Received user=', user.uid);\n      await this.authCredentialListener(user);\n      this.user = user;\n    });\n    this.appCheckCredentials.start(asyncQueue, newAppCheckToken => {\n      logDebug(LOG_TAG$2, 'Received new app check token=', newAppCheckToken);\n      return this.appCheckCredentialListener(newAppCheckToken, this.user);\n    });\n  }\n  get configuration() {\n    return {\n      asyncQueue: this.asyncQueue,\n      databaseInfo: this.databaseInfo,\n      clientId: this.clientId,\n      authCredentials: this.authCredentials,\n      appCheckCredentials: this.appCheckCredentials,\n      initialUser: this.user,\n      maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\n    };\n  }\n  setCredentialChangeListener(listener) {\n    this.authCredentialListener = listener;\n  }\n  setAppCheckTokenChangeListener(listener) {\n    this.appCheckCredentialListener = listener;\n  }\n  terminate() {\n    this.asyncQueue.enterRestrictedMode();\n    const deferred = new Deferred();\n    this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {\n      try {\n        if (this._onlineComponents) {\n          await this._onlineComponents.terminate();\n        }\n        if (this._offlineComponents) {\n          await this._offlineComponents.terminate();\n        }\n        // The credentials provider must be terminated after shutting down the\n        // RemoteStore as it will prevent the RemoteStore from retrieving auth\n        // tokens.\n        this.authCredentials.shutdown();\n        this.appCheckCredentials.shutdown();\n        deferred.resolve();\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to shutdown persistence`);\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n}\nasync function setOfflineComponentProvider(client, offlineComponentProvider) {\n  client.asyncQueue.verifyOperationInProgress();\n  logDebug(LOG_TAG$2, 'Initializing OfflineComponentProvider');\n  const configuration = client.configuration;\n  await offlineComponentProvider.initialize(configuration);\n  let currentUser = configuration.initialUser;\n  client.setCredentialChangeListener(async user => {\n    if (!currentUser.isEqual(user)) {\n      await localStoreHandleUserChange(offlineComponentProvider.localStore, user);\n      currentUser = user;\n    }\n  });\n  // When a user calls clearPersistence() in one client, all other clients\n  // need to be terminated to allow the delete to succeed.\n  offlineComponentProvider.persistence.setDatabaseDeletedListener(() => client.terminate());\n  client._offlineComponents = offlineComponentProvider;\n}\nasync function setOnlineComponentProvider(client, onlineComponentProvider) {\n  client.asyncQueue.verifyOperationInProgress();\n  const offlineComponents = await ensureOfflineComponents(client);\n  logDebug(LOG_TAG$2, 'Initializing OnlineComponentProvider');\n  await onlineComponentProvider.initialize(offlineComponents, client.configuration);\n  // The CredentialChangeListener of the online component provider takes\n  // precedence over the offline component provider.\n  client.setCredentialChangeListener(user => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\n  client.setAppCheckTokenChangeListener((_, user) => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\n  client._onlineComponents = onlineComponentProvider;\n}\n/**\n * Decides whether the provided error allows us to gracefully disable\n * persistence (as opposed to crashing the client).\n */\nfunction canFallbackFromIndexedDbError(error) {\n  if (error.name === 'FirebaseError') {\n    return error.code === Code.FAILED_PRECONDITION || error.code === Code.UNIMPLEMENTED;\n  } else if (typeof DOMException !== 'undefined' && error instanceof DOMException) {\n    // There are a few known circumstances where we can open IndexedDb but\n    // trying to read/write will fail (e.g. quota exceeded). For\n    // well-understood cases, we attempt to detect these and then gracefully\n    // fall back to memory persistence.\n    // NOTE: Rather than continue to add to this list, we could decide to\n    // always fall back, with the risk that we might accidentally hide errors\n    // representing actual SDK bugs.\n    return (\n      // When the browser is out of quota we could get either quota exceeded\n      // or an aborted error depending on whether the error happened during\n      // schema migration.\n      error.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error.code === DOM_EXCEPTION_ABORTED ||\n      // Firefox Private Browsing mode disables IndexedDb and returns\n      // INVALID_STATE for any usage.\n      error.code === DOM_EXCEPTION_INVALID_STATE\n    );\n  }\n  return true;\n}\nasync function ensureOfflineComponents(client) {\n  if (!client._offlineComponents) {\n    if (client._uninitializedComponentsProvider) {\n      logDebug(LOG_TAG$2, 'Using user provided OfflineComponentProvider');\n      try {\n        await setOfflineComponentProvider(client, client._uninitializedComponentsProvider._offline);\n      } catch (e) {\n        const error = e;\n        if (!canFallbackFromIndexedDbError(error)) {\n          throw error;\n        }\n        logWarn('Error using user provided cache. Falling back to ' + 'memory cache: ' + error);\n        await setOfflineComponentProvider(client, new MemoryOfflineComponentProvider());\n      }\n    } else {\n      logDebug(LOG_TAG$2, 'Using default OfflineComponentProvider');\n      await setOfflineComponentProvider(client, new LruGcMemoryOfflineComponentProvider(undefined));\n    }\n  }\n  return client._offlineComponents;\n}\nasync function ensureOnlineComponents(client) {\n  if (!client._onlineComponents) {\n    if (client._uninitializedComponentsProvider) {\n      logDebug(LOG_TAG$2, 'Using user provided OnlineComponentProvider');\n      await setOnlineComponentProvider(client, client._uninitializedComponentsProvider._online);\n    } else {\n      logDebug(LOG_TAG$2, 'Using default OnlineComponentProvider');\n      await setOnlineComponentProvider(client, new OnlineComponentProvider());\n    }\n  }\n  return client._onlineComponents;\n}\nfunction getPersistence(client) {\n  return ensureOfflineComponents(client).then(c => c.persistence);\n}\nfunction getLocalStore(client) {\n  return ensureOfflineComponents(client).then(c => c.localStore);\n}\nfunction getRemoteStore(client) {\n  return ensureOnlineComponents(client).then(c => c.remoteStore);\n}\nfunction getSyncEngine(client) {\n  return ensureOnlineComponents(client).then(c => c.syncEngine);\n}\nfunction getDatastore(client) {\n  return ensureOnlineComponents(client).then(c => c.datastore);\n}\nasync function getEventManager(client) {\n  const onlineComponentProvider = await ensureOnlineComponents(client);\n  const eventManager = onlineComponentProvider.eventManager;\n  eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onFirstRemoteStoreListen = triggerRemoteStoreListen.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onLastRemoteStoreUnlisten = triggerRemoteStoreUnlisten.bind(null, onlineComponentProvider.syncEngine);\n  return eventManager;\n}\n/** Enables the network connection and re-enqueues all pending operations. */\nfunction firestoreClientEnableNetwork(client) {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(true);\n    return remoteStoreEnableNetwork(remoteStore);\n  });\n}\n/** Disables the network connection. Pending operations will not complete. */\nfunction firestoreClientDisableNetwork(client) {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(false);\n    return remoteStoreDisableNetwork(remoteStore);\n  });\n}\n/**\n * Returns a Promise that resolves when all writes that were pending at the time\n * this method was called received server acknowledgement. An acknowledgement\n * can be either acceptance or rejection.\n */\nfunction firestoreClientWaitForPendingWrites(client) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return syncEngineRegisterPendingWritesCallback(syncEngine, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientListen(client, query, options, observer) {\n  const wrappedObserver = new AsyncObserver(observer);\n  const listener = new QueryListener(query, wrappedObserver, options);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return eventManagerListen(eventManager, listener);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return eventManagerUnlisten(eventManager, listener);\n    });\n  };\n}\nfunction firestoreClientGetDocumentFromLocalCache(client, docKey) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return readDocumentFromCache(localStore, docKey, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentViaSnapshotListener(client, key, options = {}) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentsFromLocalCache(client, query) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return executeQueryFromCache(localStore, query, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentsViaSnapshotListener(client, query, options = {}) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query, options, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientRunAggregateQuery(client, query, aggregates) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    // Implement and call executeAggregateQueryViaSnapshotListener, similar\n    // to the implementation in firestoreClientGetDocumentsViaSnapshotListener\n    // above\n    try {\n      // TODO(b/277628384): check `canUseNetwork()` and handle multi-tab.\n      const datastore = await getDatastore(client);\n      deferred.resolve(invokeRunAggregationQueryRpc(datastore, query, aggregates));\n    } catch (e) {\n      deferred.reject(e);\n    }\n  });\n  return deferred.promise;\n}\nfunction firestoreClientWrite(client, mutations) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return syncEngineWrite(syncEngine, mutations, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientAddSnapshotsInSyncListener(client, observer) {\n  const wrappedObserver = new AsyncObserver(observer);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return addSnapshotsInSyncListener(eventManager, wrappedObserver);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return removeSnapshotsInSyncListener(eventManager, wrappedObserver);\n    });\n  };\n}\n/**\n * Takes an updateFunction in which a set of reads and writes can be performed\n * atomically. In the updateFunction, the client can read and write values\n * using the supplied transaction object. After the updateFunction, all\n * changes will be committed. If a retryable error occurs (ex: some other\n * client has changed any of the data referenced), then the updateFunction\n * will be called again after a backoff. If the updateFunction still fails\n * after all retries, then the transaction will be rejected.\n *\n * The transaction object passed to the updateFunction contains methods for\n * accessing documents and collections. Unlike other datastore access, data\n * accessed with the transaction will not reflect local changes that have not\n * been committed. For this reason, it is required that all reads are\n * performed before any writes. Transactions must be performed while online.\n */\nfunction firestoreClientTransaction(client, updateFunction, options) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const datastore = await getDatastore(client);\n    new TransactionRunner(client.asyncQueue, datastore, options, updateFunction, deferred).run();\n  });\n  return deferred.promise;\n}\nasync function readDocumentFromCache(localStore, docKey, result) {\n  try {\n    const document = await localStoreReadDocument(localStore, docKey);\n    if (document.isFoundDocument()) {\n      result.resolve(document);\n    } else if (document.isNoDocument()) {\n      result.resolve(null);\n    } else {\n      result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' + \"exist on the server. Run again without setting 'source' in \" + 'the GetOptions to attempt to retrieve the document from the ' + 'server.)'));\n    }\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to get document '${docKey} from cache`);\n    result.reject(firestoreError);\n  }\n}\n/**\n * Retrieves a latency-compensated document from the backend via a\n * SnapshotListener.\n */\nfunction readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options, result) {\n  const wrappedObserver = new AsyncObserver({\n    next: snap => {\n      // Mute and remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      wrappedObserver.mute();\n      asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\n      const exists = snap.docs.has(key);\n      if (!exists && snap.fromCache) {\n        // TODO(dimond): If we're online and the document doesn't\n        // exist then we resolve with a doc.exists set to false. If\n        // we're offline however, we reject the Promise in this\n        // case. Two options: 1) Cache the negative response from\n        // the server so we can deliver that even when you're\n        // offline 2) Actually reject the Promise in the online case\n        // if the document doesn't exist.\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is offline.'));\n      } else if (exists && snap.fromCache && options && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' + 'document does exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached document.)'));\n      } else {\n        result.resolve(snap);\n      }\n    },\n    error: e => result.reject(e)\n  });\n  const listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\nasync function executeQueryFromCache(localStore, query, result) {\n  try {\n    const queryResult = await localStoreExecuteQuery(localStore, query, /* usePreviousResults= */true);\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const viewChange = view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */false);\n    result.resolve(viewChange.snapshot);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to execute query '${query} against cache`);\n    result.reject(firestoreError);\n  }\n}\n/**\n * Retrieves a latency-compensated query snapshot from the backend via a\n * SnapshotListener.\n */\nfunction executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options, result) {\n  const wrappedObserver = new AsyncObserver({\n    next: snapshot => {\n      // Mute and remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      wrappedObserver.mute();\n      asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\n      if (snapshot.fromCache && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' + 'documents may exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached documents.)'));\n      } else {\n        result.resolve(snapshot);\n      }\n    },\n    error: e => result.reject(e)\n  });\n  const listener = new QueryListener(query, wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\nfunction firestoreClientLoadBundle(client, databaseId, data, resultTask) {\n  const reader = createBundleReader(data, newSerializer(databaseId));\n  client.asyncQueue.enqueueAndForget(async () => {\n    syncEngineLoadBundle(await getSyncEngine(client), reader, resultTask);\n  });\n}\nfunction firestoreClientGetNamedQuery(client, queryName) {\n  return client.asyncQueue.enqueue(async () => localStoreGetNamedQuery(await getLocalStore(client), queryName));\n}\nfunction createBundleReader(data, serializer) {\n  let content;\n  if (typeof data === 'string') {\n    content = newTextEncoder().encode(data);\n  } else {\n    content = data;\n  }\n  return newBundleReader(toByteStreamReader(content), serializer);\n}\nfunction firestoreClientSetIndexConfiguration(client, indexes) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreConfigureFieldIndexes(await getLocalStore(client), indexes);\n  });\n}\nfunction firestoreClientSetPersistentCacheIndexAutoCreationEnabled(client, isEnabled) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreSetIndexAutoCreationEnabled(await getLocalStore(client), isEnabled);\n  });\n}\nfunction firestoreClientDeleteAllFieldIndexes(client) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreDeleteAllFieldIndexes(await getLocalStore(client));\n  });\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\nfunction longPollingOptionsEqual(options1, options2) {\n  return options1.timeoutSeconds === options2.timeoutSeconds;\n}\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction cloneLongPollingOptions(options) {\n  const clone = {};\n  if (options.timeoutSeconds !== undefined) {\n    clone.timeoutSeconds = options.timeoutSeconds;\n  }\n  return clone;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG$1 = 'ComponentProvider';\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\nconst datastoreInstances = new Map();\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\nfunction removeComponents(firestore) {\n  const datastore = datastoreInstances.get(firestore);\n  if (datastore) {\n    logDebug(LOG_TAG$1, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    datastore.terminate();\n  }\n}\nfunction makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {\n  return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, cloneLongPollingOptions(settings.experimentalLongPollingOptions), settings.useFetchStreams);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\n// The minimum long-polling timeout is hardcoded on the server. The value here\n// should be kept in sync with the value used by the server, as the server will\n// silently ignore a value below the minimum and fall back to the default.\n// Googlers see b/266868871 for relevant discussion.\nconst MIN_LONG_POLLING_TIMEOUT_SECONDS = 5;\n// No maximum long-polling timeout is configured in the server, and defaults to\n// 30 seconds, which is what Watch appears to use.\n// Googlers see b/266868871 for relevant discussion.\nconst MAX_LONG_POLLING_TIMEOUT_SECONDS = 30;\n// Whether long-polling auto-detected is enabled by default.\nconst DEFAULT_AUTO_DETECT_LONG_POLLING = true;\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n  constructor(settings) {\n    var _a, _b;\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      this.host = settings.host;\n      this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;\n    }\n    this.credentials = settings.credentials;\n    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\n    this.localCache = settings.localCache;\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n    validateIsNotUsedTogether('experimentalForceLongPolling', settings.experimentalForceLongPolling, 'experimentalAutoDetectLongPolling', settings.experimentalAutoDetectLongPolling);\n    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\n    if (this.experimentalForceLongPolling) {\n      this.experimentalAutoDetectLongPolling = false;\n    } else if (settings.experimentalAutoDetectLongPolling === undefined) {\n      this.experimentalAutoDetectLongPolling = DEFAULT_AUTO_DETECT_LONG_POLLING;\n    } else {\n      // For backwards compatibility, coerce the value to boolean even though\n      // the TypeScript compiler has narrowed the type to boolean already.\n      // noinspection PointlessBooleanExpressionJS\n      this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;\n    }\n    this.experimentalLongPollingOptions = cloneLongPollingOptions((_b = settings.experimentalLongPollingOptions) !== null && _b !== void 0 ? _b : {});\n    validateLongPollingOptions(this.experimentalLongPollingOptions);\n    this.useFetchStreams = !!settings.useFetchStreams;\n  }\n  isEqual(other) {\n    return this.host === other.host && this.ssl === other.ssl && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && longPollingOptionsEqual(this.experimentalLongPollingOptions, other.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties && this.useFetchStreams === other.useFetchStreams;\n  }\n}\nfunction validateLongPollingOptions(options) {\n  if (options.timeoutSeconds !== undefined) {\n    if (isNaN(options.timeoutSeconds)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ` + `${options.timeoutSeconds} (must not be NaN)`);\n    }\n    if (options.timeoutSeconds < MIN_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` + `(minimum allowed value is ${MIN_LONG_POLLING_TIMEOUT_SECONDS})`);\n    }\n    if (options.timeoutSeconds > MAX_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` + `(maximum allowed value is ${MAX_LONG_POLLING_TIMEOUT_SECONDS})`);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */\nclass Firestore$1 {\n  /** @hideconstructor */\n  constructor(_authCredentials, _appCheckCredentials, _databaseId, _app) {\n    this._authCredentials = _authCredentials;\n    this._appCheckCredentials = _appCheckCredentials;\n    this._databaseId = _databaseId;\n    this._app = _app;\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = 'firestore-lite';\n    this._persistenceKey = '(lite)';\n    this._settings = new FirestoreSettingsImpl({});\n    this._settingsFrozen = false;\n    // A task that is assigned when the terminate() is invoked and resolved when\n    // all components have shut down. Otherwise, Firestore is not terminated,\n    // which can mean either the FirestoreClient is in the process of starting,\n    // or restarting.\n    this._terminateTask = 'notTerminated';\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n  get app() {\n    if (!this._app) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n    return this._app;\n  }\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n  get _terminated() {\n    return this._terminateTask !== 'notTerminated';\n  }\n  _setSettings(settings) {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' + 'be changed. You can only modify settings before calling any other ' + 'methods on a Firestore object.');\n    }\n    this._settings = new FirestoreSettingsImpl(settings);\n    if (settings.credentials !== undefined) {\n      this._authCredentials = makeAuthCredentialsProvider(settings.credentials);\n    }\n  }\n  _getSettings() {\n    return this._settings;\n  }\n  _freezeSettings() {\n    this._settingsFrozen = true;\n    return this._settings;\n  }\n  _delete() {\n    // The `_terminateTask` must be assigned future that completes when\n    // terminate is complete. The existence of this future puts SDK in state\n    // that will not accept further API interaction.\n    if (this._terminateTask === 'notTerminated') {\n      this._terminateTask = this._terminate();\n    }\n    return this._terminateTask;\n  }\n  async _restart() {\n    // The `_terminateTask` must equal 'notTerminated' after restart to\n    // signal that client is in a state that accepts API calls.\n    if (this._terminateTask === 'notTerminated') {\n      await this._terminate();\n    } else {\n      this._terminateTask = 'notTerminated';\n    }\n  }\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  _terminate() {\n    removeComponents(this);\n    return Promise.resolve();\n  }\n}\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\nfunction connectFirestoreEmulator(firestore, host, port, options = {}) {\n  var _a;\n  firestore = cast(firestore, Firestore$1);\n  const settings = firestore._getSettings();\n  const newHostSetting = `${host}:${port}`;\n  if (settings.host !== DEFAULT_HOST && settings.host !== newHostSetting) {\n    logWarn('Host has been set in both settings() and connectFirestoreEmulator(), emulator host ' + 'will be used.');\n  }\n  firestore._setSettings(Object.assign(Object.assign({}, settings), {\n    host: newHostSetting,\n    ssl: false\n  }));\n  if (options.mockUserToken) {\n    let token;\n    let user;\n    if (typeof options.mockUserToken === 'string') {\n      token = options.mockUserToken;\n      user = User.MOCK_USER;\n    } else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      token = createMockUserToken(options.mockUserToken, (_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.projectId);\n      const uid = options.mockUserToken.sub || options.mockUserToken.user_id;\n      if (!uid) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      }\n      user = new User(uid);\n    }\n    firestore._authCredentials = new EmulatorAuthCredentialsProvider(new OAuthToken(token, user));\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\nclass Query {\n  // This is the lite version of the Query class in the main SDK.\n  /** @hideconstructor protected */\n  constructor(firestore,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  converter, _query) {\n    this.converter = converter;\n    this._query = _query;\n    /** The type of this Firestore reference. */\n    this.type = 'query';\n    this.firestore = firestore;\n  }\n  withConverter(converter) {\n    return new Query(this.firestore, converter, this._query);\n  }\n}\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass DocumentReference {\n  /** @hideconstructor */\n  constructor(firestore,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  converter, _key) {\n    this.converter = converter;\n    this._key = _key;\n    /** The type of this Firestore reference. */\n    this.type = 'document';\n    this.firestore = firestore;\n  }\n  get _path() {\n    return this._key.path;\n  }\n  /**\n   * The document's identifier within its collection.\n   */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  /**\n   * The collection this `DocumentReference` belongs to.\n   */\n  get parent() {\n    return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n  }\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter, this._key);\n  }\n}\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */\nclass CollectionReference extends Query {\n  /** @hideconstructor */\n  constructor(firestore, converter, _path) {\n    super(firestore, converter, newQueryForPath(_path));\n    this._path = _path;\n    /** The type of this Firestore reference. */\n    this.type = 'collection';\n  }\n  /** The collection's identifier. */\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  /**\n   * A reference to the containing `DocumentReference` if this is a\n   * subcollection. If this isn't a subcollection, the reference is null.\n   */\n  get parent() {\n    const parentPath = this._path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference(this.firestore, /* converter= */null, new DocumentKey(parentPath));\n    }\n  }\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter, this._path);\n  }\n}\nfunction collection(parent, path, ...pathSegments) {\n  parent = getModularInstance(parent);\n  validateNonEmptyArgument('collection', 'path', path);\n  if (parent instanceof Firestore$1) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent, /* converter= */null, absolutePath);\n  } else {\n    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n    const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent.firestore, /* converter= */null, absolutePath);\n  }\n}\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\nfunction collectionGroup(firestore, collectionId) {\n  firestore = cast(firestore, Firestore$1);\n  validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\n  if (collectionId.indexOf('/') >= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection ID '${collectionId}' passed to function ` + `collectionGroup(). Collection IDs must not contain '/'.`);\n  }\n  return new Query(firestore, /* converter= */null, newQueryForCollectionGroup(collectionId));\n}\nfunction doc(parent, path, ...pathSegments) {\n  parent = getModularInstance(parent);\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  if (arguments.length === 1) {\n    path = AutoId.newId();\n  }\n  validateNonEmptyArgument('doc', 'path', path);\n  if (parent instanceof Firestore$1) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(parent, /* converter= */null, new DocumentKey(absolutePath));\n  } else {\n    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n    const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(parent.firestore, parent instanceof CollectionReference ? parent.converter : null, new DocumentKey(absolutePath));\n  }\n}\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction refEqual(left, right) {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n  if ((left instanceof DocumentReference || left instanceof CollectionReference) && (right instanceof DocumentReference || right instanceof CollectionReference)) {\n    return left.firestore === right.firestore && left.path === right.path && left.converter === right.converter;\n  }\n  return false;\n}\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction queryEqual(left, right) {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n  if (left instanceof Query && right instanceof Query) {\n    return left.firestore === right.firestore && queryEquals(left._query, right._query) && left.converter === right.converter;\n  }\n  return false;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_TAG = 'AsyncQueue';\nclass AsyncQueueImpl {\n  constructor(tail = Promise.resolve()) {\n    // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.retryableOps = [];\n    // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this._isShuttingDown = false;\n    // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.delayedOperations = [];\n    // visible for testing\n    this.failure = null;\n    // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.operationInProgress = false;\n    // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.skipNonRestrictedTasks = false;\n    // List of TimerIds to fast-forward delays for.\n    this.timerIdsToSkip = [];\n    // Backoff timer used to schedule retries for retryable operations\n    this.backoff = new ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */);\n    // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.visibilityHandler = () => {\n      this.backoff.skipBackoff();\n    };\n    this.tail = tail;\n  }\n  get isShuttingDown() {\n    return this._isShuttingDown;\n  }\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget(op) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n  enqueueAndForgetEvenWhileRestricted(op) {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n  enterRestrictedMode(purgeExistingTasks) {\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      this.skipNonRestrictedTasks = purgeExistingTasks || false;\n    }\n  }\n  enqueue(op) {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise(() => {});\n    }\n    // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n    const task = new Deferred();\n    return this.enqueueInternal(() => {\n      if (this._isShuttingDown && this.skipNonRestrictedTasks) {\n        // We do not resolve 'task'\n        return Promise.resolve();\n      }\n      op().then(task.resolve, task.reject);\n      return task.promise;\n    }).then(() => task.promise);\n  }\n  enqueueRetryable(op) {\n    this.enqueueAndForget(() => {\n      this.retryableOps.push(op);\n      return this.retryNextOp();\n    });\n  }\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  async retryNextOp() {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n  enqueueInternal(op) {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op().catch(error => {\n        this.failure = error;\n        this.operationInProgress = false;\n        const message = getMessageOrStack(error);\n        logError('INTERNAL UNHANDLED ERROR: ', message);\n        // Re-throw the error so that this.tail becomes a rejected Promise and\n        // all further attempts to chain (via .then) will just short-circuit\n        // and return the rejected Promise.\n        throw error;\n      }).then(result => {\n        this.operationInProgress = false;\n        return result;\n      });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n  enqueueAfterDelay(timerId, delayMs, op) {\n    this.verifyNotFailed();\n    // Fast-forward delays for timerIds that have been overridden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n    const delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, removedOp => this.removeDelayedOperation(removedOp));\n    this.delayedOperations.push(delayedOp);\n    return delayedOp;\n  }\n  verifyNotFailed() {\n    if (this.failure) {\n      fail();\n    }\n  }\n  verifyOperationInProgress() {}\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async drain() {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  containsDelayedOperation(timerId) {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId - Delayed operations up to and including this TimerId\n   * will be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  runAllDelayedOperationsUntil(lastTimerId) {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== \"all\" /* TimerId.All */ && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n      return this.drain();\n    });\n  }\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  skipDelaysForTimerId(timerId) {\n    this.timerIdsToSkip.push(timerId);\n  }\n  /** Called once a DelayedOperation is run or canceled. */\n  removeDelayedOperation(op) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n    this.delayedOperations.splice(index, 1);\n  }\n}\n/**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\nfunction getMessageOrStack(error) {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents the task of loading a Firestore bundle. It provides progress of bundle\n * loading, as well as task completion and error events.\n *\n * The API is compatible with `Promise<LoadBundleTaskProgress>`.\n */\nclass LoadBundleTask {\n  constructor() {\n    this._progressObserver = {};\n    this._taskCompletionResolver = new Deferred();\n    this._lastProgress = {\n      taskState: 'Running',\n      totalBytes: 0,\n      totalDocuments: 0,\n      bytesLoaded: 0,\n      documentsLoaded: 0\n    };\n  }\n  /**\n   * Registers functions to listen to bundle loading progress events.\n   * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur\n   *   each time a Firestore document is loaded from the bundle.\n   * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the\n   *   error, and there should be no more updates after this.\n   * @param complete - Called when the loading task is complete.\n   */\n  onProgress(next, error, complete) {\n    this._progressObserver = {\n      next,\n      error,\n      complete\n    };\n  }\n  /**\n   * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\n   *\n   * @param onRejected - Called when an error occurs during bundle loading.\n   */\n  catch(onRejected) {\n    return this._taskCompletionResolver.promise.catch(onRejected);\n  }\n  /**\n   * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\n   *\n   * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\n   *   The update will always have its `taskState` set to `\"Success\"`.\n   * @param onRejected - Called when an error occurs during bundle loading.\n   */\n  then(onFulfilled, onRejected) {\n    return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\n  }\n  /**\n   * Notifies all observers that bundle loading has completed, with a provided\n   * `LoadBundleTaskProgress` object.\n   *\n   * @private\n   */\n  _completeWith(progress) {\n    this._updateProgress(progress);\n    if (this._progressObserver.complete) {\n      this._progressObserver.complete();\n    }\n    this._taskCompletionResolver.resolve(progress);\n  }\n  /**\n   * Notifies all observers that bundle loading has failed, with a provided\n   * `Error` as the reason.\n   *\n   * @private\n   */\n  _failWith(error) {\n    this._lastProgress.taskState = 'Error';\n    if (this._progressObserver.next) {\n      this._progressObserver.next(this._lastProgress);\n    }\n    if (this._progressObserver.error) {\n      this._progressObserver.error(error);\n    }\n    this._taskCompletionResolver.reject(error);\n  }\n  /**\n   * Notifies a progress update of loading a bundle.\n   * @param progress - The new progress.\n   *\n   * @private\n   */\n  _updateProgress(progress) {\n    this._lastProgress = progress;\n    if (this._progressObserver.next) {\n      this._progressObserver.next(progress);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Constant used to indicate the LRU garbage collection should be disabled.\n * Set this value as the `cacheSizeBytes` on the settings passed to the\n * {@link Firestore} instance.\n */\nconst CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */\nclass Firestore extends Firestore$1 {\n  /** @hideconstructor */\n  constructor(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app) {\n    super(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app);\n    /**\n     * Whether it's a {@link Firestore} or Firestore Lite instance.\n     */\n    this.type = 'firestore';\n    this._queue = new AsyncQueueImpl();\n    this._persistenceKey = (app === null || app === void 0 ? void 0 : app.name) || '[DEFAULT]';\n  }\n  async _terminate() {\n    if (this._firestoreClient) {\n      const terminate = this._firestoreClient.terminate();\n      this._queue = new AsyncQueueImpl(terminate);\n      this._firestoreClient = undefined;\n      await terminate;\n    }\n  }\n}\n/**\n * Initializes a new instance of {@link Firestore} with the provided settings.\n * Can only be called before any other function, including\n * {@link (getFirestore:1)}. If the custom settings are empty, this function is\n * equivalent to calling {@link (getFirestore:1)}.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will\n * be associated.\n * @param settings - A settings object to configure the {@link Firestore} instance.\n * @param databaseId - The name of the database.\n * @returns A newly initialized {@link Firestore} instance.\n */\nfunction initializeFirestore(app, settings, databaseId) {\n  if (!databaseId) {\n    databaseId = DEFAULT_DATABASE_NAME;\n  }\n  const provider = _getProvider(app, 'firestore');\n  if (provider.isInitialized(databaseId)) {\n    const existingInstance = provider.getImmediate({\n      identifier: databaseId\n    });\n    const initialSettings = provider.getOptions(databaseId);\n    if (deepEqual(initialSettings, settings)) {\n      return existingInstance;\n    } else {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'initializeFirestore() has already been called with ' + 'different options. To avoid this error, call initializeFirestore() with the ' + 'same options as when it was originally called, or call getFirestore() to return the' + ' already initialized instance.');\n    }\n  }\n  if (settings.cacheSizeBytes !== undefined && settings.localCache !== undefined) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes will` + `be deprecated. Instead, specify the cache size in the cache object`);\n  }\n  if (settings.cacheSizeBytes !== undefined && settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\n  }\n  return provider.initialize({\n    options: settings,\n    instanceIdentifier: databaseId\n  });\n}\nfunction getFirestore(appOrDatabaseId, optionalDatabaseId) {\n  const app = typeof appOrDatabaseId === 'object' ? appOrDatabaseId : getApp();\n  const databaseId = typeof appOrDatabaseId === 'string' ? appOrDatabaseId : optionalDatabaseId || DEFAULT_DATABASE_NAME;\n  const db = _getProvider(app, 'firestore').getImmediate({\n    identifier: databaseId\n  });\n  if (!db._initialized) {\n    const emulator = getDefaultEmulatorHostnameAndPort('firestore');\n    if (emulator) {\n      connectFirestoreEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n/**\n * @internal\n */\nfunction ensureFirestoreConfigured(firestore) {\n  if (firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n  }\n  if (!firestore._firestoreClient) {\n    configureFirestore(firestore);\n  }\n  return firestore._firestoreClient;\n}\nfunction configureFirestore(firestore) {\n  var _a, _b, _c;\n  const settings = firestore._freezeSettings();\n  const databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || '', firestore._persistenceKey, settings);\n  if (!firestore._componentsProvider) {\n    if (((_b = settings.localCache) === null || _b === void 0 ? void 0 : _b._offlineComponentProvider) && ((_c = settings.localCache) === null || _c === void 0 ? void 0 : _c._onlineComponentProvider)) {\n      firestore._componentsProvider = {\n        _offline: settings.localCache._offlineComponentProvider,\n        _online: settings.localCache._onlineComponentProvider\n      };\n    }\n  }\n  firestore._firestoreClient = new FirestoreClient(firestore._authCredentials, firestore._appCheckCredentials, firestore._queue, databaseInfo, firestore._componentsProvider && buildComponentProvider(firestore._componentsProvider));\n}\nfunction buildComponentProvider(componentsProvider) {\n  const online = componentsProvider === null || componentsProvider === void 0 ? void 0 : componentsProvider._online.build();\n  return {\n    _offline: componentsProvider === null || componentsProvider === void 0 ? void 0 : componentsProvider._offline.build(online),\n    _online: online\n  };\n}\n/**\n * Attempts to enable persistent storage, if possible.\n *\n * On failure, `enableIndexedDbPersistence()` will reject the promise or\n * throw an exception. There are several reasons why this can fail, which can be\n * identified by the `code` on the error.\n *\n *   * failed-precondition: The app is already open in another browser tab.\n *   * unimplemented: The browser is incompatible with the offline persistence\n *     implementation.\n *\n * Note that even after a failure, the {@link Firestore} instance will remain\n * usable, however offline persistence will be disabled.\n *\n * Note: `enableIndexedDbPersistence()` must be called before any other functions\n * (other than {@link initializeFirestore}, {@link (getFirestore:1)} or\n * {@link clearIndexedDbPersistence}.\n *\n * Persistence cannot be used in a Node.js environment.\n *\n * @param firestore - The {@link Firestore} instance to enable persistence for.\n * @param persistenceSettings - Optional settings object to configure\n * persistence.\n * @returns A `Promise` that represents successfully enabling persistent storage.\n * @deprecated This function will be removed in a future major release. Instead, set\n * `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to\n * turn on IndexedDb cache. Calling this function when `FirestoreSettings.localCache`\n * is already specified will throw an exception.\n */\nfunction enableIndexedDbPersistence(firestore, persistenceSettings) {\n  logWarn('enableIndexedDbPersistence() will be deprecated in the future, ' + 'you can use `FirestoreSettings.cache` instead.');\n  const settings = firestore._freezeSettings();\n  setPersistenceProviders(firestore, OnlineComponentProvider.provider, {\n    build: onlineComponents => new IndexedDbOfflineComponentProvider(onlineComponents, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership)\n  });\n  return Promise.resolve();\n}\n/**\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\n * across all tabs, all operations share access to local persistence, including\n * shared execution of queries and latency-compensated local document updates\n * across all connected instances.\n *\n * On failure, `enableMultiTabIndexedDbPersistence()` will reject the promise or\n * throw an exception. There are several reasons why this can fail, which can be\n * identified by the `code` on the error.\n *\n *   * failed-precondition: The app is already open in another browser tab and\n *     multi-tab is not enabled.\n *   * unimplemented: The browser is incompatible with the offline persistence\n *     implementation.\n *\n * Note that even after a failure, the {@link Firestore} instance will remain\n * usable, however offline persistence will be disabled.\n *\n * @param firestore - The {@link Firestore} instance to enable persistence for.\n * @returns A `Promise` that represents successfully enabling persistent\n * storage.\n * @deprecated This function will be removed in a future major release. Instead, set\n * `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to\n * turn on indexeddb cache. Calling this function when `FirestoreSettings.localCache`\n * is already specified will throw an exception.\n */\nasync function enableMultiTabIndexedDbPersistence(firestore) {\n  logWarn('enableMultiTabIndexedDbPersistence() will be deprecated in the future, ' + 'you can use `FirestoreSettings.cache` instead.');\n  const settings = firestore._freezeSettings();\n  setPersistenceProviders(firestore, OnlineComponentProvider.provider, {\n    build: onlineComponents => new MultiTabOfflineComponentProvider(onlineComponents, settings.cacheSizeBytes)\n  });\n}\n/**\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\n * If the operation fails with a recoverable error (see\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\n * but the client remains usable.\n */\nfunction setPersistenceProviders(firestore, onlineComponentProvider, offlineComponentProvider) {\n  firestore = cast(firestore, Firestore);\n  if (firestore._firestoreClient || firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer be ' + 'enabled. You can only enable persistence before calling any other ' + 'methods on a Firestore object.');\n  }\n  if (firestore._componentsProvider || firestore._getSettings().localCache) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'SDK cache is already specified.');\n  }\n  firestore._componentsProvider = {\n    _online: onlineComponentProvider,\n    _offline: offlineComponentProvider\n  };\n  configureFirestore(firestore);\n}\n/**\n * Clears the persistent storage. This includes pending writes and cached\n * documents.\n *\n * Must be called while the {@link Firestore} instance is not started (after the app is\n * terminated or when the app is first initialized). On startup, this function\n * must be called before other functions (other than {@link\n * initializeFirestore} or {@link (getFirestore:1)})). If the {@link Firestore}\n * instance is still running, the promise will be rejected with the error code\n * of `failed-precondition`.\n *\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\n * dropping existing data but does not attempt to securely overwrite or\n * otherwise make cached data unrecoverable. For applications that are sensitive\n * to the disclosure of cached data in between user sessions, we strongly\n * recommend not enabling persistence at all.\n *\n * @param firestore - The {@link Firestore} instance to clear persistence for.\n * @returns A `Promise` that is resolved when the persistent storage is\n * cleared. Otherwise, the promise is rejected with an error.\n */\nfunction clearIndexedDbPersistence(firestore) {\n  if (firestore._initialized && !firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence can only be cleared before a Firestore instance is ' + 'initialized or after it is terminated.');\n  }\n  const deferred = new Deferred();\n  firestore._queue.enqueueAndForgetEvenWhileRestricted(async () => {\n    try {\n      await indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey));\n      deferred.resolve();\n    } catch (e) {\n      deferred.reject(e);\n    }\n  });\n  return deferred.promise;\n}\n/**\n * Waits until all currently pending writes for the active user have been\n * acknowledged by the backend.\n *\n * The returned promise resolves immediately if there are no outstanding writes.\n * Otherwise, the promise waits for all previously issued writes (including\n * those written in a previous app session), but it does not wait for writes\n * that were added after the function is called. If you want to wait for\n * additional writes, call `waitForPendingWrites()` again.\n *\n * Any outstanding `waitForPendingWrites()` promises are rejected during user\n * changes.\n *\n * @returns A `Promise` which resolves when all currently pending writes have been\n * acknowledged by the backend.\n */\nfunction waitForPendingWrites(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWaitForPendingWrites(client);\n}\n/**\n * Re-enables use of the network for this {@link Firestore} instance after a prior\n * call to {@link disableNetwork}.\n *\n * @returns A `Promise` that is resolved once the network has been enabled.\n */\nfunction enableNetwork(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientEnableNetwork(client);\n}\n/**\n * Disables network usage for this instance. It can be re-enabled via {@link\n * enableNetwork}. While the network is disabled, any snapshot listeners,\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\n * operations will be queued until the network is restored.\n *\n * @returns A `Promise` that is resolved once the network has been disabled.\n */\nfunction disableNetwork(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientDisableNetwork(client);\n}\n/**\n * Terminates the provided {@link Firestore} instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` function\n * may be used. Any other function will throw a `FirestoreError`.\n *\n * To restart after termination, create a new instance of FirebaseFirestore with\n * {@link (getFirestore:1)}.\n *\n * Termination does not cancel any pending writes, and any promises that are\n * awaiting a response from the server will not be resolved. If you have\n * persistence enabled, the next time you start this instance, it will resume\n * sending these writes to the server.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all\n * of its resources or in combination with `clearIndexedDbPersistence()` to\n * ensure that all local state is destroyed between test runs.\n *\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\nfunction terminate(firestore) {\n  _removeServiceInstance(firestore.app, 'firestore', firestore._databaseId.database);\n  return firestore._delete();\n}\n/**\n * Loads a Firestore bundle into the local cache.\n *\n * @param firestore - The {@link Firestore} instance to load bundles for.\n * @param bundleData - An object representing the bundle to be loaded. Valid\n * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.\n *\n * @returns A `LoadBundleTask` object, which notifies callers with progress\n * updates, and completion or error events. It can be used as a\n * `Promise<LoadBundleTaskProgress>`.\n */\nfunction loadBundle(firestore, bundleData) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const resultTask = new LoadBundleTask();\n  firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);\n  return resultTask;\n}\n/**\n * Reads a Firestore {@link Query} from local cache, identified by the given\n * name.\n *\n * The named queries are packaged  into bundles on the server side (along\n * with resulting documents), and loaded to local cache using `loadBundle`. Once\n * in local cache, use this method to extract a {@link Query} by name.\n *\n * @param firestore - The {@link Firestore} instance to read the query from.\n * @param name - The name of the query.\n * @returns A `Promise` that is resolved with the Query or `null`.\n */\nfunction namedQuery(firestore, name) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetNamedQuery(client, name).then(namedQuery => {\n    if (!namedQuery) {\n      return null;\n    }\n    return new Query(firestore, null, namedQuery.query);\n  });\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerFirestore(variant, useFetchStreams = true) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('firestore', (container, {\n    instanceIdentifier: databaseId,\n    options: settings\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const firestoreInstance = new Firestore(new FirebaseAuthCredentialsProvider(container.getProvider('auth-internal')), new FirebaseAppCheckTokenProvider(container.getProvider('app-check-internal')), databaseIdFromApp(app, databaseId), app);\n    settings = Object.assign({\n      useFetchStreams\n    }, settings);\n    firestoreInstance._setSettings(settings);\n    return firestoreInstance;\n  }, 'PUBLIC').setMultipleInstances(true));\n  registerVersion(name, version$1, variant);\n  // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation\n  registerVersion(name, version$1, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass AggregateImpl {\n  constructor(alias, aggregateType, fieldPath) {\n    this.alias = alias;\n    this.aggregateType = aggregateType;\n    this.fieldPath = fieldPath;\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n  /**\n   * Create a new AggregateField<T>\n   * @param aggregateType Specifies the type of aggregation operation to perform.\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\n   * @internal\n   */\n  constructor(aggregateType = 'count', _internalFieldPath) {\n    this._internalFieldPath = _internalFieldPath;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'AggregateField';\n    this.aggregateType = aggregateType;\n  }\n}\n/**\n * The results of executing an aggregation query.\n */\nclass AggregateQuerySnapshot {\n  /** @hideconstructor */\n  constructor(query, _userDataWriter, _data) {\n    this._userDataWriter = _userDataWriter;\n    this._data = _data;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'AggregateQuerySnapshot';\n    this.query = query;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */\nclass Bytes {\n  /** @hideconstructor */\n  constructor(byteString) {\n    this._byteString = byteString;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n  static fromBase64String(base64) {\n    try {\n      return new Bytes(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct data from Base64 string: ' + e);\n    }\n  }\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array - The Uint8Array used to create the `Bytes` object.\n   */\n  static fromUint8Array(array) {\n    return new Bytes(ByteString.fromUint8Array(array));\n  }\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @returns The Base64-encoded string created from the `Bytes` object.\n   */\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @returns The Uint8Array created from the `Bytes` object.\n   */\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @returns A string representation of the `Bytes` object.\n   */\n  toString() {\n    return 'Bytes(base64: ' + this.toBase64() + ')';\n  }\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other - The `Bytes` object to compare against.\n   * @returns true if this `Bytes` object is equal to the provided one.\n   */\n  isEqual(other) {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\nclass FieldPath {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...fieldNames) {\n    for (let i = 0; i < fieldNames.length; ++i) {\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field name at argument $(i + 1). ` + 'Field names must not be empty.');\n      }\n    }\n    this._internalPath = new FieldPath$1(fieldNames);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n  isEqual(other) {\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\nfunction documentId() {\n  return new FieldPath(DOCUMENT_KEY_NAME);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nclass FieldValue {\n  /**\n   * @param _methodName - The public API endpoint that returns this class.\n   * @hideconstructor\n   */\n  constructor(_methodName) {\n    this._methodName = _methodName;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nclass GeoPoint {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  constructor(latitude, longitude) {\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n    }\n    this._lat = latitude;\n    this._long = longitude;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  get latitude() {\n    return this._lat;\n  }\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n  get longitude() {\n    return this._long;\n  }\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other - The `GeoPoint` to compare against.\n   * @returns true if this `GeoPoint` is equal to the provided one.\n   */\n  isEqual(other) {\n    return this._lat === other._lat && this._long === other._long;\n  }\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(other) {\n    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);\n  }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a vector type in Firestore documents.\n * Create an instance with {@link FieldValue.vector}.\n *\n * @class VectorValue\n */\nclass VectorValue {\n  /**\n   * @private\n   * @internal\n   */\n  constructor(values) {\n    // Making a copy of the parameter.\n    this._values = (values || []).map(n => n);\n  }\n  /**\n   * Returns a copy of the raw number array form of the vector.\n   */\n  toArray() {\n    return this._values.map(n => n);\n  }\n  /**\n   * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\n   */\n  isEqual(other) {\n    return isPrimitiveArrayEqual(this._values, other._values);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nclass ParsedSetData {\n  constructor(data, fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n  toMutation(key, precondition) {\n    if (this.fieldMask !== null) {\n      return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n    } else {\n      return new SetMutation(key, this.data, precondition, this.fieldTransforms);\n    }\n  }\n}\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nclass ParsedUpdateData {\n  constructor(data,\n  // The fieldMask does not include document transforms.\n  fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n  toMutation(key, precondition) {\n    return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n  }\n}\nfunction isWrite(dataSource) {\n  switch (dataSource) {\n    case 0 /* UserDataSource.Set */: // fall through\n    case 2 /* UserDataSource.MergeSet */: // fall through\n    case 1 /* UserDataSource.Update */:\n      return true;\n    case 3 /* UserDataSource.Argument */:\n    case 4 /* UserDataSource.ArrayArgument */:\n      return false;\n    default:\n      throw fail();\n  }\n}\n/** A \"context\" object passed around while parsing user data. */\nclass ParseContextImpl {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {\n    this.settings = settings;\n    this.databaseId = databaseId;\n    this.serializer = serializer;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties;\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n  get path() {\n    return this.settings.path;\n  }\n  get dataSource() {\n    return this.settings.dataSource;\n  }\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration) {\n    return new ParseContextImpl(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n  childContextForField(field) {\n    var _a;\n    const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    const context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePathSegment(field);\n    return context;\n  }\n  childContextForFieldPath(field) {\n    var _a;\n    const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    const context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePath();\n    return context;\n  }\n  childContextForArray(index) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({\n      path: undefined,\n      arrayElement: true\n    });\n  }\n  createError(reason) {\n    return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);\n  }\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath) {\n    return this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined || this.fieldTransforms.find(transform => fieldPath.isPrefixOf(transform.field)) !== undefined;\n  }\n  validatePath() {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n  validatePathSegment(segment) {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nclass UserDataReader {\n  constructor(databaseId, ignoreUndefinedProperties, serializer) {\n    this.databaseId = databaseId;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties;\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n  /** Creates a new top-level parse context. */\n  createContext(dataSource, methodName, targetDoc, hasConverter = false) {\n    return new ParseContextImpl({\n      dataSource,\n      methodName,\n      targetDoc,\n      path: FieldPath$1.emptyPath(),\n      arrayElement: false,\n      hasConverter\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n}\nfunction newUserDataReader(firestore) {\n  const settings = firestore._freezeSettings();\n  const serializer = newSerializer(firestore._databaseId);\n  return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);\n}\n/** Parse document data from a set() call. */\nfunction parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options = {}) {\n  const context = userDataReader.createContext(options.merge || options.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */, methodName, targetDoc, hasConverter);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context);\n  let fieldMask;\n  let fieldTransforms;\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths = [];\n    for (const stringOrFieldPath of options.mergeFields) {\n      const fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Field '${fieldPath}' is specified in your field mask but missing from your input data.`);\n      }\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform => fieldMask.covers(transform.field));\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n  return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);\n}\nclass DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(context) {\n    if (context.dataSource === 2 /* UserDataSource.MergeSet */) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path);\n    } else if (context.dataSource === 1 /* UserDataSource.Update */) {\n      throw context.createError(`${this._methodName}() can only appear at the top level ` + 'of your update data');\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(`${this._methodName}() cannot be used with set() unless you pass ` + '{merge:true}');\n    }\n    return null;\n  }\n  isEqual(other) {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\nfunction createSentinelChildContext(fieldValue, context, arrayElement) {\n  return new ParseContextImpl({\n    dataSource: 3 /* UserDataSource.Argument */,\n    targetDoc: context.settings.targetDoc,\n    methodName: fieldValue._methodName,\n    arrayElement\n  }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);\n}\nclass ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(context) {\n    return new FieldTransform(context.path, new ServerTimestampTransform());\n  }\n  isEqual(other) {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\nclass ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(methodName, _elements) {\n    super(methodName);\n    this._elements = _elements;\n  }\n  _toFieldTransform(context) {\n    const parseContext = createSentinelChildContext(this, context, /*array=*/true);\n    const parsedElements = this._elements.map(element => parseData(element, parseContext));\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  }\n  isEqual(other) {\n    return other instanceof ArrayUnionFieldValueImpl && deepEqual(this._elements, other._elements);\n  }\n}\nclass ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(methodName, _elements) {\n    super(methodName);\n    this._elements = _elements;\n  }\n  _toFieldTransform(context) {\n    const parseContext = createSentinelChildContext(this, context, /*array=*/true);\n    const parsedElements = this._elements.map(element => parseData(element, parseContext));\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  }\n  isEqual(other) {\n    return other instanceof ArrayRemoveFieldValueImpl && deepEqual(this._elements, other._elements);\n  }\n}\nclass NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(methodName, _operand) {\n    super(methodName);\n    this._operand = _operand;\n  }\n  _toFieldTransform(context) {\n    const numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));\n    return new FieldTransform(context.path, numericIncrement);\n  }\n  isEqual(other) {\n    return other instanceof NumericIncrementFieldValueImpl && this._operand === other._operand;\n  }\n}\n/** Parse update data from an update() call. */\nfunction parseUpdateData(userDataReader, methodName, targetDoc, input) {\n  const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const fieldMaskPaths = [];\n  const updateData = ObjectValue.empty();\n  forEach(input, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    value = getModularInstance(value);\n    const childContext = context.childContextForFieldPath(path);\n    if (value instanceof DeleteFieldValueImpl) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/** Parse update data from a list of field/value arguments. */\nfunction parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {\n  const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\n  const keys = [fieldPathFromArgument$1(methodName, field, targetDoc)];\n  const values = [value];\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${methodName}() needs to be called with an even number ` + 'of arguments that alternate between field names and values.');\n  }\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n  const fieldMaskPaths = [];\n  const updateData = ObjectValue.empty();\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      let value = values[i];\n      // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n      value = getModularInstance(value);\n      const childContext = context.childContextForFieldPath(path);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nfunction parseQueryValue(userDataReader, methodName, input, allowArrays = false) {\n  const context = userDataReader.createContext(allowArrays ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, methodName);\n  const parsed = parseData(input, context);\n  return parsed;\n}\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nfunction parseData(input, context) {\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  input = getModularInstance(input);\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof FieldValue) {\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else if (input === undefined && context.ignoreUndefinedProperties) {\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (context.settings.arrayElement && context.dataSource !== 4 /* UserDataSource.ArrayArgument */) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input, context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\nfunction parseObject(obj, context) {\n  const fields = {};\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key, val) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n  return {\n    mapValue: {\n      fields\n    }\n  };\n}\nfunction parseArray(array, context) {\n  const values = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(entry, context.childContextForArray(entryIndex));\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\nfunction parseSentinelFieldValue(value, context) {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(`${value._methodName}() can only be used with update() and set()`);\n  }\n  if (!context.path) {\n    throw context.createError(`${value._methodName}() is not currently supported inside arrays`);\n  }\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n/**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */\nfunction parseScalarValue(value, context) {\n  value = getModularInstance(value);\n  if (value === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return {\n      booleanValue: value\n    };\n  } else if (typeof value === 'string') {\n    return {\n      stringValue: value\n    };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Bytes) {\n    return {\n      bytesValue: toBytes(context.serializer, value._byteString)\n    };\n  } else if (value instanceof DocumentReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value.firestore._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError('Document reference is for database ' + `${otherDb.projectId}/${otherDb.database} but should be ` + `for database ${thisDb.projectId}/${thisDb.database}`);\n    }\n    return {\n      referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)\n    };\n  } else if (value instanceof VectorValue) {\n    return parseVectorValue(value, context);\n  } else {\n    throw context.createError(`Unsupported field value: ${valueDescription(value)}`);\n  }\n}\n/**\n * Creates a new VectorValue proto value (using the internal format).\n */\nfunction parseVectorValue(value, context) {\n  const mapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: VECTOR_VALUE_SENTINEL\n      },\n      [VECTOR_MAP_VECTORS_KEY]: {\n        arrayValue: {\n          values: value.toArray().map(value => {\n            if (typeof value !== 'number') {\n              throw context.createError('VectorValues must only contain numeric values.');\n            }\n            return toDouble(context.serializer, value);\n          })\n        }\n      }\n    }\n  };\n  return {\n    mapValue\n  };\n}\n/**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */\nfunction looksLikeJsonObject(input) {\n  return typeof input === 'object' && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof DocumentReference) && !(input instanceof FieldValue) && !(input instanceof VectorValue);\n}\nfunction validatePlainObject(message, context, input) {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction fieldPathFromArgument$1(methodName, path, targetDoc) {\n  // If required, replace the FieldPath Compat class with the firestore-exp\n  // FieldPath.\n  path = getModularInstance(path);\n  if (path instanceof FieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or ';\n    throw createError(message, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n}\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\nfunction fieldPathFromDotSeparatedString(methodName, path, targetDoc) {\n  const found = path.search(FIELD_PATH_RESERVED);\n  if (found >= 0) {\n    throw createError(`Invalid field path (${path}). Paths must not contain ` + `'~', '*', '/', '[', or ']'`, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n  try {\n    return new FieldPath(...path.split('.'))._internalPath;\n  } catch (e) {\n    throw createError(`Invalid field path (${path}). Paths must not be empty, ` + `begin with '.', end with '.', or contain '..'`, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n}\nfunction createError(reason, methodName, hasConverter, path, targetDoc) {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n  return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);\n}\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack, needle) {\n  return haystack.some(v => v.isEqual(needle));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nclass DocumentSnapshot$1 {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n  /** @hideconstructor protected */\n  constructor(_firestore, _userDataWriter, _key, _document, _converter) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._key = _key;\n    this._document = _document;\n    this._converter = _converter;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n   */\n  get ref() {\n    return new DocumentReference(this._firestore, this._converter, this._key);\n  }\n  /**\n   * Signals whether or not the document at the snapshot's location exists.\n   *\n   * @returns true if the document exists.\n   */\n  exists() {\n    return this._document !== null;\n  }\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * @returns An `Object` containing all fields in the document or `undefined`\n   * if the document doesn't exist.\n   */\n  data() {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */null);\n      return this._converter.fromFirestore(snapshot);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(fieldPath) {\n    if (this._document) {\n      const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n}\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nclass QueryDocumentSnapshot$1 extends DocumentSnapshot$1 {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * @override\n   * @returns An `Object` containing all fields in the document.\n   */\n  data() {\n    return super.data();\n  }\n}\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\nfunction fieldPathFromArgument(methodName, arg) {\n  if (typeof arg === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, arg);\n  } else if (arg instanceof FieldPath) {\n    return arg._internalPath;\n  } else {\n    return arg._delegate._internalPath;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction validateHasExplicitOrderByForLimitToLast(query) {\n  if (query.limitType === \"L\" /* LimitType.Last */ && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'limitToLast() queries require specifying at least one orderBy() clause');\n  }\n}\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint extends AppliableConstraint {}\nfunction query(query, queryConstraint, ...additionalQueryConstraints) {\n  let queryConstraints = [];\n  if (queryConstraint instanceof AppliableConstraint) {\n    queryConstraints.push(queryConstraint);\n  }\n  queryConstraints = queryConstraints.concat(additionalQueryConstraints);\n  validateQueryConstraintArray(queryConstraints);\n  for (const constraint of queryConstraints) {\n    query = constraint._apply(query);\n  }\n  return query;\n}\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\nclass QueryFieldFilterConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(_field, _op, _value) {\n    super();\n    this._field = _field;\n    this._op = _op;\n    this._value = _value;\n    /** The type of this query constraint */\n    this.type = 'where';\n  }\n  static _create(_field, _op, _value) {\n    return new QueryFieldFilterConstraint(_field, _op, _value);\n  }\n  _apply(query) {\n    const filter = this._parse(query);\n    validateNewFieldFilter(query._query, filter);\n    return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, filter));\n  }\n  _parse(query) {\n    const reader = newUserDataReader(query.firestore);\n    const filter = newQueryFilter(query._query, 'where', reader, query.firestore._databaseId, this._field, this._op, this._value);\n    return filter;\n  }\n}\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\nfunction where(fieldPath, opStr, value) {\n  const op = opStr;\n  const field = fieldPathFromArgument('where', fieldPath);\n  return QueryFieldFilterConstraint._create(field, op, value);\n}\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */\nclass QueryCompositeFilterConstraint extends AppliableConstraint {\n  /**\n   * @internal\n   */\n  constructor(/** The type of this query constraint */\n  type, _queryConstraints) {\n    super();\n    this.type = type;\n    this._queryConstraints = _queryConstraints;\n  }\n  static _create(type, _queryConstraints) {\n    return new QueryCompositeFilterConstraint(type, _queryConstraints);\n  }\n  _parse(query) {\n    const parsedFilters = this._queryConstraints.map(queryConstraint => {\n      return queryConstraint._parse(query);\n    }).filter(parsedFilter => parsedFilter.getFilters().length > 0);\n    if (parsedFilters.length === 1) {\n      return parsedFilters[0];\n    }\n    return CompositeFilter.create(parsedFilters, this._getOperator());\n  }\n  _apply(query) {\n    const parsedFilter = this._parse(query);\n    if (parsedFilter.getFilters().length === 0) {\n      // Return the existing query if not adding any more filters (e.g. an empty\n      // composite filter).\n      return query;\n    }\n    validateNewFilter(query._query, parsedFilter);\n    return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, parsedFilter));\n  }\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n  _getOperator() {\n    return this.type === 'and' ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n  }\n}\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction or(...queryConstraints) {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('or', queryConstraint));\n  return QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */, queryConstraints);\n}\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction and(...queryConstraints) {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('and', queryConstraint));\n  return QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */, queryConstraints);\n}\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\nclass QueryOrderByConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(_field, _direction) {\n    super();\n    this._field = _field;\n    this._direction = _direction;\n    /** The type of this query constraint */\n    this.type = 'orderBy';\n  }\n  static _create(_field, _direction) {\n    return new QueryOrderByConstraint(_field, _direction);\n  }\n  _apply(query) {\n    const orderBy = newQueryOrderBy(query._query, this._field, this._direction);\n    return new Query(query.firestore, query.converter, queryWithAddedOrderBy(query._query, orderBy));\n  }\n}\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\nfunction orderBy(fieldPath, directionStr = 'asc') {\n  const direction = directionStr;\n  const path = fieldPathFromArgument('orderBy', fieldPath);\n  return QueryOrderByConstraint._create(path, direction);\n}\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\nclass QueryLimitConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(/** The type of this query constraint */\n  type, _limit, _limitType) {\n    super();\n    this.type = type;\n    this._limit = _limit;\n    this._limitType = _limitType;\n  }\n  static _create(type, _limit, _limitType) {\n    return new QueryLimitConstraint(type, _limit, _limitType);\n  }\n  _apply(query) {\n    return new Query(query.firestore, query.converter, queryWithLimit(query._query, this._limit, this._limitType));\n  }\n}\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limit(limit) {\n  validatePositiveNumber('limit', limit);\n  return QueryLimitConstraint._create('limit', limit, \"F\" /* LimitType.First */);\n}\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limitToLast(limit) {\n  validatePositiveNumber('limitToLast', limit);\n  return QueryLimitConstraint._create('limitToLast', limit, \"L\" /* LimitType.Last */);\n}\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\nclass QueryStartAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(/** The type of this query constraint */\n  type, _docOrFields, _inclusive) {\n    super();\n    this.type = type;\n    this._docOrFields = _docOrFields;\n    this._inclusive = _inclusive;\n  }\n  static _create(type, _docOrFields, _inclusive) {\n    return new QueryStartAtConstraint(type, _docOrFields, _inclusive);\n  }\n  _apply(query) {\n    const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\n    return new Query(query.firestore, query.converter, queryWithStartAt(query._query, bound));\n  }\n}\nfunction startAt(...docOrFields) {\n  return QueryStartAtConstraint._create('startAt', docOrFields, /*inclusive=*/true);\n}\nfunction startAfter(...docOrFields) {\n  return QueryStartAtConstraint._create('startAfter', docOrFields, /*inclusive=*/false);\n}\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\nclass QueryEndAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(/** The type of this query constraint */\n  type, _docOrFields, _inclusive) {\n    super();\n    this.type = type;\n    this._docOrFields = _docOrFields;\n    this._inclusive = _inclusive;\n  }\n  static _create(type, _docOrFields, _inclusive) {\n    return new QueryEndAtConstraint(type, _docOrFields, _inclusive);\n  }\n  _apply(query) {\n    const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\n    return new Query(query.firestore, query.converter, queryWithEndAt(query._query, bound));\n  }\n}\nfunction endBefore(...docOrFields) {\n  return QueryEndAtConstraint._create('endBefore', docOrFields, /*inclusive=*/false);\n}\nfunction endAt(...docOrFields) {\n  return QueryEndAtConstraint._create('endAt', docOrFields, /*inclusive=*/true);\n}\n/** Helper function to create a bound from a document or fields */\nfunction newQueryBoundFromDocOrFields(query, methodName, docOrFields, inclusive) {\n  docOrFields[0] = getModularInstance(docOrFields[0]);\n  if (docOrFields[0] instanceof DocumentSnapshot$1) {\n    return newQueryBoundFromDocument(query._query, query.firestore._databaseId, methodName, docOrFields[0]._document, inclusive);\n  } else {\n    const reader = newUserDataReader(query.firestore);\n    return newQueryBoundFromFields(query._query, query.firestore._databaseId, reader, methodName, docOrFields, inclusive);\n  }\n}\nfunction newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {\n  let fieldValue;\n  if (fieldPath.isKeyField()) {\n    if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid Query. You can't perform '${op}' queries on documentId().`);\n    } else if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList = [];\n      for (const arrayValue of value) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = {\n        arrayValue: {\n          values: referenceList\n        }\n      };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */ || op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(dataReader, methodName, value, /* allowArrays= */op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */);\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  return filter;\n}\nfunction newQueryOrderBy(query, fieldPath, direction) {\n  if (query.startAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call startAt() or startAfter() before ' + 'calling orderBy().');\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call endAt() or endBefore() before ' + 'calling orderBy().');\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  return orderBy;\n}\n/**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */\nfunction newQueryBoundFromDocument(query, databaseId, methodName, doc, inclusive) {\n  if (!doc) {\n    throw new FirestoreError(Code.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ` + `${methodName}().`);\n  }\n  const components = [];\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.data.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' + 'document for which the field \"' + orderBy.field + '\" is an uncommitted server timestamp. (Since the value of ' + 'this field is unknown, you cannot start/end a query with it.)');\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a ` + `document for which the field '${field}' (used as the ` + `orderBy) does not exist.`);\n      }\n    }\n  }\n  return new Bound(components, inclusive);\n}\n/**\n * Converts a list of field values to a `Bound` for the given query.\n */\nfunction newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, inclusive) {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Too many arguments provided to ${methodName}(). ` + `The number of arguments must be less than or equal to the ` + `number of orderBy() clauses`);\n  }\n  const components = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ` + `${methodName}(), but got a ${typeof rawValue}`);\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), ` + `the value passed to ${methodName}() must be a plain document ID, but ` + `'${rawValue}' contains a slash.`);\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by ` + `documentId(), the value passed to ${methodName}() must result in a ` + `valid document path, but '${path}' is not because it contains an odd number ` + `of segments.`);\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n  return new Bound(components, inclusive);\n}\n/**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */\nfunction parseDocumentIdValue(databaseId, query, documentIdValue) {\n  documentIdValue = getModularInstance(documentIdValue);\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. When querying with documentId(), you ' + 'must provide a valid document ID, but it was an empty string.');\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection by ` + `documentId(), you must provide a plain document ID, but ` + `'${documentIdValue}' contains a '/' character.`);\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group by ` + `documentId(), the value provided must result in a valid document path, ` + `but '${path}' is not because it has an odd number of segments (${path.length}).`);\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid ` + `string or a DocumentReference, but it was: ` + `${valueDescription(documentIdValue)}.`);\n  }\n}\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction validateDisjunctiveFilterElements(value, operator) {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' + `'${operator.toString()}' filters.`);\n  }\n}\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\nfunction conflictingOps(op) {\n  switch (op) {\n    case \"!=\" /* Operator.NOT_EQUAL */:\n      return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\n    case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n    case \"in\" /* Operator.IN */:\n      return [\"not-in\" /* Operator.NOT_IN */];\n    case \"not-in\" /* Operator.NOT_IN */:\n      return [\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, \"in\" /* Operator.IN */, \"not-in\" /* Operator.NOT_IN */, \"!=\" /* Operator.NOT_EQUAL */];\n    default:\n      return [];\n  }\n}\nfunction validateNewFieldFilter(query, fieldFilter) {\n  const conflictingOp = findOpInsideFilters(query.filters, conflictingOps(fieldFilter.op));\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === fieldFilter.op) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' + `'${fieldFilter.op.toString()}' filter.`);\n    } else {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You cannot use '${fieldFilter.op.toString()}' filters ` + `with '${conflictingOp.toString()}' filters.`);\n    }\n  }\n}\nfunction validateNewFilter(query, filter) {\n  let testQuery = query;\n  const subFilters = filter.getFlattenedFilters();\n  for (const subFilter of subFilters) {\n    validateNewFieldFilter(testQuery, subFilter);\n    testQuery = queryWithAddedFilter(testQuery, subFilter);\n  }\n}\n// Checks if any of the provided filter operators are included in the given list of filters and\n// returns the first one that is, or null if none are.\nfunction findOpInsideFilters(filters, operators) {\n  for (const filter of filters) {\n    for (const fieldFilter of filter.getFlattenedFilters()) {\n      if (operators.indexOf(fieldFilter.op) >= 0) {\n        return fieldFilter.op;\n      }\n    }\n  }\n  return null;\n}\nfunction validateQueryFilterConstraint(functionName, queryConstraint) {\n  if (!(queryConstraint instanceof QueryFieldFilterConstraint) && !(queryConstraint instanceof QueryCompositeFilterConstraint)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n  }\n}\nfunction validateQueryConstraintArray(queryConstraint) {\n  const compositeFilterCount = queryConstraint.filter(filter => filter instanceof QueryCompositeFilterConstraint).length;\n  const fieldFilterCount = queryConstraint.filter(filter => filter instanceof QueryFieldFilterConstraint).length;\n  if (compositeFilterCount > 1 || compositeFilterCount > 0 && fieldFilterCount > 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'InvalidQuery. When using composite filters, you cannot use ' + 'more than one filter at the top level. Consider nesting the multiple ' + 'filters within an `and(...)` statement. For example: ' + 'change `query(query, where(...), or(...))` to ' + '`query(query, and(where(...), or(...)))`.');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\nclass AbstractUserDataWriter {\n  convertValue(value, serverTimestampBehavior = 'none') {\n    switch (typeOrder(value)) {\n      case 0 /* TypeOrder.NullValue */:\n        return null;\n      case 1 /* TypeOrder.BooleanValue */:\n        return value.booleanValue;\n      case 2 /* TypeOrder.NumberValue */:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case 3 /* TypeOrder.TimestampValue */:\n        return this.convertTimestamp(value.timestampValue);\n      case 4 /* TypeOrder.ServerTimestampValue */:\n        return this.convertServerTimestamp(value, serverTimestampBehavior);\n      case 5 /* TypeOrder.StringValue */:\n        return value.stringValue;\n      case 6 /* TypeOrder.BlobValue */:\n        return this.convertBytes(normalizeByteString(value.bytesValue));\n      case 7 /* TypeOrder.RefValue */:\n        return this.convertReference(value.referenceValue);\n      case 8 /* TypeOrder.GeoPointValue */:\n        return this.convertGeoPoint(value.geoPointValue);\n      case 9 /* TypeOrder.ArrayValue */:\n        return this.convertArray(value.arrayValue, serverTimestampBehavior);\n      case 11 /* TypeOrder.ObjectValue */:\n        return this.convertObject(value.mapValue, serverTimestampBehavior);\n      case 10 /* TypeOrder.VectorValue */:\n        return this.convertVectorValue(value.mapValue);\n      default:\n        throw fail();\n    }\n  }\n  convertObject(mapValue, serverTimestampBehavior) {\n    return this.convertObjectMap(mapValue.fields, serverTimestampBehavior);\n  }\n  /**\n   * @internal\n   */\n  convertObjectMap(fields, serverTimestampBehavior = 'none') {\n    const result = {};\n    forEach(fields, (key, value) => {\n      result[key] = this.convertValue(value, serverTimestampBehavior);\n    });\n    return result;\n  }\n  /**\n   * @internal\n   */\n  convertVectorValue(mapValue) {\n    var _a, _b, _c;\n    const values = (_c = (_b = (_a = mapValue.fields) === null || _a === void 0 ? void 0 : _a[VECTOR_MAP_VECTORS_KEY].arrayValue) === null || _b === void 0 ? void 0 : _b.values) === null || _c === void 0 ? void 0 : _c.map(value => {\n      return normalizeNumber(value.doubleValue);\n    });\n    return new VectorValue(values);\n  }\n  convertGeoPoint(value) {\n    return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));\n  }\n  convertArray(arrayValue, serverTimestampBehavior) {\n    return (arrayValue.values || []).map(value => this.convertValue(value, serverTimestampBehavior));\n  }\n  convertServerTimestamp(value, serverTimestampBehavior) {\n    switch (serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue, serverTimestampBehavior);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n  convertTimestamp(value) {\n    const normalizedValue = normalizeTimestamp(value);\n    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\n  }\n  convertDocumentKey(name, expectedDatabaseId) {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(isValidResourceName(resourcePath));\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n    if (!databaseId.isEqual(expectedDatabaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(`Document ${key} contains a document ` + `reference within a different database (` + `${databaseId.projectId}/${databaseId.database}) which is not ` + `supported. It will be treated as a reference in the current ` + `database (${expectedDatabaseId.projectId}/${expectedDatabaseId.database}) ` + `instead.`);\n    }\n    return key;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction applyFirestoreDataConverter(converter, value, options) {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = converter.toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value;\n  }\n  return convertedValue;\n}\nclass LiteUserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n  convertBytes(bytes) {\n    return new Bytes(bytes);\n  }\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, key);\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n */\nfunction sum(field) {\n  return new AggregateField('sum', fieldPathFromArgument$1('sum', field));\n}\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */\nfunction average(field) {\n  return new AggregateField('avg', fieldPathFromArgument$1('average', field));\n}\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */\nfunction count() {\n  return new AggregateField('count');\n}\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */\nfunction aggregateFieldEqual(left, right) {\n  var _a, _b;\n  return left instanceof AggregateField && right instanceof AggregateField && left.aggregateType === right.aggregateType && ((_a = left._internalFieldPath) === null || _a === void 0 ? void 0 : _a.canonicalString()) === ((_b = right._internalFieldPath) === null || _b === void 0 ? void 0 : _b.canonicalString());\n}\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\nfunction aggregateQuerySnapshotEqual(left, right) {\n  return queryEqual(left.query, right.query) && deepEqual(left.data(), right.data());\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\n * Returns true if obj is an object and contains at least one of the specified\n * methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n  const object = obj;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Metadata about a snapshot, describing the state of the snapshot.\n */\nclass SnapshotMetadata {\n  /** @hideconstructor */\n  constructor(hasPendingWrites, fromCache) {\n    this.hasPendingWrites = hasPendingWrites;\n    this.fromCache = fromCache;\n  }\n  /**\n   * Returns true if this `SnapshotMetadata` is equal to the provided one.\n   *\n   * @param other - The `SnapshotMetadata` to compare against.\n   * @returns true if this `SnapshotMetadata` is equal to the provided one.\n   */\n  isEqual(other) {\n    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;\n  }\n}\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nclass DocumentSnapshot extends DocumentSnapshot$1 {\n  /** @hideconstructor protected */\n  constructor(_firestore, userDataWriter, key, document, metadata, converter) {\n    super(_firestore, userDataWriter, key, document, converter);\n    this._firestore = _firestore;\n    this._firestoreImpl = _firestore;\n    this.metadata = metadata;\n  }\n  /**\n   * Returns whether or not the data exists. True if the document exists.\n   */\n  exists() {\n    return super.exists();\n  }\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * By default, `serverTimestamp()` values that have not yet been\n   * set to their final value will be returned as `null`. You can override\n   * this by passing an options object.\n   *\n   * @param options - An options object to configure how data is retrieved from\n   * the snapshot (for example the desired behavior for server timestamps that\n   * have not yet been set to their final value).\n   * @returns An `Object` containing all fields in the document or `undefined` if\n   * the document doesn't exist.\n   */\n  data(options = {}) {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, /* converter= */null);\n      return this._converter.fromFirestore(snapshot, options);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value, options.serverTimestamps);\n    }\n  }\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * By default, a `serverTimestamp()` that has not yet been set to\n   * its final value will be returned as `null`. You can override this by\n   * passing an options object.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @param options - An options object to configure how the field is retrieved\n   * from the snapshot (for example the desired behavior for server timestamps\n   * that have not yet been set to their final value).\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(fieldPath, options = {}) {\n    if (this._document) {\n      const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value, options.serverTimestamps);\n      }\n    }\n    return undefined;\n  }\n}\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * By default, `serverTimestamp()` values that have not yet been\n   * set to their final value will be returned as `null`. You can override\n   * this by passing an options object.\n   *\n   * @override\n   * @param options - An options object to configure how data is retrieved from\n   * the snapshot (for example the desired behavior for server timestamps that\n   * have not yet been set to their final value).\n   * @returns An `Object` containing all fields in the document.\n   */\n  data(options = {}) {\n    return super.data(options);\n  }\n}\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nclass QuerySnapshot {\n  /** @hideconstructor */\n  constructor(_firestore, _userDataWriter, query, _snapshot) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._snapshot = _snapshot;\n    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    this.query = query;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n  get docs() {\n    const result = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n  /** The number of documents in the `QuerySnapshot`. */\n  get size() {\n    return this._snapshot.docs.size;\n  }\n  /** True if there are no documents in the `QuerySnapshot`. */\n  get empty() {\n    return this.size === 0;\n  }\n  /**\n   * Enumerates all of the documents in the `QuerySnapshot`.\n   *\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n   * each document in the snapshot.\n   * @param thisArg - The `this` binding for the callback.\n   */\n  forEach(callback, thisArg) {\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, doc.key, doc, new SnapshotMetadata(this._snapshot.mutatedKeys.has(doc.key), this._snapshot.fromCache), this.query.converter));\n    });\n  }\n  /**\n   * Returns an array of the documents changes since the last snapshot. If this\n   * is the first snapshot, all documents will be in the list as 'added'\n   * changes.\n   *\n   * @param options - `SnapshotListenOptions` that control whether metadata-only\n   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\n   * snapshot events.\n   */\n  docChanges(options = {}) {\n    const includeMetadataChanges = !!options.includeMetadataChanges;\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' + 'also pass { includeMetadataChanges:true } to onSnapshot().');\n    }\n    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {\n      this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n    return this._cachedChanges;\n  }\n}\n/** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */\nfunction changesFromSnapshot(querySnapshot, includeMetadataChanges) {\n  if (querySnapshot._snapshot.oldDocs.isEmpty()) {\n    let index = 0;\n    return querySnapshot._snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      change.doc;\n      return {\n        type: 'added',\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A `DocumentSet` that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = querySnapshot._snapshot.oldDocs;\n    return querySnapshot._snapshot.docChanges.filter(change => includeMetadataChanges || change.type !== 3 /* ChangeType.Metadata */).map(change => {\n      const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      let oldIndex = -1;\n      let newIndex = -1;\n      if (change.type !== 0 /* ChangeType.Added */) {\n        oldIndex = indexTracker.indexOf(change.doc.key);\n        indexTracker = indexTracker.delete(change.doc.key);\n      }\n      if (change.type !== 1 /* ChangeType.Removed */) {\n        indexTracker = indexTracker.add(change.doc);\n        newIndex = indexTracker.indexOf(change.doc.key);\n      }\n      return {\n        type: resultChangeType(change.type),\n        doc,\n        oldIndex,\n        newIndex\n      };\n    });\n  }\n}\nfunction resultChangeType(type) {\n  switch (type) {\n    case 0 /* ChangeType.Added */:\n      return 'added';\n    case 2 /* ChangeType.Modified */:\n    case 3 /* ChangeType.Metadata */:\n      return 'modified';\n    case 1 /* ChangeType.Removed */:\n      return 'removed';\n    default:\n      return fail();\n  }\n}\n// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot\n// metadata\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\nfunction snapshotEqual(left, right) {\n  if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {\n    return left._firestore === right._firestore && left._key.isEqual(right._key) && (left._document === null ? right._document === null : left._document.isEqual(right._document)) && left._converter === right._converter;\n  } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {\n    return left._firestore === right._firestore && queryEqual(left.query, right.query) && left.metadata.isEqual(right.metadata) && left._snapshot.isEqual(right._snapshot);\n  }\n  return false;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Reads the document referred to by this `DocumentReference`.\n *\n * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting\n * for data from the server, but it may return cached data or fail if you are\n * offline and the server cannot be reached. To specify this behavior, invoke\n * {@link getDocFromCache} or {@link getDocFromServer}.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\n * current document contents.\n */\nfunction getDoc(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\n}\nclass ExpUserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n  convertBytes(bytes) {\n    return new Bytes(bytes);\n  }\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, key);\n  }\n}\n/**\n * Reads the document referred to by this `DocumentReference` from cache.\n * Returns an error if the document is not currently cached.\n *\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\n * current document contents.\n */\nfunction getDocFromCache(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(doc => new DocumentSnapshot(firestore, userDataWriter, reference._key, doc, new SnapshotMetadata(doc !== null && doc.hasLocalMutations, /* fromCache= */true), reference.converter));\n}\n/**\n * Reads the document referred to by this `DocumentReference` from the server.\n * Returns an error if the network is not available.\n *\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\n * current document contents.\n */\nfunction getDocFromServer(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {\n    source: 'server'\n  }).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\n}\n/**\n * Executes the query and returns the results as a `QuerySnapshot`.\n *\n * Note: `getDocs()` attempts to provide up-to-date data when possible by\n * waiting for data from the server, but it may return cached data or fail if\n * you are offline and the server cannot be reached. To specify this behavior,\n * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.\n *\n * @returns A `Promise` that will be resolved with the results of the query.\n */\nfunction getDocs(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  validateHasExplicitOrderByForLimitToLast(query._query);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\n/**\n * Executes the query and returns the results as a `QuerySnapshot` from cache.\n * Returns an empty result set if no documents matching the query are currently\n * cached.\n *\n * @returns A `Promise` that will be resolved with the results of the query.\n */\nfunction getDocsFromCache(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsFromLocalCache(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\n/**\n * Executes the query and returns the results as a `QuerySnapshot` from the\n * server. Returns an error if the network is not available.\n *\n * @returns A `Promise` that will be resolved with the results of the query.\n */\nfunction getDocsFromServer(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query, {\n    source: 'server'\n  }).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\nfunction setDoc(reference, data, options) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const convertedValue = applyFirestoreDataConverter(reference.converter, data, options);\n  const dataReader = newUserDataReader(firestore);\n  const parsed = parseSetData(dataReader, 'setDoc', reference._key, convertedValue, reference.converter !== null, options);\n  const mutation = parsed.toMutation(reference._key, Precondition.none());\n  return executeWrite(firestore, [mutation]);\n}\nfunction updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const dataReader = newUserDataReader(firestore);\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n  let parsed;\n  if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n    parsed = parseUpdateVarargs(dataReader, 'updateDoc', reference._key, fieldOrUpdateData, value, moreFieldsAndValues);\n  } else {\n    parsed = parseUpdateData(dataReader, 'updateDoc', reference._key, fieldOrUpdateData);\n  }\n  const mutation = parsed.toMutation(reference._key, Precondition.exists(true));\n  return executeWrite(firestore, [mutation]);\n}\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * @param reference - A reference to the document to delete.\n * @returns A Promise resolved once the document has been successfully\n * deleted from the backend (note that it won't resolve while you're offline).\n */\nfunction deleteDoc(reference) {\n  const firestore = cast(reference.firestore, Firestore);\n  const mutations = [new DeleteMutation(reference._key, Precondition.none())];\n  return executeWrite(firestore, mutations);\n}\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend (Note that it\n * won't resolve while you're offline).\n */\nfunction addDoc(reference, data) {\n  const firestore = cast(reference.firestore, Firestore);\n  const docRef = doc(reference);\n  const convertedValue = applyFirestoreDataConverter(reference.converter, data);\n  const dataReader = newUserDataReader(reference.firestore);\n  const parsed = parseSetData(dataReader, 'addDoc', docRef._key, convertedValue, reference.converter !== null, {});\n  const mutation = parsed.toMutation(docRef._key, Precondition.exists(false));\n  return executeWrite(firestore, [mutation]).then(() => docRef);\n}\nfunction onSnapshot(reference, ...args) {\n  var _a, _b, _c;\n  reference = getModularInstance(reference);\n  let options = {\n    includeMetadataChanges: false,\n    source: 'default'\n  };\n  let currArg = 0;\n  if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {\n    options = args[currArg];\n    currArg++;\n  }\n  const internalOptions = {\n    includeMetadataChanges: options.includeMetadataChanges,\n    source: options.source\n  };\n  if (isPartialObserver(args[currArg])) {\n    const userObserver = args[currArg];\n    args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);\n    args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);\n    args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);\n  }\n  let observer;\n  let firestore;\n  let internalQuery;\n  if (reference instanceof DocumentReference) {\n    firestore = cast(reference.firestore, Firestore);\n    internalQuery = newQueryForPath(reference._key.path);\n    observer = {\n      next: snapshot => {\n        if (args[currArg]) {\n          args[currArg](convertToDocSnapshot(firestore, reference, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n  } else {\n    const query = cast(reference, Query);\n    firestore = cast(query.firestore, Firestore);\n    internalQuery = query._query;\n    const userDataWriter = new ExpUserDataWriter(firestore);\n    observer = {\n      next: snapshot => {\n        if (args[currArg]) {\n          args[currArg](new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n    validateHasExplicitOrderByForLimitToLast(reference._query);\n  }\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientListen(client, internalQuery, internalOptions, observer);\n}\nfunction onSnapshotsInSync(firestore, arg) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const observer = isPartialObserver(arg) ? arg : {\n    next: arg\n  };\n  return firestoreClientAddSnapshotsInSyncListener(client, observer);\n}\n/**\n * Locally writes `mutations` on the async queue.\n * @internal\n */\nfunction executeWrite(firestore, mutations) {\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWrite(client, mutations);\n}\n/**\n * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`\n * to a {@link DocumentSnapshot}.\n */\nfunction convertToDocSnapshot(firestore, ref, snapshot) {\n  const doc = snapshot.docs.get(ref._key);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return new DocumentSnapshot(firestore, userDataWriter, ref._key, doc, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can\n * count the documents in cases where the result set is prohibitively large to\n * download entirely (thousands of documents).\n *\n * The result received from the server is presented, unaltered, without\n * considering any local state. That is, documents in the local cache are not\n * taken into consideration, neither are local modifications not yet\n * synchronized with the server. Previously-downloaded results, if any, are not\n * used. Every invocation of this function necessarily involves a round trip to\n * the server.\n *\n * @param query The query whose result set size is calculated.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\nfunction getCountFromServer(query) {\n  const countQuerySpec = {\n    count: count()\n  };\n  return getAggregateFromServer(query, countQuerySpec);\n}\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can perform aggregations of the documents in cases where the result\n * set is prohibitively large to download entirely (thousands of documents).\n *\n * The result received from the server is presented, unaltered, without\n * considering any local state. That is, documents in the local cache are not\n * taken into consideration, neither are local modifications not yet\n * synchronized with the server. Previously-downloaded results, if any, are not\n * used. Every invocation of this function necessarily involves a round trip to\n * the server.\n *\n * @param query The query whose result set is aggregated over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregateFromServer(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */\nfunction getAggregateFromServer(query, aggregateSpec) {\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const internalAggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\n    return new AggregateImpl(alias, aggregate.aggregateType, aggregate._internalFieldPath);\n  });\n  // Run the aggregation and convert the results\n  return firestoreClientRunAggregateQuery(client, query._query, internalAggregates).then(aggregateResult => convertToAggregateQuerySnapshot(firestore, query, aggregateResult));\n}\n/**\n * Converts the core aggregation result to an `AggregateQuerySnapshot`\n * that can be returned to the consumer.\n * @param query\n * @param aggregateResult Core aggregation result\n * @internal\n */\nfunction convertToAggregateQuerySnapshot(firestore, query, aggregateResult) {\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  const querySnapshot = new AggregateQuerySnapshot(query, userDataWriter, aggregateResult);\n  return querySnapshot;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MemoryLocalCacheImpl {\n  constructor(settings) {\n    this.kind = 'memory';\n    this._onlineComponentProvider = OnlineComponentProvider.provider;\n    if (settings === null || settings === void 0 ? void 0 : settings.garbageCollector) {\n      this._offlineComponentProvider = settings.garbageCollector._offlineComponentProvider;\n    } else {\n      this._offlineComponentProvider = {\n        build: () => new LruGcMemoryOfflineComponentProvider(undefined)\n      };\n    }\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass PersistentLocalCacheImpl {\n  constructor(settings) {\n    this.kind = 'persistent';\n    let tabManager;\n    if (settings === null || settings === void 0 ? void 0 : settings.tabManager) {\n      settings.tabManager._initialize(settings);\n      tabManager = settings.tabManager;\n    } else {\n      tabManager = persistentSingleTabManager(undefined);\n      tabManager._initialize(settings);\n    }\n    this._onlineComponentProvider = tabManager._onlineComponentProvider;\n    this._offlineComponentProvider = tabManager._offlineComponentProvider;\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass MemoryEagerGarbageCollectorImpl {\n  constructor() {\n    this.kind = 'memoryEager';\n    this._offlineComponentProvider = MemoryOfflineComponentProvider.provider;\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass MemoryLruGarbageCollectorImpl {\n  constructor(cacheSize) {\n    this.kind = 'memoryLru';\n    this._offlineComponentProvider = {\n      build: () => new LruGcMemoryOfflineComponentProvider(cacheSize)\n    };\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\n/**\n * Creates an instance of `MemoryEagerGarbageCollector`. This is also the\n * default garbage collector unless it is explicitly specified otherwise.\n */\nfunction memoryEagerGarbageCollector() {\n  return new MemoryEagerGarbageCollectorImpl();\n}\n/**\n * Creates an instance of `MemoryLruGarbageCollector`.\n *\n * A target size can be specified as part of the setting parameter. The\n * collector will start deleting documents once the cache size exceeds\n * the given size. The default cache size is 40MB (40 * 1024 * 1024 bytes).\n */\nfunction memoryLruGarbageCollector(settings) {\n  return new MemoryLruGarbageCollectorImpl(settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes);\n}\n/**\n * Creates an instance of `MemoryLocalCache`. The instance can be set to\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\n */\nfunction memoryLocalCache(settings) {\n  return new MemoryLocalCacheImpl(settings);\n}\n/**\n * Creates an instance of `PersistentLocalCache`. The instance can be set to\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\n *\n * Persistent cache cannot be used in a Node.js environment.\n */\nfunction persistentLocalCache(settings) {\n  return new PersistentLocalCacheImpl(settings);\n}\nclass SingleTabManagerImpl {\n  constructor(forceOwnership) {\n    this.forceOwnership = forceOwnership;\n    this.kind = 'persistentSingleTab';\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  /**\n   * @internal\n   */\n  _initialize(settings) {\n    this._onlineComponentProvider = OnlineComponentProvider.provider;\n    this._offlineComponentProvider = {\n      build: onlineComponents => new IndexedDbOfflineComponentProvider(onlineComponents, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes, this.forceOwnership)\n    };\n  }\n}\nclass MultiTabManagerImpl {\n  constructor() {\n    this.kind = 'PersistentMultipleTab';\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  /**\n   * @internal\n   */\n  _initialize(settings) {\n    this._onlineComponentProvider = OnlineComponentProvider.provider;\n    this._offlineComponentProvider = {\n      build: onlineComponents => new MultiTabOfflineComponentProvider(onlineComponents, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes)\n    };\n  }\n}\n/**\n * Creates an instance of `PersistentSingleTabManager`.\n *\n * @param settings Configures the created tab manager.\n */\nfunction persistentSingleTabManager(settings) {\n  return new SingleTabManagerImpl(settings === null || settings === void 0 ? void 0 : settings.forceOwnership);\n}\n/**\n * Creates an instance of `PersistentMultipleTabManager`.\n */\nfunction persistentMultipleTabManager() {\n  return new MultiTabManagerImpl();\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_TRANSACTION_OPTIONS = {\n  maxAttempts: 5\n};\nfunction validateTransactionOptions(options) {\n  if (options.maxAttempts < 1) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Max attempts must be at least 1');\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\nclass WriteBatch {\n  /** @hideconstructor */\n  constructor(_firestore, _commitHandler) {\n    this._firestore = _firestore;\n    this._commitHandler = _commitHandler;\n    this._mutations = [];\n    this._committed = false;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n  set(documentRef, data, options) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(ref.converter, data, options);\n    const parsed = parseSetData(this._dataReader, 'WriteBatch.set', ref._key, convertedValue, ref.converter !== null, options);\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\n    return this;\n  }\n  update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n    let parsed;\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData);\n    }\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  delete(documentRef) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));\n    return this;\n  }\n  /**\n   * Commits all of the writes in this write batch as a single atomic unit.\n   *\n   * The result of these writes will only be reflected in document reads that\n   * occur after the returned promise resolves. If the client is offline, the\n   * write fails. If you would like to see local modifications or buffer writes\n   * until the client is online, use the full Firestore SDK.\n   *\n   * @returns A `Promise` resolved once all of the writes in the batch have been\n   * successfully written to the backend as an atomic unit (note that it won't\n   * resolve while you're offline).\n   */\n  commit() {\n    this._verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._commitHandler(this._mutations);\n    }\n    return Promise.resolve();\n  }\n  _verifyNotCommitted() {\n    if (this._committed) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' + 'has been called.');\n    }\n  }\n}\nfunction validateReference(documentRef, firestore) {\n  documentRef = getModularInstance(documentRef);\n  if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n  } else {\n    return documentRef;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n// legacy SDK.\n/**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */\nclass Transaction$1 {\n  /** @hideconstructor */\n  constructor(_firestore, _transaction) {\n    this._firestore = _firestore;\n    this._transaction = _transaction;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  get(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    const userDataWriter = new LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([ref._key]).then(docs => {\n      if (!docs || docs.length !== 1) {\n        return fail();\n      }\n      const doc = docs[0];\n      if (doc.isFoundDocument()) {\n        return new DocumentSnapshot$1(this._firestore, userDataWriter, doc.key, doc, ref.converter);\n      } else if (doc.isNoDocument()) {\n        return new DocumentSnapshot$1(this._firestore, userDataWriter, ref._key, null, ref.converter);\n      } else {\n        throw fail();\n      }\n    });\n  }\n  set(documentRef, value, options) {\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(ref.converter, value, options);\n    const parsed = parseSetData(this._dataReader, 'Transaction.set', ref._key, convertedValue, ref.converter !== null, options);\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n  update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    const ref = validateReference(documentRef, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n    let parsed;\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData);\n    }\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  delete(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */\nclass Transaction extends Transaction$1 {\n  // This class implements the same logic as the Transaction API in the Lite SDK\n  // but is subclassed in order to return its own DocumentSnapshot types.\n  /** @hideconstructor */\n  constructor(_firestore, _transaction) {\n    super(_firestore, _transaction);\n    this._firestore = _firestore;\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  get(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    const userDataWriter = new ExpUserDataWriter(this._firestore);\n    return super.get(documentRef).then(liteDocumentSnapshot => new DocumentSnapshot(this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(/* hasPendingWrites= */false, /* fromCache= */false), ref.converter));\n  }\n}\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\nfunction runTransaction(firestore, updateFunction, options) {\n  firestore = cast(firestore, Firestore);\n  const optionsWithDefaults = Object.assign(Object.assign({}, DEFAULT_TRANSACTION_OPTIONS), options);\n  validateTransactionOptions(optionsWithDefaults);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientTransaction(client, internalTransaction => updateFunction(new Transaction(firestore, internalTransaction)), optionsWithDefaults);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nfunction deleteField() {\n  return new DeleteFieldValueImpl('deleteField');\n}\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nfunction serverTimestamp() {\n  return new ServerTimestampFieldValueImpl('serverTimestamp');\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nfunction arrayUnion(...elements) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayUnionFieldValueImpl('arrayUnion', elements);\n}\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction arrayRemove(...elements) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction increment(n) {\n  return new NumericIncrementFieldValueImpl('increment', n);\n}\n/**\n * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\n *\n * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\n *\n * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\n */\nfunction vector(values) {\n  return new VectorValue(values);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}\n * is 500.\n *\n * Unlike transactions, write batches are persisted offline and therefore are\n * preferable when you don't need to condition your writes on read data.\n *\n * @returns A {@link WriteBatch} that can be used to atomically execute multiple\n * writes.\n */\nfunction writeBatch(firestore) {\n  firestore = cast(firestore, Firestore);\n  ensureFirestoreConfigured(firestore);\n  return new WriteBatch(firestore, mutations => executeWrite(firestore, mutations));\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction setIndexConfiguration(firestore, jsonOrConfiguration) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  if (!client._uninitializedComponentsProvider || client._uninitializedComponentsProvider._offline.kind === 'memory') {\n    // PORTING NOTE: We don't return an error if the user has not enabled\n    // persistence since `enableIndexeddbPersistence()` can fail on the Web.\n    logWarn('Cannot enable indexes when persistence is disabled');\n    return Promise.resolve();\n  }\n  const parsedIndexes = parseIndexes(jsonOrConfiguration);\n  return firestoreClientSetIndexConfiguration(client, parsedIndexes);\n}\nfunction parseIndexes(jsonOrConfiguration) {\n  const indexConfiguration = typeof jsonOrConfiguration === 'string' ? tryParseJson(jsonOrConfiguration) : jsonOrConfiguration;\n  const parsedIndexes = [];\n  if (Array.isArray(indexConfiguration.indexes)) {\n    for (const index of indexConfiguration.indexes) {\n      const collectionGroup = tryGetString(index, 'collectionGroup');\n      const segments = [];\n      if (Array.isArray(index.fields)) {\n        for (const field of index.fields) {\n          const fieldPathString = tryGetString(field, 'fieldPath');\n          const fieldPath = fieldPathFromDotSeparatedString('setIndexConfiguration', fieldPathString);\n          if (field.arrayConfig === 'CONTAINS') {\n            segments.push(new IndexSegment(fieldPath, 2 /* IndexKind.CONTAINS */));\n          } else if (field.order === 'ASCENDING') {\n            segments.push(new IndexSegment(fieldPath, 0 /* IndexKind.ASCENDING */));\n          } else if (field.order === 'DESCENDING') {\n            segments.push(new IndexSegment(fieldPath, 1 /* IndexKind.DESCENDING */));\n          }\n        }\n      }\n      parsedIndexes.push(new FieldIndex(FieldIndex.UNKNOWN_ID, collectionGroup, segments, IndexState.empty()));\n    }\n  }\n  return parsedIndexes;\n}\nfunction tryParseJson(json) {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to parse JSON: ' + (e === null || e === void 0 ? void 0 : e.message));\n  }\n}\nfunction tryGetString(data, property) {\n  if (typeof data[property] !== 'string') {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Missing string value for: ' + property);\n  }\n  return data[property];\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `PersistentCacheIndexManager` for configuring persistent cache indexes used\n * for local query execution.\n *\n * To use, call `getPersistentCacheIndexManager()` to get an instance.\n */\nclass PersistentCacheIndexManager {\n  /** @hideconstructor */\n  constructor(_firestore) {\n    this._firestore = _firestore;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'PersistentCacheIndexManager';\n  }\n}\n/**\n * Returns the PersistentCache Index Manager used by the given `Firestore`\n * object.\n *\n * @return The `PersistentCacheIndexManager` instance, or `null` if local\n * persistent storage is not in use.\n */\nfunction getPersistentCacheIndexManager(firestore) {\n  var _a;\n  firestore = cast(firestore, Firestore);\n  const cachedInstance = persistentCacheIndexManagerByFirestore.get(firestore);\n  if (cachedInstance) {\n    return cachedInstance;\n  }\n  const client = ensureFirestoreConfigured(firestore);\n  if (((_a = client._uninitializedComponentsProvider) === null || _a === void 0 ? void 0 : _a._offline.kind) !== 'persistent') {\n    return null;\n  }\n  const instance = new PersistentCacheIndexManager(firestore);\n  persistentCacheIndexManagerByFirestore.set(firestore, instance);\n  return instance;\n}\n/**\n * Enables the SDK to create persistent cache indexes automatically for local\n * query execution when the SDK believes cache indexes can help improve\n * performance.\n *\n * This feature is disabled by default.\n */\nfunction enablePersistentCacheIndexAutoCreation(indexManager) {\n  setPersistentCacheIndexAutoCreationEnabled(indexManager, true);\n}\n/**\n * Stops creating persistent cache indexes automatically for local query\n * execution. The indexes which have been created by calling\n * `enablePersistentCacheIndexAutoCreation()` still take effect.\n */\nfunction disablePersistentCacheIndexAutoCreation(indexManager) {\n  setPersistentCacheIndexAutoCreationEnabled(indexManager, false);\n}\n/**\n * Removes all persistent cache indexes.\n *\n * Please note this function will also deletes indexes generated by\n * `setIndexConfiguration()`, which is deprecated.\n */\nfunction deleteAllPersistentCacheIndexes(indexManager) {\n  const client = ensureFirestoreConfigured(indexManager._firestore);\n  const promise = firestoreClientDeleteAllFieldIndexes(client);\n  promise.then(_ => logDebug('deleting all persistent cache indexes succeeded')).catch(error => logWarn('deleting all persistent cache indexes failed', error));\n}\nfunction setPersistentCacheIndexAutoCreationEnabled(indexManager, isEnabled) {\n  const client = ensureFirestoreConfigured(indexManager._firestore);\n  const promise = firestoreClientSetPersistentCacheIndexAutoCreationEnabled(client, isEnabled);\n  promise.then(_ => logDebug(`setting persistent cache index auto creation ` + `isEnabled=${isEnabled} succeeded`)).catch(error => logWarn(`setting persistent cache index auto creation ` + `isEnabled=${isEnabled} failed`, error));\n}\n/**\n * Maps `Firestore` instances to their corresponding\n * `PersistentCacheIndexManager` instances.\n *\n * Use a `WeakMap` so that the mapping will be automatically dropped when the\n * `Firestore` instance is garbage collected. This emulates a private member\n * as described in https://goo.gle/454yvug.\n */\nconst persistentCacheIndexManagerByFirestore = new WeakMap();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n * @private\n *\n * This function is for internal use only.\n *\n * Returns the `QueryTarget` representation of the given query. Returns `null`\n * if the Firestore client associated with the given query has not been\n * initialized or has been terminated.\n *\n * @param query - The Query to convert to proto representation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _internalQueryToProtoQueryTarget(query) {\n  var _a;\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const serializer = (_a = client._onlineComponents) === null || _a === void 0 ? void 0 : _a.datastore.serializer;\n  if (serializer === undefined) {\n    return null;\n  }\n  return toQueryTarget(serializer, queryToTarget(query._query)).queryTarget;\n}\n/**\n * @internal\n * @private\n *\n * This function is for internal use only.\n *\n * Returns `RunAggregationQueryRequest` which contains the proto representation\n * of the given aggregation query request. Returns null if the Firestore client\n * associated with the given query has not been initialized or has been\n * terminated.\n *\n * @param query - The Query to convert to proto representation.\n * @param aggregateSpec - The set of aggregations and their aliases.\n */\nfunction _internalAggregationQueryToProtoRunAggregationQueryRequest(query, aggregateSpec) {\n  var _a;\n  const aggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\n    return new AggregateImpl(alias, aggregate.aggregateType, aggregate._internalFieldPath);\n  });\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const serializer = (_a = client._onlineComponents) === null || _a === void 0 ? void 0 : _a.datastore.serializer;\n  if (serializer === undefined) {\n    return null;\n  }\n  return toRunAggregationQueryRequest(serializer, queryToAggregateTarget(query._query), aggregates, /* skipAliasing= */true).request;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Testing hooks for use by Firestore's integration test suite to reach into the\n * SDK internals to validate logic and behavior that is not visible from the\n * public API surface.\n *\n * @internal\n */\nclass TestingHooks {\n  constructor() {\n    throw new Error('instances of this class should not be created');\n  }\n  /**\n   * Registers a callback to be notified when an existence filter mismatch\n   * occurs in the Watch listen stream.\n   *\n   * The relative order in which callbacks are notified is unspecified; do not\n   * rely on any particular ordering. If a given callback is registered multiple\n   * times then it will be notified multiple times, once per registration.\n   *\n   * @param callback the callback to invoke upon existence filter mismatch.\n   *\n   * @return a function that, when called, unregisters the given callback; only\n   * the first invocation of the returned function does anything; all subsequent\n   * invocations do nothing.\n   */\n  static onExistenceFilterMismatch(callback) {\n    return TestingHooksSpiImpl.instance.onExistenceFilterMismatch(callback);\n  }\n}\n/**\n * The implementation of `TestingHooksSpi`.\n */\nclass TestingHooksSpiImpl {\n  constructor() {\n    this.existenceFilterMismatchCallbacksById = new Map();\n  }\n  static get instance() {\n    if (!testingHooksSpiImplInstance) {\n      testingHooksSpiImplInstance = new TestingHooksSpiImpl();\n      setTestingHooksSpi(testingHooksSpiImplInstance);\n    }\n    return testingHooksSpiImplInstance;\n  }\n  notifyOnExistenceFilterMismatch(info) {\n    this.existenceFilterMismatchCallbacksById.forEach(callback => callback(info));\n  }\n  onExistenceFilterMismatch(callback) {\n    const id = Symbol();\n    const callbacks = this.existenceFilterMismatchCallbacksById;\n    callbacks.set(id, callback);\n    return () => callbacks.delete(id);\n  }\n}\nlet testingHooksSpiImplInstance = null;\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nregisterFirestore('node');\nexport { AbstractUserDataWriter, AggregateField, AggregateQuerySnapshot, Bytes, CACHE_SIZE_UNLIMITED, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, LoadBundleTask, PersistentCacheIndexManager, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, SnapshotMetadata, Timestamp, Transaction, VectorValue, WriteBatch, AutoId as _AutoId, ByteString as _ByteString, DatabaseId as _DatabaseId, DocumentKey as _DocumentKey, EmptyAppCheckTokenProvider as _EmptyAppCheckTokenProvider, EmptyAuthCredentialsProvider as _EmptyAuthCredentialsProvider, FieldPath$1 as _FieldPath, TestingHooks as _TestingHooks, cast as _cast, debugAssert as _debugAssert, _internalAggregationQueryToProtoRunAggregationQueryRequest, _internalQueryToProtoQueryTarget, isBase64Available as _isBase64Available, logWarn as _logWarn, validateIsNotUsedTogether as _validateIsNotUsedTogether, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, clearIndexedDbPersistence, collection, collectionGroup, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, ensureFirestoreConfigured, executeWrite, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, vector, waitForPendingWrites, where, writeBatch };\n", "var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar bloom_blob_es2018 = {};\n\n/** @license\nCopyright The Closure Library Authors.\nSPDX-License-Identifier: Apache-2.0\n*/\n\nvar Integer;\nvar Md5;\n(function () {\n  var h; /** @license\n         Copyright The Closure Library Authors.\n         SPDX-License-Identifier: Apache-2.0\n         */\n  function k(f, a) {\n    function c() {}\n    c.prototype = a.prototype;\n    f.D = a.prototype;\n    f.prototype = new c();\n    f.prototype.constructor = f;\n    f.C = function (d, e, g) {\n      for (var b = Array(arguments.length - 2), r = 2; r < arguments.length; r++) b[r - 2] = arguments[r];\n      return a.prototype[e].apply(d, b);\n    };\n  }\n  function l() {\n    this.blockSize = -1;\n  }\n  function m() {\n    this.blockSize = -1;\n    this.blockSize = 64;\n    this.g = Array(4);\n    this.B = Array(this.blockSize);\n    this.o = this.h = 0;\n    this.s();\n  }\n  k(m, l);\n  m.prototype.s = function () {\n    this.g[0] = 1732584193;\n    this.g[1] = 4023233417;\n    this.g[2] = 2562383102;\n    this.g[3] = 271733878;\n    this.o = this.h = 0;\n  };\n  function n(f, a, c) {\n    c || (c = 0);\n    var d = Array(16);\n    if (\"string\" === typeof a) for (var e = 0; 16 > e; ++e) d[e] = a.charCodeAt(c++) | a.charCodeAt(c++) << 8 | a.charCodeAt(c++) << 16 | a.charCodeAt(c++) << 24;else for (e = 0; 16 > e; ++e) d[e] = a[c++] | a[c++] << 8 | a[c++] << 16 | a[c++] << 24;\n    a = f.g[0];\n    c = f.g[1];\n    e = f.g[2];\n    var g = f.g[3];\n    var b = a + (g ^ c & (e ^ g)) + d[0] + 3614090360 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[1] + 3905402710 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[2] + 606105819 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[3] + 3250441966 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[4] + 4118548399 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[5] + 1200080426 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[6] + 2821735955 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[7] + 4249261313 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[8] + 1770035416 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[9] + 2336552879 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[10] + 4294925233 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[11] + 2304563134 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[12] + 1804603682 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[13] + 4254626195 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[14] + 2792965006 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[15] + 1236535329 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (e ^ g & (c ^ e)) + d[1] + 4129170786 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[6] + 3225465664 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[11] + 643717713 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[0] + 3921069994 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[5] + 3593408605 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[10] + 38016083 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[15] + 3634488961 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[4] + 3889429448 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[9] + 568446438 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[14] + 3275163606 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[3] + 4107603335 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[8] + 1163531501 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[13] + 2850285829 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[2] + 4243563512 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[7] + 1735328473 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[12] + 2368359562 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (c ^ e ^ g) + d[5] + 4294588738 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[8] + 2272392833 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[11] + 1839030562 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[14] + 4259657740 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[1] + 2763975236 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[4] + 1272893353 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[7] + 4139469664 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[10] + 3200236656 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[13] + 681279174 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[0] + 3936430074 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[3] + 3572445317 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[6] + 76029189 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[9] + 3654602809 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[12] + 3873151461 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[15] + 530742520 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[2] + 3299628645 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (e ^ (c | ~g)) + d[0] + 4096336452 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[7] + 1126891415 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[14] + 2878612391 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[5] + 4237533241 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[12] + 1700485571 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[3] + 2399980690 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[10] + 4293915773 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[1] + 2240044497 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[8] + 1873313359 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[15] + 4264355552 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[6] + 2734768916 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[13] + 1309151649 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[4] + 4149444226 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[11] + 3174756917 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[2] + 718787259 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[9] + 3951481745 & 4294967295;\n    f.g[0] = f.g[0] + a & 4294967295;\n    f.g[1] = f.g[1] + (e + (b << 21 & 4294967295 | b >>> 11)) & 4294967295;\n    f.g[2] = f.g[2] + e & 4294967295;\n    f.g[3] = f.g[3] + g & 4294967295;\n  }\n  m.prototype.u = function (f, a) {\n    void 0 === a && (a = f.length);\n    for (var c = a - this.blockSize, d = this.B, e = this.h, g = 0; g < a;) {\n      if (0 == e) for (; g <= c;) n(this, f, g), g += this.blockSize;\n      if (\"string\" === typeof f) for (; g < a;) {\n        if (d[e++] = f.charCodeAt(g++), e == this.blockSize) {\n          n(this, d);\n          e = 0;\n          break;\n        }\n      } else for (; g < a;) if (d[e++] = f[g++], e == this.blockSize) {\n        n(this, d);\n        e = 0;\n        break;\n      }\n    }\n    this.h = e;\n    this.o += a;\n  };\n  m.prototype.v = function () {\n    var f = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);\n    f[0] = 128;\n    for (var a = 1; a < f.length - 8; ++a) f[a] = 0;\n    var c = 8 * this.o;\n    for (a = f.length - 8; a < f.length; ++a) f[a] = c & 255, c /= 256;\n    this.u(f);\n    f = Array(16);\n    for (a = c = 0; 4 > a; ++a) for (var d = 0; 32 > d; d += 8) f[c++] = this.g[a] >>> d & 255;\n    return f;\n  };\n  function p(f, a) {\n    var c = q;\n    return Object.prototype.hasOwnProperty.call(c, f) ? c[f] : c[f] = a(f);\n  }\n  function t(f, a) {\n    this.h = a;\n    for (var c = [], d = !0, e = f.length - 1; 0 <= e; e--) {\n      var g = f[e] | 0;\n      d && g == a || (c[e] = g, d = !1);\n    }\n    this.g = c;\n  }\n  var q = {};\n  function u(f) {\n    return -128 <= f && 128 > f ? p(f, function (a) {\n      return new t([a | 0], 0 > a ? -1 : 0);\n    }) : new t([f | 0], 0 > f ? -1 : 0);\n  }\n  function v(f) {\n    if (isNaN(f) || !isFinite(f)) return w;\n    if (0 > f) return x(v(-f));\n    for (var a = [], c = 1, d = 0; f >= c; d++) a[d] = f / c | 0, c *= 4294967296;\n    return new t(a, 0);\n  }\n  function y(f, a) {\n    if (0 == f.length) throw Error(\"number format error: empty string\");\n    a = a || 10;\n    if (2 > a || 36 < a) throw Error(\"radix out of range: \" + a);\n    if (\"-\" == f.charAt(0)) return x(y(f.substring(1), a));\n    if (0 <= f.indexOf(\"-\")) throw Error('number format error: interior \"-\" character');\n    for (var c = v(Math.pow(a, 8)), d = w, e = 0; e < f.length; e += 8) {\n      var g = Math.min(8, f.length - e),\n        b = parseInt(f.substring(e, e + g), a);\n      8 > g ? (g = v(Math.pow(a, g)), d = d.j(g).add(v(b))) : (d = d.j(c), d = d.add(v(b)));\n    }\n    return d;\n  }\n  var w = u(0),\n    z = u(1),\n    A = u(16777216);\n  h = t.prototype;\n  h.m = function () {\n    if (B(this)) return -x(this).m();\n    for (var f = 0, a = 1, c = 0; c < this.g.length; c++) {\n      var d = this.i(c);\n      f += (0 <= d ? d : 4294967296 + d) * a;\n      a *= 4294967296;\n    }\n    return f;\n  };\n  h.toString = function (f) {\n    f = f || 10;\n    if (2 > f || 36 < f) throw Error(\"radix out of range: \" + f);\n    if (C(this)) return \"0\";\n    if (B(this)) return \"-\" + x(this).toString(f);\n    for (var a = v(Math.pow(f, 6)), c = this, d = \"\";;) {\n      var e = D(c, a).g;\n      c = F(c, e.j(a));\n      var g = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(f);\n      c = e;\n      if (C(c)) return g + d;\n      for (; 6 > g.length;) g = \"0\" + g;\n      d = g + d;\n    }\n  };\n  h.i = function (f) {\n    return 0 > f ? 0 : f < this.g.length ? this.g[f] : this.h;\n  };\n  function C(f) {\n    if (0 != f.h) return !1;\n    for (var a = 0; a < f.g.length; a++) if (0 != f.g[a]) return !1;\n    return !0;\n  }\n  function B(f) {\n    return -1 == f.h;\n  }\n  h.l = function (f) {\n    f = F(this, f);\n    return B(f) ? -1 : C(f) ? 0 : 1;\n  };\n  function x(f) {\n    for (var a = f.g.length, c = [], d = 0; d < a; d++) c[d] = ~f.g[d];\n    return new t(c, ~f.h).add(z);\n  }\n  h.abs = function () {\n    return B(this) ? x(this) : this;\n  };\n  h.add = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0, e = 0; e <= a; e++) {\n      var g = d + (this.i(e) & 65535) + (f.i(e) & 65535),\n        b = (g >>> 16) + (this.i(e) >>> 16) + (f.i(e) >>> 16);\n      d = b >>> 16;\n      g &= 65535;\n      b &= 65535;\n      c[e] = b << 16 | g;\n    }\n    return new t(c, c[c.length - 1] & -2147483648 ? -1 : 0);\n  };\n  function F(f, a) {\n    return f.add(x(a));\n  }\n  h.j = function (f) {\n    if (C(this) || C(f)) return w;\n    if (B(this)) return B(f) ? x(this).j(x(f)) : x(x(this).j(f));\n    if (B(f)) return x(this.j(x(f)));\n    if (0 > this.l(A) && 0 > f.l(A)) return v(this.m() * f.m());\n    for (var a = this.g.length + f.g.length, c = [], d = 0; d < 2 * a; d++) c[d] = 0;\n    for (d = 0; d < this.g.length; d++) for (var e = 0; e < f.g.length; e++) {\n      var g = this.i(d) >>> 16,\n        b = this.i(d) & 65535,\n        r = f.i(e) >>> 16,\n        E = f.i(e) & 65535;\n      c[2 * d + 2 * e] += b * E;\n      G(c, 2 * d + 2 * e);\n      c[2 * d + 2 * e + 1] += g * E;\n      G(c, 2 * d + 2 * e + 1);\n      c[2 * d + 2 * e + 1] += b * r;\n      G(c, 2 * d + 2 * e + 1);\n      c[2 * d + 2 * e + 2] += g * r;\n      G(c, 2 * d + 2 * e + 2);\n    }\n    for (d = 0; d < a; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];\n    for (d = a; d < 2 * a; d++) c[d] = 0;\n    return new t(c, 0);\n  };\n  function G(f, a) {\n    for (; (f[a] & 65535) != f[a];) f[a + 1] += f[a] >>> 16, f[a] &= 65535, a++;\n  }\n  function H(f, a) {\n    this.g = f;\n    this.h = a;\n  }\n  function D(f, a) {\n    if (C(a)) throw Error(\"division by zero\");\n    if (C(f)) return new H(w, w);\n    if (B(f)) return a = D(x(f), a), new H(x(a.g), x(a.h));\n    if (B(a)) return a = D(f, x(a)), new H(x(a.g), a.h);\n    if (30 < f.g.length) {\n      if (B(f) || B(a)) throw Error(\"slowDivide_ only works with positive integers.\");\n      for (var c = z, d = a; 0 >= d.l(f);) c = I(c), d = I(d);\n      var e = J(c, 1),\n        g = J(d, 1);\n      d = J(d, 2);\n      for (c = J(c, 2); !C(d);) {\n        var b = g.add(d);\n        0 >= b.l(f) && (e = e.add(c), g = b);\n        d = J(d, 1);\n        c = J(c, 1);\n      }\n      a = F(f, e.j(a));\n      return new H(e, a);\n    }\n    for (e = w; 0 <= f.l(a);) {\n      c = Math.max(1, Math.floor(f.m() / a.m()));\n      d = Math.ceil(Math.log(c) / Math.LN2);\n      d = 48 >= d ? 1 : Math.pow(2, d - 48);\n      g = v(c);\n      for (b = g.j(a); B(b) || 0 < b.l(f);) c -= d, g = v(c), b = g.j(a);\n      C(g) && (g = z);\n      e = e.add(g);\n      f = F(f, b);\n    }\n    return new H(e, f);\n  }\n  h.A = function (f) {\n    return D(this, f).h;\n  };\n  h.and = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) & f.i(d);\n    return new t(c, this.h & f.h);\n  };\n  h.or = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) | f.i(d);\n    return new t(c, this.h | f.h);\n  };\n  h.xor = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) ^ f.i(d);\n    return new t(c, this.h ^ f.h);\n  };\n  function I(f) {\n    for (var a = f.g.length + 1, c = [], d = 0; d < a; d++) c[d] = f.i(d) << 1 | f.i(d - 1) >>> 31;\n    return new t(c, f.h);\n  }\n  function J(f, a) {\n    var c = a >> 5;\n    a %= 32;\n    for (var d = f.g.length - c, e = [], g = 0; g < d; g++) e[g] = 0 < a ? f.i(g + c) >>> a | f.i(g + c + 1) << 32 - a : f.i(g + c);\n    return new t(e, f.h);\n  }\n  m.prototype.digest = m.prototype.v;\n  m.prototype.reset = m.prototype.s;\n  m.prototype.update = m.prototype.u;\n  Md5 = bloom_blob_es2018.Md5 = m;\n  t.prototype.add = t.prototype.add;\n  t.prototype.multiply = t.prototype.j;\n  t.prototype.modulo = t.prototype.A;\n  t.prototype.compare = t.prototype.l;\n  t.prototype.toNumber = t.prototype.m;\n  t.prototype.toString = t.prototype.toString;\n  t.prototype.getBits = t.prototype.i;\n  t.fromNumber = v;\n  t.fromString = y;\n  Integer = bloom_blob_es2018.Integer = t;\n}).apply(typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\nexport { Integer, Md5, bloom_blob_es2018 as default };\n", "import { onSnapshot, refEqual, getCountFromServer } from 'firebase/firestore';\nimport { Observable, from, pipe } from 'rxjs';\nimport { map, scan, distinctUntilChanged, filter, startWith, pairwise } from 'rxjs/operators';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DEFAULT_OPTIONS = {\n  includeMetadataChanges: false\n};\nfunction fromRef(ref, options) {\n  if (options === void 0) {\n    options = DEFAULT_OPTIONS;\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return new Observable(function (subscriber) {\n    var unsubscribe = onSnapshot(ref, options, {\n      next: subscriber.next.bind(subscriber),\n      error: subscriber.error.bind(subscriber),\n      complete: subscriber.complete.bind(subscriber)\n    });\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction doc(ref) {\n  return fromRef(ref, {\n    includeMetadataChanges: true\n  });\n}\n/**\n * Returns a stream of a document, mapped to its data payload and optionally the document ID\n * @param query\n * @param options\n */\nfunction docData(ref, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return doc(ref).pipe(map(function (snap) {\n    return snapToData(snap, options);\n  }));\n}\nfunction snapToData(snapshot, options) {\n  var _a;\n  if (options === void 0) {\n    options = {};\n  }\n  var data = snapshot.data(options);\n  // match the behavior of the JS SDK when the snapshot doesn't exist\n  // it's possible with data converters too that the user didn't return an object\n  if (!snapshot.exists() || typeof data !== 'object' || data === null || !options.idField) {\n    return data;\n  }\n  return __assign(__assign({}, data), (_a = {}, _a[options.idField] = snapshot.id, _a));\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ALL_EVENTS = ['added', 'modified', 'removed'];\n/**\n * Create an operator that determines if a the stream of document changes\n * are specified by the event filter. If the document change type is not\n * in specified events array, it will not be emitted.\n */\nvar filterEvents = function (events) {\n  return filter(function (changes) {\n    var hasChange = false;\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i];\n      if (events && events.indexOf(change.type) >= 0) {\n        hasChange = true;\n        break;\n      }\n    }\n    return hasChange;\n  });\n};\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice(original, start, deleteCount) {\n  var args = [];\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n  var returnArray = original.slice();\n  returnArray.splice.apply(returnArray, __spreadArray([start, deleteCount], args, false));\n  return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * @param combined\n * @param change\n */\nfunction processIndividualChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && refEqual(combined[change.newIndex].doc.ref, change.doc.ref)) ;else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || refEqual(combined[change.oldIndex].doc.ref, change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          var copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && refEqual(combined[change.oldIndex].doc.ref, change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @param current\n * @param changes\n * @param events\n */\nfunction processDocumentChanges(current, changes, events) {\n  if (events === void 0) {\n    events = ALL_EVENTS;\n  }\n  changes.forEach(function (change) {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = processIndividualChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Create an operator that allows you to compare the current emission with\n * the prior, even on first emission (where prior is undefined).\n */\nvar windowwise = function () {\n  return pipe(startWith(undefined), pairwise());\n};\n/**\n * Given two snapshots does their metadata match?\n * @param a\n * @param b\n */\nvar metaDataEquals = function (a, b) {\n  return JSON.stringify(a.metadata) === JSON.stringify(b.metadata);\n};\n/**\n * Create an operator that filters out empty changes. We provide the\n * ability to filter on events, which means all changes can be filtered out.\n * This creates an empty array and would be incorrect to emit.\n */\nvar filterEmptyUnlessFirst = function () {\n  return pipe(windowwise(), filter(function (_a) {\n    var prior = _a[0],\n      current = _a[1];\n    return current.length > 0 || prior === undefined;\n  }), map(function (_a) {\n    var current = _a[1];\n    return current;\n  }));\n};\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @param query\n */\nfunction collectionChanges(query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return fromRef(query, {\n    includeMetadataChanges: true\n  }).pipe(windowwise(), map(function (_a) {\n    var priorSnapshot = _a[0],\n      currentSnapshot = _a[1];\n    var docChanges = currentSnapshot.docChanges();\n    if (priorSnapshot && !metaDataEquals(priorSnapshot, currentSnapshot)) {\n      // the metadata has changed, docChanges() doesn't return metadata events, so let's\n      // do it ourselves by scanning over all the docs and seeing if the metadata has changed\n      // since either this docChanges() emission or the prior snapshot\n      currentSnapshot.docs.forEach(function (currentDocSnapshot, currentIndex) {\n        var currentDocChange = docChanges.find(function (c) {\n          return refEqual(c.doc.ref, currentDocSnapshot.ref);\n        });\n        if (currentDocChange) {\n          // if the doc is in the current changes and the metadata hasn't changed this doc\n          if (metaDataEquals(currentDocChange.doc, currentDocSnapshot)) {\n            return;\n          }\n        } else {\n          // if there is a prior doc and the metadata hasn't changed skip this doc\n          var priorDocSnapshot = priorSnapshot === null || priorSnapshot === void 0 ? void 0 : priorSnapshot.docs.find(function (d) {\n            return refEqual(d.ref, currentDocSnapshot.ref);\n          });\n          if (priorDocSnapshot && metaDataEquals(priorDocSnapshot, currentDocSnapshot)) {\n            return;\n          }\n        }\n        docChanges.push({\n          oldIndex: currentIndex,\n          newIndex: currentIndex,\n          type: 'modified',\n          doc: currentDocSnapshot\n        });\n      });\n    }\n    return docChanges;\n  }), filterEvents(options.events || ALL_EVENTS), filterEmptyUnlessFirst());\n}\n/**\n * Return a stream of document snapshots on a query. These results are in sort order.\n * @param query\n */\nfunction collection(query) {\n  return fromRef(query, {\n    includeMetadataChanges: true\n  }).pipe(map(function (changes) {\n    return changes.docs;\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @param query\n */\nfunction sortedChanges(query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return collectionChanges(query, options).pipe(scan(function (current, changes) {\n    return processDocumentChanges(current, changes, options.events);\n  }, []), distinctUntilChanged());\n}\n/**\n * Create a stream of changes as they occur it time. This method is similar\n * to docChanges() but it collects each event in an array over time.\n */\nfunction auditTrail(query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return collectionChanges(query, options).pipe(scan(function (current, action) {\n    return __spreadArray(__spreadArray([], current, true), action, true);\n  }, []));\n}\n/**\n * Returns a stream of documents mapped to their data payload, and optionally the document ID\n * @param query\n * @param options\n */\nfunction collectionData(query, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return collection(query).pipe(map(function (arr) {\n    return arr.map(function (snap) {\n      return snapToData(snap, options);\n    });\n  }));\n}\nfunction collectionCountSnap(query) {\n  return from(getCountFromServer(query));\n}\nfunction collectionCount(query) {\n  return collectionCountSnap(query).pipe(map(function (snap) {\n    return snap.data().count;\n  }));\n}\nexport { auditTrail, collection, collectionChanges, collectionCount, collectionCountSnap, collectionData, doc, docData, fromRef, snapToData, sortedChanges };\n"],
  "mappings": "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",
  "names": ["import_rxjs", "import_operators", "import_rxjs", "import_operators", "onAuthStateChanged", "onIdTokenChanged", "user", "getIdToken", "authState", "user", "idToken", "applyActionCode", "beforeAuthStateChanged", "checkActionCode", "confirmPasswordReset", "connectAuthEmulator", "createUserWithEmailAndPassword", "deleteUser", "fetchSignInMethodsForEmail", "getAdditionalUserInfo", "getAuth", "getIdToken", "getIdTokenResult", "getMultiFactorResolver", "getRedirectResult", "initializeAuth", "initializeRecaptchaConfig", "isSignInWithEmailLink", "linkWithCredential", "linkWithPhoneNumber", "linkWithPopup", "linkWithRedirect", "multiFactor", "onAuthStateChanged", "onIdTokenChanged", "parseActionCodeURL", "reauthenticateWithCredential", "reauthenticateWithPhoneNumber", "reauthenticateWithPopup", "reauthenticateWithRedirect", "reload", "revokeAccessToken", "sendEmailVerification", "sendPasswordResetEmail", "sendSignInLinkToEmail", "setPersistence", "signInAnonymously", "signInWithCredential", "signInWithCustomToken", "signInWithEmailAndPassword", "signInWithEmailLink", "signInWithPhoneNumber", "signInWithPopup", "signInWithRedirect", "signOut", "unlink", "updateCurrentUser", "updateEmail", "updatePassword", "updatePhoneNumber", "updateProfile", "useDeviceLanguage", "validatePassword", "verifyBeforeUpdateEmail", "verifyPasswordResetCode", "SDK_VERSION", "version", "SDK_VERSION", "logWarn", "FirestoreError", "user", "EmptyAuthCredentialsProvider", "user", "credentials", "EmptyAuthCredentialsProvider", "FirestoreError", "AutoId", "Timestamp", "FirestoreError", "FieldPath$1", "DocumentKey", "name", "collectionGroup", "Timestamp", "DocumentKey", "collection", "process", "version", "count", "FieldPath$1", "ByteString", "Timestamp", "DatabaseId", "FirestoreError", "DocumentKey", "FieldPath$1", "fieldsMap", "version", "orderBy", "doc", "DocumentKey", "filter", "filter", "filter", "DocumentKey", "doc", "collectionGroup", "orderBy", "limit", "startAt", "endAt", "collectionGroup", "limit", "startAt", "endAt", "query", "FieldPath$1", "filter", "query", "DocumentKey", "orderBy", "FieldPath$1", "startAt", "endAt", "query", "limit", "query", "doc", "DocumentKey", "orderBy", "filter", "map", "collection", "DocumentKey", "sum", "version", "doc", "FieldPath$1", "serverTransformResults", "documentMap", "count", "RpcCode", "Bytes", "ByteString", "DocumentKey", "logWarn", "doc", "_a", "FirestoreError", "Timestamp", "version", "name", "name", "FirestoreError", "DocumentKey", "version", "doc", "filter", "count", "where", "orderBy", "limit", "query", "collectionGroup", "from", "startAt", "endAt", "filter", "FieldPath$1", "orderBy", "protos", "ByteString", "query", "namedQuery", "map", "DocumentKey", "typeOrder", "collectionGroup", "Timestamp", "doc", "query", "collectionGroup", "count", "DocumentKey", "collection", "ByteString", "limit", "user", "user", "ByteString", "doc", "query", "collectionGroup", "doc", "query", "user", "SDK_VERSION", "protos", "credentials", "FirestoreError", "logWarn", "FirestoreError", "FirestoreError", "query", "ByteString", "user", "FirestoreError", "DocumentKey", "doc", "query", "ListenerDataSource", "query", "query", "doc", "DocumentKey", "query", "DocumentKey", "FirestoreError", "query", "DocumentKey", "user", "validateIsNotUsedTogether", "FirestoreError", "cast", "FirestoreError", "AutoId", "user", "logWarn", "query", "query", "FirestoreError", "validateIsNotUsedTogether", "Query", "DocumentReference", "CollectionReference", "DocumentKey", "refEqual", "DocumentReference", "CollectionReference", "terminate", "ensureFirestoreConfigured", "FirestoreError", "registerVersion", "AggregateField", "AggregateQuerySnapshot", "query", "Bytes", "ByteString", "FirestoreError", "FieldPath", "FieldPath$1", "GeoPoint", "FirestoreError", "VectorValue", "FieldPath", "FirestoreError", "DocumentReference", "FieldPath", "query", "FirestoreError", "AbstractUserDataWriter", "VectorValue", "GeoPoint", "Timestamp", "name", "DatabaseId", "DocumentKey", "count", "AggregateField", "SnapshotMetadata", "DocumentSnapshot", "QueryDocumentSnapshot", "QuerySnapshot", "query", "doc", "FirestoreError", "AbstractUserDataWriter", "Bytes", "name", "DocumentReference", "onSnapshot", "DocumentReference", "cast", "query", "Query", "QuerySnapshot", "ensureFirestoreConfigured", "doc", "DocumentSnapshot", "SnapshotMetadata", "getCountFromServer", "query", "count", "getAggregateFromServer", "cast", "ensureFirestoreConfigured", "AggregateQuerySnapshot", "import_rxjs", "import_operators", "__assign", "from", "onSnapshot", "doc", "refEqual", "query", "collection", "getCountFromServer", "Firestore", "collectionChanges", "collection", "sortedChanges", "auditTrail", "collectionData", "collectionCountSnap", "collectionCount", "doc", "docData", "snapToData", "fromRef", "addDoc", "aggregateFieldEqual", "aggregateQuerySnapshotEqual", "and", "arrayRemove", "arrayUnion", "average", "clearIndexedDbPersistence", "collectionGroup", "connectFirestoreEmulator", "count", "deleteAllPersistentCacheIndexes", "deleteDoc", "deleteField", "disableNetwork", "disablePersistentCacheIndexAutoCreation", "documentId", "enableIndexedDbPersistence", "enableMultiTabIndexedDbPersistence", "enableNetwork", "enablePersistentCacheIndexAutoCreation", "endAt", "endBefore", "getAggregateFromServer", "getCountFromServer", "getDoc", "getDocFromCache", "getDocFromServer", "getDocs", "getDocsFromCache", "getDocsFromServer", "getFirestore", "getPersistentCacheIndexManager", "increment", "initializeFirestore", "limit", "limitToLast", "loadBundle", "memoryEagerGarbageCollector", "memoryLocalCache", "memoryLruGarbageCollector", "namedQuery", "onSnapshot", "onSnapshotsInSync", "or", "orderBy", "persistentLocalCache", "persistentMultipleTabManager", "persistentSingleTabManager", "query", "queryEqual", "refEqual", "runTransaction", "serverTimestamp", "setDoc", "setIndexConfiguration", "setLogLevel", "snapshotEqual", "startAfter", "startAt", "sum", "terminate", "updateDoc", "waitForPendingWrites", "where", "writeBatch"]
}
